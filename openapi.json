{
  "openapi": "3.0.0",
  "info": {
    "title": "EU SDX-Engine",
    "description": "SdxEngine for operations on sodex system data. Usage guide: https://sdx-software.atlassian.net/l/cp/m9rtU1tr",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://api.sodex.cloud/v2"
    }
  ],
  "paths": {
    "/calendar-settings/": {
      "get": {
        "tags": ["CalendarSettings"],
        "summary": "Get all calendar_settings - Sodex only",
        "description": "Get all calendar_settings",
        "operationId": "get_all_calendar_settings_calendar_settings__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": false,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendarsettings.schemas.OutCalendarSetting__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/calendar-settings/{calendar_settings_id}": {
      "get": {
        "tags": ["CalendarSettings"],
        "summary": "Get calendar_setting by id",
        "description": "Get calendar_setting by id",
        "operationId": "get_calendar_setting_by_id_calendar_settings__calendar_settings_id__get",
        "parameters": [
          {
            "description": "CalendarSetting unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "CalendarSetting unique MongoDB Object-ID as string",
              "description": "CalendarSetting unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_settings_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendarSetting_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["CalendarSettings"],
        "summary": "Update calendar_setting",
        "description": "Update calendar_setting",
        "operationId": "update_calendar_setting_calendar_settings__calendar_settings_id__put",
        "parameters": [
          {
            "description": "CalendarSetting unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "CalendarSetting unique MongoDB Object-ID as string",
              "description": "CalendarSetting unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_settings_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendarSetting_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["CalendarSettings"],
        "summary": "Delete calendar_setting",
        "description": "Delete calendar_setting",
        "operationId": "delete_calendar_setting_calendar_settings__calendar_settings_id__delete",
        "parameters": [
          {
            "description": "CalendarSetting unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "CalendarSetting unique MongoDB Object-ID as string",
              "description": "CalendarSetting unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_settings_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/project/{project_id}/calendar-settings": {
      "get": {
        "tags": ["CalendarSettings"],
        "summary": "Get all calendar_settings for a project",
        "description": "Get all calendar_settings for a project",
        "operationId": "get_all_calendar_settings_for_project_project__project_id__calendar_settings_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendarsettings.schemas.OutCalendarSetting__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/calendar/{calendar_id}/settings": {
      "get": {
        "tags": ["CalendarSettings"],
        "summary": "Get user calendar settings",
        "description": "Get all callendar settings for a calendar for this user",
        "operationId": "get_all_calendar_settings_for_calendar_calendar__calendar_id__settings_get",
        "parameters": [
          {
            "description": "Calendar unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Calendar unique MongoDB Object-ID as string",
              "description": "Calendar unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendarSetting_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/calendar-events/": {
      "get": {
        "tags": ["CalendarEvents"],
        "summary": "Get all calendar_events - Sodex only",
        "description": "Get all calendar_events",
        "operationId": "get_all_calendar_events_calendar_events__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendarevents.schemas.OutCalendarEvent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/calendar-events/{calendar_event_id}": {
      "get": {
        "tags": ["CalendarEvents"],
        "summary": "Get calendar_event by id",
        "description": "Get calendar_event by id",
        "operationId": "get_calendar_event_by_id_calendar_events__calendar_event_id__get",
        "parameters": [
          {
            "description": "CalendarEvent unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "CalendarEvent unique MongoDB Object-ID as string",
              "description": "CalendarEvent unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_event_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendarEvent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["CalendarEvents"],
        "summary": "Update calendar_event",
        "description": "Update calendar_event",
        "operationId": "update_calendar_event_calendar_events__calendar_event_id__put",
        "parameters": [
          {
            "description": "CalendarEvent unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "CalendarEvent unique MongoDB Object-ID as string",
              "description": "CalendarEvent unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_event_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendarEvent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      },
      "delete": {
        "tags": ["CalendarEvents"],
        "summary": "Delete calendar_event",
        "description": "Delete calendar_event",
        "operationId": "delete_calendar_event_calendar_events__calendar_event_id__delete",
        "parameters": [
          {
            "description": "CalendarEvent unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "CalendarEvent unique MongoDB Object-ID as string",
              "description": "CalendarEvent unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_event_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/projects/{project_id}/calendar-events": {
      "get": {
        "tags": ["CalendarEvents"],
        "summary": "Get all calendar_events for a project",
        "description": "Get all calendar_events for a project",
        "operationId": "get_all_calendar_events_for_project_projects__project_id__calendar_events_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendarevents.schemas.OutCalendarEvent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/calendar/{calendar_id}/events": {
      "get": {
        "tags": ["CalendarEvents"],
        "summary": "Get all calendar_events for a calendar",
        "description": "Get all calendar_events for a calendar",
        "operationId": "get_all_calendar_events_for_calendar_calendar__calendar_id__events_get",
        "parameters": [
          {
            "description": "Calendar unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Calendar unique MongoDB Object-ID as string",
              "description": "Calendar unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendarevents.schemas.OutCalendarEvent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/calendar/{calendar_id}/event": {
      "post": {
        "tags": ["CalendarEvents"],
        "summary": "Create new calendar event",
        "description": "Create new calendar event",
        "operationId": "create_calendar_event_calendar__calendar_id__event_post",
        "parameters": [
          {
            "description": "Calendar unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Calendar unique MongoDB Object-ID as string",
              "description": "Calendar unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_calendar_event_calendar__calendar_id__event_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendarEvent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/calendar-events/{calendar_event_id}/files": {
      "put": {
        "tags": ["CalendarEvents"],
        "summary": "Update calendar_event files",
        "description": "Update calendar_event files",
        "operationId": "update_calendar_event_files_calendar_events__calendar_event_id__files_put",
        "parameters": [
          {
            "description": "CalendarEvent unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "CalendarEvent unique MongoDB Object-ID as string",
              "description": "CalendarEvent unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_event_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_calendar_event_files_calendar_events__calendar_event_id__files_put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendarEvent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/calendars/": {
      "get": {
        "tags": ["Calendars"],
        "summary": "Get all calendars - Sodex only",
        "description": "Get all calendars",
        "operationId": "get_all_calendars_calendars__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendars.schemas.OutCalendar__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/calendars/{calendar_id}": {
      "get": {
        "tags": ["Calendars"],
        "summary": "Get calendar by id",
        "description": "Get calendar by id",
        "operationId": "get_calendar_by_id_calendars__calendar_id__get",
        "parameters": [
          {
            "description": "Calendar unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Calendar unique MongoDB Object-ID as string",
              "description": "Calendar unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendar_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Calendars"],
        "summary": "Update calendar",
        "description": "Update calendar",
        "operationId": "update_calendar_calendars__calendar_id__put",
        "parameters": [
          {
            "description": "Calendar unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Calendar unique MongoDB Object-ID as string",
              "description": "Calendar unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendar_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["Calendars"],
        "summary": "Delete calendar",
        "description": "Delete calendar",
        "operationId": "delete_calendar_calendars__calendar_id__delete",
        "parameters": [
          {
            "description": "Calendar unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Calendar unique MongoDB Object-ID as string",
              "description": "Calendar unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "calendar_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/calendars": {
      "get": {
        "tags": ["Calendars"],
        "summary": "Get project calendars",
        "description": "Get project calendars",
        "operationId": "get_project_calendars_projects__project_id__calendars_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendars.schemas.OutCalendar__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Calendars"],
        "summary": "Create new calendar for a project",
        "description": "Create new calendar for a project",
        "operationId": "create_calendar_for_project_projects__project_id__calendars_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCalendar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCalendar_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/calendars-with-settings": {
      "get": {
        "tags": ["Calendars"],
        "summary": "Get project calendars with settings",
        "description": "Get project calendars with settings",
        "operationId": "get_project_calendars_with_settings_projects__project_id__calendars_with_settings_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Filter by owner type",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OwnerType"
                }
              ],
              "description": "Filter by owner type"
            },
            "name": "owner_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.calendars.calendars.schemas.OutCalendarWithSettings__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/notifications/": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get all notifications - Sodex only",
        "description": "Get all notifications",
        "operationId": "get_all_notifications_notifications__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.notifications.notifications2.schemas.OutNotification__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/notifications/{notification_id}": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get notification by id",
        "description": "Get notification by id",
        "operationId": "get_notification_by_id_notifications__notification_id__get",
        "parameters": [
          {
            "description": "Notification unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Notification unique MongoDB Object-ID as string",
              "description": "Notification unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "notification_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutNotification_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Notifications"],
        "summary": "Update notification",
        "description": "Update notification",
        "operationId": "update_notification_notifications__notification_id__put",
        "parameters": [
          {
            "description": "Notification unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Notification unique MongoDB Object-ID as string",
              "description": "Notification unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "notification_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutNotification_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Notifications"],
        "summary": "Delete notification",
        "description": "Delete notification",
        "operationId": "delete_notification_notifications__notification_id__delete",
        "parameters": [
          {
            "description": "Notification unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Notification unique MongoDB Object-ID as string",
              "description": "Notification unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "notification_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/users/me/notifications/": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get all notifications",
        "description": "Get all notifications",
        "operationId": "get_all_notifications_users_me_notifications__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.notifications.notifications2.schemas.OutNotification__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/notifications/clear-all": {
      "put": {
        "tags": ["Notifications"],
        "summary": "Clear all notifications",
        "description": "Clear all notifications",
        "operationId": "clear_all_notifications_users_me_notifications_clear_all_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/notification-settings/": {
      "get": {
        "tags": ["NotificationSettings"],
        "summary": "Get all notification_settings - Sodex only",
        "description": "Get all notification_settings",
        "operationId": "get_all_notification_settings_notification_settings__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.notifications.settings.schemas.OutNotificationSettings__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/notification-settings/{notification_settings_id}": {
      "get": {
        "tags": ["NotificationSettings"],
        "summary": "Get notification_setting by id",
        "description": "Get notification_setting by id",
        "operationId": "get_notification_setting_by_id_notification_settings__notification_settings_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "notification_settings_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutNotificationSettings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["NotificationSettings"],
        "summary": "Update notification_setting",
        "description": "Update notification_setting",
        "operationId": "update_notification_setting_notification_settings__notification_settings_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "notification_settings_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutNotificationSettings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["NotificationSettings"],
        "summary": "Delete notification_setting",
        "description": "Delete notification_setting",
        "operationId": "delete_notification_setting_notification_settings__notification_settings_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "notification_settings_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/notification-settings": {
      "get": {
        "tags": ["NotificationSettings"],
        "summary": "Get notification_setting by user id",
        "description": "Get notification_setting by user id",
        "operationId": "get_notification_settings_of_my_user_users_me_notification_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutNotificationSettings_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["NotificationSettings"],
        "summary": "Update notification_setting by user id",
        "description": "Update notification_setting by user id",
        "operationId": "update_notification_settings_of_my_user_users_me_notification_settings_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutNotificationSettings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["NotificationSettings"],
        "summary": "Create notification_setting by user id",
        "description": "Create notification_setting by user id",
        "operationId": "create_notification_settings_of_my_user_users_me_notification_settings_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputNotificationSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutNotificationSettings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-segments/": {
      "get": {
        "tags": ["CableSegments"],
        "summary": "Get all segments - Sodex only",
        "description": "Get all segments",
        "operationId": "get_all_segments_cable_segments__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablesegments.schemas.OutSegment__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cable-segments/{cable_segment_id}": {
      "get": {
        "tags": ["CableSegments"],
        "summary": "Get segment by id",
        "description": "Get segment by id",
        "operationId": "get_segment_by_id_cable_segments__cable_segment_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_segment_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSegment_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["CableSegments"],
        "summary": "Update segment",
        "description": "Update segment",
        "operationId": "update_segment_cable_segments__cable_segment_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_segment_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSegment_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CableSegments"],
        "summary": "Delete segment",
        "description": "Delete segment",
        "operationId": "delete_segment_cable_segments__cable_segment_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_segment_id",
            "in": "path"
          },
          {
            "description": "Delete files associated with points in this segment in explorer and storage",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete files associated with points in this segment in explorer and storage",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/cable-segments": {
      "get": {
        "tags": ["CableSegments"],
        "summary": "Get all segments for a project",
        "description": "Get all segments for a project",
        "operationId": "get_all_segments_for_project_projects__project_id__cable_segments_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablesegments.schemas.OutSegment__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cables/{cable_id}/segments": {
      "get": {
        "tags": ["CableSegments"],
        "summary": "Get all segments for a cable",
        "description": "Get all segments for a cable",
        "operationId": "get_all_segments_for_cable_cables__cable_id__segments_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablesegments.schemas.OutSegment__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/cable/{cable_id}/segments": {
      "post": {
        "tags": ["CableSegments"],
        "summary": "Create segment for my system and cable",
        "description": "Create segment for my system and cable",
        "operationId": "create_segment_for_my_system_and_cable_systems_me_cable__cable_id__segments_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSegment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSegment_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/cable/{cable_id}/segments": {
      "post": {
        "tags": ["CableSegments"],
        "summary": "Create segment for a system and cable",
        "description": "Create segment for a system and cable",
        "operationId": "create_segment_for_system_and_cable_systems__system_id__cable__cable_id__segments_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSegment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSegment_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable/{cable_id}/segments": {
      "post": {
        "tags": ["CableSegments"],
        "summary": "Create segment for a cable",
        "description": "Create segment for a cable",
        "operationId": "create_segment_for_cable_cable__cable_id__segments_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUserSegment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSegment_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-segments/{cable_segment_id}/file-count": {
      "get": {
        "tags": ["CableSegments"],
        "summary": "Get segment file count",
        "description": "Get segment file count",
        "operationId": "get_segment_file_count_cable_segments__cable_segment_id__file_count_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_segment_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_int_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-block-areas/": {
      "get": {
        "tags": ["CableBlockAreas"],
        "summary": "Get all cable_block_areas - Sodex only",
        "description": "Get all cable_block_areas",
        "operationId": "get_all_cable_block_areas_cable_block_areas__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cableblockareas.schemas.OutCableBlockArea__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cable-block-areas/{cable_block_area_id}": {
      "get": {
        "tags": ["CableBlockAreas"],
        "summary": "Get cable_block_area by id",
        "description": "Get cable_block_area by id",
        "operationId": "get_cable_block_area_by_id_cable_block_areas__cable_block_area_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_block_area_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableBlockArea_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["CableBlockAreas"],
        "summary": "Update cable_block_area",
        "description": "Update cable_block_area",
        "operationId": "update_cable_block_area_cable_block_areas__cable_block_area_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_block_area_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCableBlockArea"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableBlockArea_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CableBlockAreas"],
        "summary": "Delete cable_block_area",
        "description": "Delete cable_block_area",
        "operationId": "delete_cable_block_area_cable_block_areas__cable_block_area_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_block_area_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/cable-block-areas": {
      "get": {
        "tags": ["CableBlockAreas"],
        "summary": "Get all cable_block_areas for a project",
        "description": "Get all cable_block_areas for a project",
        "operationId": "get_all_cable_block_areas_for_project_projects__project_id__cable_block_areas_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cableblockareas.schemas.OutCableBlockArea__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["CableBlockAreas"],
        "summary": "Create new cable_block_area for a project",
        "description": "Create new cable_block_area for a project",
        "operationId": "create_cable_block_area_for_project_projects__project_id__cable_block_areas_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCableBlockArea"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableBlockArea_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-points/": {
      "get": {
        "tags": ["CablePoints"],
        "summary": "Get all cable_points - Sodex only",
        "description": "Get all cable_points",
        "operationId": "get_all_cable_points_cable_points__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cable-points/{cable_point_id}": {
      "get": {
        "tags": ["CablePoints"],
        "summary": "Get cable_point by id",
        "description": "Get cable_point by id",
        "operationId": "get_cable_point_by_id_cable_points__cable_point_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCablePoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["CablePoints"],
        "summary": "Update cable_point",
        "description": "Update cable_point",
        "operationId": "update_cable_point_cable_points__cable_point_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCablePoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCablePoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CablePoints"],
        "summary": "Delete cable_point",
        "description": "Delete cable_point",
        "operationId": "delete_cable_point_cable_points__cable_point_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_id",
            "in": "path"
          },
          {
            "description": "Delete all files associated with the cable_point",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete all files associated with the cable_point",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/cable-points": {
      "get": {
        "tags": ["CablePoints"],
        "summary": "Get all cable_points for a project",
        "description": "Get all cable_points for a project",
        "operationId": "get_all_cable_points_for_project_projects__project_id__cable_points_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cables/{cable_id}/points": {
      "get": {
        "tags": ["CablePoints"],
        "summary": "Get all cable_points for a cable",
        "description": "Get all cable_points for a cable",
        "operationId": "get_all_cable_points_for_cable_cables__cable_id__points_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Captured Start At"
            },
            "name": "captured_start_at",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Captured End At"
            },
            "name": "captured_end_at",
            "in": "query"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-segments/{cable_segment_id}/points": {
      "get": {
        "tags": ["CablePoints"],
        "summary": "Get all cable_points for a cable_segment",
        "description": "Get all cable_points for a cable_segment",
        "operationId": "get_all_cable_points_for_segment_cable_segments__cable_segment_id__points_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_segment_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["CablePoints"],
        "summary": "Create points for cable segment",
        "description": "Create points for a cable segment",
        "operationId": "create_cable_points_for_segment_cable_segments__cable_segment_id__points_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_segment_id",
            "in": "path"
          },
          {
            "description": "Insert point at start of segment",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Insert At Start",
              "description": "Insert point at start of segment",
              "default": false
            },
            "name": "insert_at_start",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/InputCablePoint"
                },
                "type": "array",
                "title": "Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-segments/{cable_segment_id}/point": {
      "post": {
        "tags": ["CablePoints"],
        "summary": "Create point for cable segment",
        "description": "Create point for a cable segment",
        "operationId": "create_cable_point_for_segment_cable_segments__cable_segment_id__point_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_segment_id",
            "in": "path"
          },
          {
            "description": "Insert point at start of segment",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Insert At Start",
              "description": "Insert point at start of segment",
              "default": false
            },
            "name": "insert_at_start",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCablePoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCablePoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cables/{cable_id}/points-import": {
      "post": {
        "tags": ["CablePoints"],
        "summary": "Import points for cable-segment",
        "description": "Import points for a cable-segment",
        "operationId": "import_cable_segment_points_cables__cable_id__points_import_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointImport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSegment_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-points/many": {
      "put": {
        "tags": ["CablePoints"],
        "summary": "Update many cable_points",
        "description": "Update many cable_points",
        "operationId": "update_many_cable_points_cable_points_many_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_many_cable_points_cable_points_many_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/cable-points/{cable_point_id}/file": {
      "post": {
        "tags": ["CablePoints"],
        "summary": "Upload files to cable point",
        "description": "Upload files to cable point",
        "operationId": "upload_file_to_cable_point_cable_points__cable_point_id__file_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_to_cable_point_cable_points__cable_point_id__file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCablePoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-points/{cable_point_id}/files": {
      "get": {
        "tags": ["CablePoints"],
        "summary": "Get files from cable point",
        "description": "Get files from cable point",
        "operationId": "get_files_from_cable_point_cable_points__cable_point_id__files_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.files.schemas.OutFile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CablePoints"],
        "summary": "Delete all files from cable point",
        "description": "Delete all files from cable point",
        "operationId": "delete_files_from_cable_point_cable_points__cable_point_id__files_delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCablePoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-points/{cable_point_id}/files/{file_id}": {
      "delete": {
        "tags": ["CablePoints"],
        "summary": "Delete file from cable point",
        "description": "Delete file from cable point",
        "operationId": "delete_file_from_cable_point_cable_points__cable_point_id__files__file_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCablePoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cables/": {
      "get": {
        "tags": ["Cables"],
        "summary": "Get all cables - Sodex only",
        "description": "Get all cables",
        "operationId": "get_all_cables_cables__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cables.schemas.OutCable__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cables/{cable_id}": {
      "get": {
        "tags": ["Cables"],
        "summary": "Get cable by id",
        "description": "Get cable by id",
        "operationId": "get_cable_by_id_cables__cable_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Cables"],
        "summary": "Update cable",
        "description": "Update cable",
        "operationId": "update_cable_cables__cable_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Cables"],
        "summary": "Delete cable",
        "description": "Delete cable",
        "operationId": "delete_cable_cables__cable_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          },
          {
            "description": "Delete files associated with points in this cable in explorer and storage",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete files associated with points in this cable in explorer and storage",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/cables": {
      "get": {
        "tags": ["Cables"],
        "summary": "Get all cables of project",
        "description": "Get all cables of project",
        "operationId": "get_all_cables_for_project_projects__project_id__cables_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cables.schemas.OutCable__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{cable_layer_id}/cables": {
      "get": {
        "tags": ["Cables"],
        "summary": "Get all cables of cablelayer",
        "description": "Get all cables of cablelayer",
        "operationId": "get_all_cables_for_layer_layers__cable_layer_id__cables_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_layer_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cables.schemas.OutCable__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Cables"],
        "summary": "Create new cable for a layer",
        "description": "Create new cable for a layer",
        "operationId": "create_cable_for_project_layers__cable_layer_id__cables_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cables/{cable_id}/file-count": {
      "get": {
        "tags": ["Cables"],
        "summary": "Get cable file count",
        "description": "Get cable file count",
        "operationId": "get_cable_file_count_cables__cable_id__file_count_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_int_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-types/": {
      "get": {
        "tags": ["CableTypes"],
        "summary": "Get all cable_types - Sodex only",
        "description": "Get all cable_types",
        "operationId": "get_all_cable_types_cable_types__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cabletypes.schemas.OutCableType__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cable-types/{cable_type_id}": {
      "get": {
        "tags": ["CableTypes"],
        "summary": "Get cable_type by id",
        "description": "Get cable_type by id",
        "operationId": "get_cable_type_by_id_cable_types__cable_type_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_type_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableType_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["CableTypes"],
        "summary": "Update cable_type",
        "description": "Update cable_type",
        "operationId": "update_cable_type_cable_types__cable_type_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_type_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCableType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableType_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CableTypes"],
        "summary": "Delete cable_type",
        "description": "Delete cable_type",
        "operationId": "delete_cable_type_cable_types__cable_type_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_type_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/cable-types": {
      "get": {
        "tags": ["CableTypes"],
        "summary": "Get all cable_types of my organization",
        "description": "Get all cable_types of my organization",
        "operationId": "get_all_cable_types_of_my_organization_organizations_me_cable_types_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cabletypes.schemas.OutCableType__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["CableTypes"],
        "summary": "Create new cable_type",
        "description": "Create new cable_type",
        "operationId": "create_cable_type_organizations_me_cable_types_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCableType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableType_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-layers/": {
      "get": {
        "tags": ["CableLayers"],
        "summary": "Get all cable_layers - Sodex only",
        "description": "Get all cable_layers",
        "operationId": "get_all_cable_layers_cable_layers__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablelayers.schemas.OutCableLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cable-layers/{cable_layer_id}": {
      "get": {
        "tags": ["CableLayers"],
        "summary": "Get cable_layer by id",
        "description": "Get cable_layer by id",
        "operationId": "get_cable_layer_by_id_cable_layers__cable_layer_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["CableLayers"],
        "summary": "Update cable_layer",
        "description": "Update cable_layer",
        "operationId": "update_cable_layer_cable_layers__cable_layer_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCableLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CableLayers"],
        "summary": "Delete cable_layer",
        "description": "Delete cable_layer",
        "operationId": "delete_cable_layer_cable_layers__cable_layer_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_layer_id",
            "in": "path"
          },
          {
            "description": "Delete files associated with points in this segment in explorer and storage",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete files associated with points in this segment in explorer and storage",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/cable-layers": {
      "get": {
        "tags": ["CableLayers"],
        "summary": "Get all cable_layers for a project",
        "description": "Get all cable_layers for a project",
        "operationId": "get_all_cable_layers_for_project_projects__project_id__cable_layers_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablelayers.schemas.OutCableLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["CableLayers"],
        "summary": "Create new cable_layer for a project",
        "description": "Create new cable_layer for a project",
        "operationId": "create_cable_layer_for_project_projects__project_id__cable_layers_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCableLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCableLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-layers/{cable_layer_id}/file-count": {
      "get": {
        "tags": ["CableLayers"],
        "summary": "Get cable layer file count",
        "description": "Get cable layer file count",
        "operationId": "get_cable_layer_file_count_cable_layers__cable_layer_id__file_count_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_int_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/file-count-cables": {
      "get": {
        "tags": ["CableLayers"],
        "summary": "Get snapshot file count for cables",
        "description": "Get snapshot file count for cables",
        "operationId": "get_snapshot_file_count_cables_snapshots__snapshot_id__file_count_cables_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_int_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-point-links/": {
      "get": {
        "tags": ["CablePointLinks"],
        "summary": "Get all point_links - Sodex only",
        "description": "Get all point_links",
        "operationId": "get_all_cable_point_links_cable_point_links__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablepointlinks.schemas.OutPointLink__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/cable-point-links": {
      "get": {
        "tags": ["CablePointLinks"],
        "summary": "Get all point_links for a project",
        "description": "Get all point_links for a project",
        "operationId": "get_all_cable_point_links_for_project_projects__project_id__cable_point_links_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.cables.cablepointlinks.schemas.OutPointLink__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cable-point-link/{cable_point_link_id}": {
      "get": {
        "tags": ["CablePointLinks"],
        "summary": "Get cable point link by id",
        "description": "Get cable point link by id",
        "operationId": "get_cable_point_link_by_id_cable_point_link__cable_point_link_id__get",
        "parameters": [
          {
            "description": "PointLink unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "PointLink unique MongoDB Object-ID as string",
              "description": "PointLink unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPointLink_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["CablePointLinks"],
        "summary": "Update cable point link",
        "description": "Update cable point link",
        "operationId": "update_cable_point_link_cable_point_link__cable_point_link_id__put",
        "parameters": [
          {
            "description": "PointLink unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "PointLink unique MongoDB Object-ID as string",
              "description": "PointLink unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePointLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPointLink_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["CablePointLinks"],
        "summary": "Delete cable point link",
        "description": "Delete cable point link",
        "operationId": "delete_cable_point_link_cable_point_link__cable_point_link_id__delete",
        "parameters": [
          {
            "description": "PointLink unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "PointLink unique MongoDB Object-ID as string",
              "description": "PointLink unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_point_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/cable-points/link": {
      "post": {
        "tags": ["CablePointLinks"],
        "summary": "Create cable point link",
        "description": "Create cable point link",
        "operationId": "create_cable_point_link_by_points_cable_points_link_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPointLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPointLink_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/potrees/": {
      "get": {
        "tags": ["Potree"],
        "summary": "Get all potrees - Sodex only",
        "description": "Get all potrees",
        "operationId": "get_all_potrees_potrees__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.potree.schemas.OutPotree__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/potrees/{potree_id}": {
      "get": {
        "tags": ["Potree"],
        "summary": "Get potree by id",
        "description": "Get potree by id",
        "operationId": "get_potree_by_id_potrees__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPotree_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Potree"],
        "summary": "Update potree",
        "description": "Update potree",
        "operationId": "update_potree_potrees__potree_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePotree"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPotree_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Potree"],
        "summary": "Delete potree",
        "description": "Delete potree",
        "operationId": "delete_potree_potrees__potree_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/potrees": {
      "get": {
        "tags": ["Potree"],
        "summary": "Get all potrees of a project",
        "description": "Get all potrees of a project",
        "operationId": "read_project_potrees_projects__project_id__potrees_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.potree.schemas.OutPotree__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Potree"],
        "summary": "Create new potree",
        "description": "Create new potree",
        "operationId": "create_potree_projects__project_id__potrees_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPotree"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPotree_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/potrees/{potree_id}/share": {
      "post": {
        "tags": ["Potree"],
        "summary": "Create potree share token",
        "description": "Create a share token for a given potree",
        "operationId": "create_potree_share_token_potrees__potree_id__share_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_potree_share_token_potrees__potree_id__share_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshot-notes/": {
      "get": {
        "tags": ["Snapshot Notes"],
        "summary": "Get all snapshotnotes - Sodex only",
        "description": "Get all snapshotnotes",
        "operationId": "get_all_snapshotnotes_snapshot_notes__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.snapshotnotes.schemas.OutSnapshotNote__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/snapshot/{snapshot_id}/notes": {
      "get": {
        "tags": ["Snapshot Notes"],
        "summary": "Get all snapshotnotes for a snapshot",
        "description": "Get all snapshotnotes for a snapshot",
        "operationId": "get_all_snapshotnotes_by_snapshot_snapshot__snapshot_id__notes_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.snapshotnotes.schemas.OutSnapshotNote__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/notes": {
      "post": {
        "tags": ["Snapshot Notes"],
        "summary": "Create snapshotnote",
        "description": "Create snapshotnote",
        "operationId": "create_snapshotnote_snapshots__snapshot_id__notes_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSnapshotNote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotNote_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshot-notes/{snapshotnote_id}": {
      "put": {
        "tags": ["Snapshot Notes"],
        "summary": "Update snapshotnote",
        "description": "Update snapshotnote",
        "operationId": "update_snapshotnote_snapshot_notes__snapshotnote_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshotnote_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSnapshotNote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotNote_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Snapshot Notes"],
        "summary": "Delete snapshotnote",
        "description": "Delete snapshotnote",
        "operationId": "delete_snapshotnote_snapshot_notes__snapshotnote_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshotnote_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/gallery/info": {
      "get": {
        "tags": ["Gallery"],
        "summary": "Get gallery info for project",
        "description": "Get gallery info for project",
        "operationId": "get_gallery_info_projects__project_id__gallery_info_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Start date of the timeframe to get the gallery info for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start At",
              "description": "Start date of the timeframe to get the gallery info for"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "End date of the timeframe to get the gallery info for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End At",
              "description": "End date of the timeframe to get the gallery info for"
            },
            "name": "end_at",
            "in": "query"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Tag id to filter the gallery info for",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Tag Id",
              "description": "Tag id to filter the gallery info for"
            },
            "name": "tag_id",
            "in": "query"
          },
          {
            "description": "System id to filter the gallery info for",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "System Id",
              "description": "System id to filter the gallery info for"
            },
            "name": "system_id",
            "in": "query"
          },
          {
            "description": "User id to filter the gallery info for",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "User Id",
              "description": "User id to filter the gallery info for"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "Pin type to filter the gallery info for",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/src__v2__processdata__pins__constants__PinType"
                }
              ],
              "description": "Pin type to filter the gallery info for"
            },
            "name": "pin_type",
            "in": "query"
          },
          {
            "description": "Position of the camera on the system",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CamPosition"
                }
              ],
              "description": "Position of the camera on the system"
            },
            "name": "cam_pos",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.gallery.schemas.OutGalleryInfo__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/gallery/date-info": {
      "get": {
        "tags": ["Gallery"],
        "summary": "Get gallery date info for project",
        "description": "Get gallery date info for project",
        "operationId": "get_gallery_date_info_projects__project_id__gallery_date_info_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Tag id to filter the gallery info for",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Tag Id",
              "description": "Tag id to filter the gallery info for"
            },
            "name": "tag_id",
            "in": "query"
          },
          {
            "description": "System id to filter the gallery info for",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "System Id",
              "description": "System id to filter the gallery info for"
            },
            "name": "system_id",
            "in": "query"
          },
          {
            "description": "User id to filter the gallery info for",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "User Id",
              "description": "User id to filter the gallery info for"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "Pin type to filter the gallery info for",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/src__v2__processdata__pins__constants__PinType"
                }
              ],
              "description": "Pin type to filter the gallery info for"
            },
            "name": "pin_type",
            "in": "query"
          },
          {
            "description": "Position of the camera on the system",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CamPosition"
                }
              ],
              "description": "Position of the camera on the system"
            },
            "name": "cam_pos",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.gallery.schemas.OutGalleryDateInfo__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pins/{pin_id}/gallery/image": {
      "get": {
        "tags": ["Gallery"],
        "summary": "Get Gallery Image",
        "operationId": "get_gallery_image_pins__pin_id__gallery_image_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          },
          {
            "description": "Image index",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Img Index",
              "description": "Image index"
            },
            "name": "img_index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/filetypes/": {
      "get": {
        "tags": ["Filetypes"],
        "summary": "Get all filetypes",
        "description": "Get all filetypes",
        "operationId": "get_all_filetypes_filetypes__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.filetypes.schemas.OutFiletype__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Filetypes"],
        "summary": "Create new filetype",
        "description": "Create new filetype",
        "operationId": "create_filetype_filetypes__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputFiletype"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFiletype_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/filetypes/snapshot": {
      "get": {
        "tags": ["Filetypes"],
        "summary": "Get all filetypes for snapshot download",
        "description": "Get all filetypes that can be used for snapshot download",
        "operationId": "get_all_filetypes_snapshot_filetypes_snapshot_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.filetypes.schemas.OutFiletype__"
                }
              }
            }
          }
        }
      }
    },
    "/filetypes/{filetype_id}": {
      "get": {
        "tags": ["Filetypes"],
        "summary": "Get filetype by id",
        "description": "Get filetype by id",
        "operationId": "get_filetype_by_id_filetypes__filetype_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "filetype_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFiletype_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Filetypes"],
        "summary": "Update filetype",
        "description": "Update filetype",
        "operationId": "update_filetype_filetypes__filetype_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "filetype_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFiletype"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFiletype_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Filetypes"],
        "summary": "Delete filetype",
        "description": "Delete filetype",
        "operationId": "delete_filetype_filetypes__filetype_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "filetype_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/states/": {
      "get": {
        "tags": ["States"],
        "summary": "Get all states",
        "description": "Get all states",
        "operationId": "get_all_states_states__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.states.schemas.OutState__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["States"],
        "summary": "Create new state",
        "description": "Create new state",
        "operationId": "create_state_states__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutState_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/states/{state_id}": {
      "get": {
        "tags": ["States"],
        "summary": "Get state by id",
        "description": "Get state by id",
        "operationId": "get_state_by_id_states__state_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "state_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutState_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["States"],
        "summary": "Update state",
        "description": "Update state",
        "operationId": "update_state_states__state_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "state_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutState_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/state/phases": {
      "get": {
        "tags": ["States"],
        "summary": "Get state with phases by project id",
        "description": "Get state with phases by project id",
        "operationId": "get_state_by_project_id_projects__project_id__state_phases_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.states.schemas.OutStateWithPhases__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/gradients/": {
      "get": {
        "tags": ["Gradients"],
        "summary": "Get all gradients - Sodex only",
        "description": "Get all gradients",
        "operationId": "get_all_gradients_gradients__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.gradients.schemas.OutGradient__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/gradients/default": {
      "get": {
        "tags": ["Gradients"],
        "summary": "Get default gradients",
        "description": "Get default gradients",
        "operationId": "get_default_gradients_gradients_default_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.sodexcloud.gradients.schemas.OutGradient__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/gradients/me": {
      "get": {
        "tags": ["Gradients"],
        "summary": "Get user gradients",
        "description": "Get user gradients",
        "operationId": "get_user_gradients_gradients_me_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.sodexcloud.gradients.schemas.OutGradient__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/gradients/{gradient_id}": {
      "get": {
        "tags": ["Gradients"],
        "summary": "Get gradient by id",
        "description": "Get gradient by id",
        "operationId": "get_gradient_by_id_gradients__gradient_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "gradient_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGradient_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Gradients"],
        "summary": "Update gradient",
        "description": "Update gradient",
        "operationId": "update_gradient_gradients__gradient_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "gradient_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__v2__sodexcloud__gradients__schemas__UpdateGradient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGradient_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Gradients"],
        "summary": "Delete gradient",
        "description": "Delete gradient",
        "operationId": "delete_gradient_gradients__gradient_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "gradient_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/gradients": {
      "post": {
        "tags": ["Gradients"],
        "summary": "Create new gradient",
        "description": "Create new gradient",
        "operationId": "create_gradient_gradients_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__v2__sodexcloud__gradients__schemas__InputGradient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGradient_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/buckets/": {
      "get": {
        "tags": ["Buckets"],
        "summary": "Get all buckets - Sodex only",
        "description": "Get all buckets",
        "operationId": "get_all_buckets_buckets__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.buckets.schemas.OutBucket__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/buckets/{bucket_id}": {
      "get": {
        "tags": ["Buckets"],
        "summary": "Get bucket by id",
        "description": "Get bucket by id",
        "operationId": "get_bucket_by_id_buckets__bucket_id__get",
        "parameters": [
          {
            "description": "Bucket unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Bucket unique MongoDB Object-ID as string",
              "description": "Bucket unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "bucket_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutBucket_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Buckets"],
        "summary": "Update bucket",
        "description": "Update bucket",
        "operationId": "update_bucket_buckets__bucket_id__put",
        "parameters": [
          {
            "description": "Bucket unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Bucket unique MongoDB Object-ID as string",
              "description": "Bucket unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "bucket_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBucket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutBucket_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Buckets"],
        "summary": "Delete bucket",
        "description": "Delete bucket",
        "operationId": "delete_bucket_buckets__bucket_id__delete",
        "parameters": [
          {
            "description": "Bucket unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Bucket unique MongoDB Object-ID as string",
              "description": "Bucket unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "bucket_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/buckets": {
      "get": {
        "tags": ["Buckets"],
        "summary": "Get my system buckets",
        "description": "Get my system buckets",
        "operationId": "get_my_system_buckets_systems_me_buckets_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.buckets.schemas.OutBucket__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Buckets"],
        "summary": "Create my system bucket",
        "description": "Create my system bucket",
        "operationId": "create_my_system_bucket_systems_me_buckets_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputBucket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutBucket_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/buckets": {
      "get": {
        "tags": ["Buckets"],
        "summary": "Get system buckets",
        "description": "Get system buckets",
        "operationId": "get_system_buckets_systems__system_id__buckets_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.buckets.schemas.OutBucket__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Buckets"],
        "summary": "Create system bucket",
        "description": "Create system bucket",
        "operationId": "create_system_bucket_systems__system_id__buckets_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputBucket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutBucket_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/profiles/": {
      "get": {
        "tags": ["Profiles"],
        "summary": "Get all profiles - Sodex only",
        "description": "Get all profiles",
        "operationId": "get_all_profiles_profiles__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.profiles.schemas.OutProfile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/profiles/{systemprofile_id}": {
      "get": {
        "tags": ["Profiles"],
        "summary": "Get profile by id",
        "description": "Get profile by id",
        "operationId": "get_profile_by_id_profiles__systemprofile_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "systemprofile_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProfile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Profiles"],
        "summary": "Update profile",
        "description": "Update profile",
        "operationId": "update_profile_profiles__systemprofile_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "systemprofile_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProfile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Profiles"],
        "summary": "Delete profile",
        "description": "Delete profile",
        "operationId": "delete_profile_profiles__systemprofile_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "systemprofile_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/profiles": {
      "get": {
        "tags": ["Profiles"],
        "summary": "Get all profiles of current system",
        "description": "Get all profiles of current system",
        "operationId": "get_all_profiles_of_current_system_systems_me_profiles_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.profiles.schemas.OutProfile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Profiles"],
        "summary": "Create profile for current system",
        "description": "Create profile for current system",
        "operationId": "create_profile_for_current_system_systems_me_profiles_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProfile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/profiles": {
      "get": {
        "tags": ["Profiles"],
        "summary": "Get all profiles of system",
        "description": "Get all profiles of system",
        "operationId": "get_all_profiles_of_system_systems__system_id__profiles_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.profiles.schemas.OutProfile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      },
      "post": {
        "tags": ["Profiles"],
        "summary": "Create profile",
        "description": "Create profile",
        "operationId": "create_profile_systems__system_id__profiles_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProfile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/quicktasks/": {
      "get": {
        "tags": ["Quick Tasks"],
        "summary": "Get all quicktasks - Sodex only",
        "description": "Get all quicktasks",
        "operationId": "get_all_quicktasks_quicktasks__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.quicktasks.schemas.OutQuicktask__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/quicktasks/{quicktask_id}": {
      "get": {
        "tags": ["Quick Tasks"],
        "summary": "Get quicktask by id",
        "description": "Get quicktask by id",
        "operationId": "get_quicktask_by_id_quicktasks__quicktask_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "quicktask_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutQuicktask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Quick Tasks"],
        "summary": "Update quicktask",
        "description": "Update quicktask",
        "operationId": "update_quicktask_quicktasks__quicktask_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "quicktask_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuicktask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutQuicktask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Quick Tasks"],
        "summary": "Delete quicktask",
        "description": "Delete quicktask",
        "operationId": "delete_quicktask_quicktasks__quicktask_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "quicktask_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/quicktasks": {
      "get": {
        "tags": ["Quick Tasks"],
        "summary": "Get all quicktasks of current system",
        "description": "Get all quicktasks of current system",
        "operationId": "get_all_quicktasks_of_current_system_systems_me_quicktasks_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.quicktasks.schemas.OutQuicktask__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/quicktasks": {
      "get": {
        "tags": ["Quick Tasks"],
        "summary": "Get all quicktasks of system",
        "description": "Get all quicktasks of system",
        "operationId": "get_all_quicktasks_of_system_systems__system_id__quicktasks_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.quicktasks.schemas.OutQuicktask__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          }
        ]
      },
      "post": {
        "tags": ["Quick Tasks"],
        "summary": "Create new quicktask",
        "description": "Create new quicktask",
        "operationId": "create_quicktask_systems__system_id__quicktasks_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_quicktask_systems__system_id__quicktasks_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutQuicktask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/quicktasks/{quicktask_id}/files": {
      "get": {
        "tags": ["Quick Tasks"],
        "summary": "Get all files of quicktask with signed urls",
        "description": "Get all files of quicktask with signed urls",
        "operationId": "get_all_files_of_quicktask_quicktasks__quicktask_id__files_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "quicktask_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.systems.quicktasks.schemas.OutFile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Quick Tasks"],
        "summary": "Add files to quicktask",
        "description": "Add files to quicktask",
        "operationId": "add_files_to_quicktask_quicktasks__quicktask_id__files_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "quicktask_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_add_files_to_quicktask_quicktasks__quicktask_id__files_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutQuicktask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/quicktasks/{quicktask_id}/files/{s3_key}": {
      "delete": {
        "tags": ["Quick Tasks"],
        "summary": "Delete file of quicktask",
        "description": "Delete file of quicktask",
        "operationId": "delete_file_of_quicktask_quicktasks__quicktask_id__files__s3_key__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "S3 key of file to delete"
            },
            "name": "s3_key",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "quicktask_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutQuicktask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/merged-layers/": {
      "get": {
        "tags": ["Mergedlayers"],
        "summary": "Get all merged_layers - Sodex only",
        "description": "Get all merged_layers",
        "operationId": "get_all_merged_layers_merged_layers__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.mergedlayers.schemas.OutMergedLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/merged-layers/{merged_layer_id}": {
      "get": {
        "tags": ["Mergedlayers"],
        "summary": "Get merged_layer by id",
        "description": "Get merged_layer by id",
        "operationId": "get_merged_layer_by_id_merged_layers__merged_layer_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMergedLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Mergedlayers"],
        "summary": "Update merged_layer",
        "description": "Update merged_layer",
        "operationId": "update_merged_layer_merged_layers__merged_layer_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMergedLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMergedLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Mergedlayers"],
        "summary": "Delete merged_layer",
        "description": "Delete merged_layer",
        "operationId": "delete_merged_layer_merged_layers__merged_layer_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/merged-layers": {
      "get": {
        "tags": ["Mergedlayers"],
        "summary": "Get all merged_layers for a project",
        "description": "Get all merged_layers for a project",
        "operationId": "get_all_merged_layers_for_project_projects__project_id__merged_layers_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.mergedlayers.schemas.OutMergedLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Mergedlayers"],
        "summary": "Create new merged_layer for a project",
        "description": "Create new merged_layer for a project",
        "operationId": "create_merged_layer_for_project_projects__project_id__merged_layers_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMergedLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMergedLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/project-folders/": {
      "get": {
        "tags": ["Projectfolders"],
        "summary": "Get all project_folders - Sodex only",
        "description": "Get all project_folders",
        "operationId": "get_all_project_folders_project_folders__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projectfolders.schemas.OutProjectFolder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/project-folders/{project_folder_id}": {
      "get": {
        "tags": ["Projectfolders"],
        "summary": "Get project_folder by id",
        "description": "Get project_folder by id",
        "operationId": "get_project_folder_by_id_project_folders__project_folder_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_folder_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectFolder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Projectfolders"],
        "summary": "Update project_folder",
        "description": "Update project_folder",
        "operationId": "update_project_folder_project_folders__project_folder_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectFolder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Projectfolders"],
        "summary": "Delete project_folder",
        "description": "Delete project_folder",
        "operationId": "delete_project_folder_project_folders__project_folder_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_folder_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/project-folders/{project_folder_id}/children": {
      "get": {
        "tags": ["Projectfolders"],
        "summary": "Get children project_folders by id",
        "description": "Get children project_folders by id",
        "operationId": "get_children_project_folders_by_id_project_folders__project_folder_id__children_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_folder_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projectfolders.schemas.OutProjectFolder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projectfolders"],
        "summary": "Create a child project_folder",
        "description": "Create a child project_folder",
        "operationId": "create_child_project_folder_project_folders__project_folder_id__children_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputProjectFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectFolder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organization/me/project-folders/root": {
      "get": {
        "tags": ["Projectfolders"],
        "summary": "Get root project_folder for my organization",
        "description": "Get root project_folder for my organization",
        "operationId": "get_root_project_folder_for_my_organization_organization_me_project_folders_root_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectFolder_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organization/me/project-folders": {
      "get": {
        "tags": ["Projectfolders"],
        "summary": "Get all project_folders for my organization",
        "description": "Get all project_folders for my organization",
        "operationId": "get_all_project_folders_for_my_organization_organization_me_project_folders_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projectfolders.schemas.OutProjectFolder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organization/{organization_id}/project-folders": {
      "get": {
        "tags": ["Projectfolders"],
        "summary": "Get all project_folders for an organization",
        "description": "Get all project_folders for an organization",
        "operationId": "get_all_project_folders_for_project_organization__organization_id__project_folders_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projectfolders.schemas.OutProjectFolder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cross-sections/": {
      "get": {
        "tags": ["CrossSections"],
        "summary": "Get all cross_sections - Sodex only",
        "description": "Get all cross_sections",
        "operationId": "get_all_cross_sections_cross_sections__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.crosssections.schemas.OutCrossSectionProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cross-sections/{cross_section_project_id}": {
      "get": {
        "tags": ["CrossSections"],
        "summary": "Get cross_section by id",
        "description": "Get cross_section by id",
        "operationId": "get_cross_section_by_id_cross_sections__cross_section_project_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cross_section_project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCrossSectionProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["CrossSections"],
        "summary": "Update cross_section",
        "description": "Update cross_section",
        "operationId": "update_cross_section_cross_sections__cross_section_project_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cross_section_project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCrossSectionProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCrossSectionProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CrossSections"],
        "summary": "Delete cross_section",
        "description": "Delete cross_section",
        "operationId": "delete_cross_section_cross_sections__cross_section_project_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cross_section_project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/cross-sections": {
      "get": {
        "tags": ["CrossSections"],
        "summary": "Get all cross_sections for a project",
        "description": "Get all cross_sections for a project",
        "operationId": "get_all_cross_sections_for_project_projects__project_id__cross_sections_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.crosssections.schemas.OutCrossSectionProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["CrossSections"],
        "summary": "Create new cross_section for a project",
        "description": "Create new cross_section for a project",
        "operationId": "create_cross_section_for_project_projects__project_id__cross_sections_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCrossSectionProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCrossSectionProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tobe-terrains/": {
      "get": {
        "tags": ["Tobeterrains"],
        "summary": "Get all tobe_terrains - Sodex only",
        "description": "Get all tobe_terrains",
        "operationId": "get_all_tobe_terrains_tobe_terrains__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.referenceterrains.schemas.OutTobeTerrain__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/tobe-terrains/{tobe_terrain_id}": {
      "get": {
        "tags": ["Tobeterrains"],
        "summary": "Get tobe_terrain by id",
        "description": "Get tobe_terrain by id",
        "operationId": "get_tobe_terrain_by_id_tobe_terrains__tobe_terrain_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "tobe_terrain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTobeTerrain_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Tobeterrains"],
        "summary": "Update tobe_terrain",
        "description": "Update tobe_terrain",
        "operationId": "update_tobe_terrain_tobe_terrains__tobe_terrain_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "tobe_terrain_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTobeTerrain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTobeTerrain_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Tobeterrains"],
        "summary": "Delete tobe_terrain",
        "description": "Delete tobe_terrain",
        "operationId": "delete_tobe_terrain_tobe_terrains__tobe_terrain_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "tobe_terrain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/tobe-terrains": {
      "get": {
        "tags": ["Tobeterrains"],
        "summary": "Get all tobe_terrains of a project",
        "description": "Get all tobe_terrains of a project",
        "operationId": "get_project_tobe_terrains_projects__project_id__tobe_terrains_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.referenceterrains.schemas.OutTobeTerrain__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/{file_id}/tobe-terrains": {
      "post": {
        "tags": ["Tobeterrains"],
        "summary": "Create new tobe_terrain for snapshot",
        "description": "Create new tobe_terrain for snapshot. If no name is set, the file name will be used.",
        "operationId": "create_snapshot_tobe_terrain_files__file_id__tobe_terrains_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "file_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputTobeTerrain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTobeTerrain_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/piles-geofences/": {
      "get": {
        "tags": ["Pilegeofences"],
        "summary": "Get all pile_geofences - Sodex only",
        "description": "Get all pile_geofences",
        "operationId": "get_all_pile_geofences_piles_geofences__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.pilegeofences.schemas.OutPileGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/piles-geofences/{pile_geofence_id}": {
      "get": {
        "tags": ["Pilegeofences"],
        "summary": "Get pile_geofence by id",
        "description": "Get pile_geofence by id",
        "operationId": "get_pile_geofence_by_id_piles_geofences__pile_geofence_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_geofence_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPileGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Pilegeofences"],
        "summary": "Update pile_geofence",
        "description": "Update pile_geofence",
        "operationId": "update_pile_geofence_piles_geofences__pile_geofence_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_geofence_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePileGeofence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPileGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Pilegeofences"],
        "summary": "Delete pile_geofence",
        "description": "Delete pile_geofence",
        "operationId": "delete_pile_geofence_piles_geofences__pile_geofence_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_geofence_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/piles/{pile_id}/geofences": {
      "get": {
        "tags": ["Pilegeofences"],
        "summary": "Get all pile_geofences of a pile",
        "description": "Get all pile_geofences of a pile",
        "operationId": "get_all_pile_geofences_of_pile_piles__pile_id__geofences_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.pilegeofences.schemas.OutPileGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/piles/{pile_id}/snapshots/{snapshot_id}/geofences": {
      "get": {
        "tags": ["Pilegeofences"],
        "summary": "Get pile_geofence of a pile at a snapshot",
        "description": "Get pile_geofence of a pile at a snapshot",
        "operationId": "get_pile_geofence_of_pile_at_snapshot_piles__pile_id__snapshots__snapshot_id__geofences_get",
        "parameters": [
          {
            "description": "Pile id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Pile Id",
              "description": "Pile id"
            },
            "name": "pile_id",
            "in": "path"
          },
          {
            "description": "Snapshot id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot Id",
              "description": "Snapshot id"
            },
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPileGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/piles/{pile_id}/snapshot/{snapshot_id}/geofences": {
      "post": {
        "tags": ["Pilegeofences"],
        "summary": "Create new pile_geofence",
        "description": "Create new pile_geofence",
        "operationId": "create_pile_geofence_piles__pile_id__snapshot__snapshot_id__geofences_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_id",
            "in": "path"
          },
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPileGeofence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPileGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/visconfigs/": {
      "get": {
        "tags": ["Visconfigs"],
        "summary": "Get all visconfigs - Sodex only",
        "description": "Get all visconfigs",
        "operationId": "get_all_visconfigs_visconfigs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.visconfigs.schemas.OutVisConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/visconfigs/{visconfig_id}": {
      "get": {
        "tags": ["Visconfigs"],
        "summary": "Get visconfig by id",
        "description": "Get visconfig by id",
        "operationId": "get_visconfig_by_id_visconfigs__visconfig_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "visconfig_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutVisConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Visconfigs"],
        "summary": "Update visconfig",
        "description": "Update visconfig",
        "operationId": "update_visconfig_visconfigs__visconfig_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "visconfig_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutVisConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Visconfigs"],
        "summary": "Delete visconfig",
        "description": "Delete visconfig",
        "operationId": "delete_visconfig_visconfigs__visconfig_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "visconfig_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/visconfigs/me": {
      "get": {
        "tags": ["Visconfigs"],
        "summary": "Get user visconfigs for this project",
        "description": "Get user visconfigs for this project",
        "operationId": "get_user_visconfigs_for_project_projects__project_id__visconfigs_me_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.sodexcloud.projects.visconfigs.schemas.OutVisConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/visconfigs": {
      "post": {
        "tags": ["Visconfigs"],
        "summary": "Create new visconfig",
        "description": "Create new visconfig",
        "operationId": "create_visconfig_projects__project_id__visconfigs_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputVisConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutVisConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/scanblockareas/": {
      "get": {
        "tags": ["Scanblockareas"],
        "summary": "Get all scanblockareas - Sodex only",
        "description": "Get all scanblockareas",
        "operationId": "get_all_scanblockareas_scanblockareas__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.scanblockareas.schemas.OutScanBlockArea__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/scanblockareas/{scanblockarea_id}": {
      "get": {
        "tags": ["Scanblockareas"],
        "summary": "Get scanblockarea by id",
        "description": "Get scanblockarea by id",
        "operationId": "get_scanblockarea_by_id_scanblockareas__scanblockarea_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scanblockarea_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutScanBlockArea_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Scanblockareas"],
        "summary": "Update scanblockarea",
        "description": "Update scanblockarea",
        "operationId": "update_scanblockarea_scanblockareas__scanblockarea_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scanblockarea_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScanBlockArea"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutScanBlockArea_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Scanblockareas"],
        "summary": "Delete scanblockarea",
        "description": "Delete scanblockarea",
        "operationId": "delete_scanblockarea_scanblockareas__scanblockarea_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scanblockarea_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/scanblockareas": {
      "get": {
        "tags": ["Scanblockareas"],
        "summary": "Get scanblockareas by project id",
        "description": "Get scanblockareas by project id",
        "operationId": "get_scanblockareas_by_project_id_projects__project_id__scanblockareas_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.scanblockareas.schemas.OutScanBlockArea__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/infomapfilters/": {
      "get": {
        "tags": ["Infomapfilters"],
        "summary": "Get all infomapfilters",
        "description": "Get all infomapfilters",
        "operationId": "get_all_infomapfilters_infomapfilters__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.infomapfilters.schemas.OutInfomapfilter__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/infomapfilters/me": {
      "get": {
        "tags": ["Infomapfilters"],
        "summary": "Get my infomapfilter for this project",
        "description": "Get my infomapfilter for this project. If non exist, a default filter is created and returned.",
        "operationId": "get_all_infomapfilters_by_project_projects__project_id__infomapfilters_me_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutInfomapfilter_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Infomapfilters"],
        "summary": "Create my infomapfilter for this project",
        "description": "Create my infomapfilter for this project",
        "operationId": "create_infomapfilter_by_project_projects__project_id__infomapfilters_me_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputInfomapfilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutInfomapfilter_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/infomapfilters/{infomapfilter_id}": {
      "get": {
        "tags": ["Infomapfilters"],
        "summary": "Get infomapfilter by id",
        "description": "Get infomapfilter by id",
        "operationId": "get_infomapfilter_by_id_infomapfilters__infomapfilter_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "infomapfilter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutInfomapfilter_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Infomapfilters"],
        "summary": "Update infomapfilter",
        "description": "Update infomapfilter",
        "operationId": "update_infomapfilter_infomapfilters__infomapfilter_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "infomapfilter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInfomapfilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutInfomapfilter_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Infomapfilters"],
        "summary": "Delete infomapfilter",
        "description": "Delete infomapfilter",
        "operationId": "delete_infomapfilter_infomapfilters__infomapfilter_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "infomapfilter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/infomapfilters/geofences": {
      "patch": {
        "tags": ["Infomapfilters"],
        "summary": "Update infomapfilters",
        "description": "Update infomapfilters",
        "operationId": "update_infomapfilters_by_project_projects__project_id__infomapfilters_geofences_patch",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInfomapfilterGeofence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/": {
      "get": {
        "tags": ["Layers"],
        "summary": "Get all layers - Sodex only",
        "description": "Get all layers (access only to Sodex users)",
        "operationId": "get_all_layers_layers__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.layers.schemas.OutLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/layers/{layer_id}": {
      "get": {
        "tags": ["Layers"],
        "summary": "Get layer by id",
        "description": "Get layer by id",
        "operationId": "get_layer_by_id_layers__layer_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Layers"],
        "summary": "Update layer",
        "description": "Update layer",
        "operationId": "update_layer_layers__layer_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Layers"],
        "summary": "Delete layer",
        "description": "Delete layer",
        "operationId": "delete_layer_layers__layer_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/layers": {
      "get": {
        "tags": ["Layers"],
        "summary": "Get layers by project id",
        "description": "Get layers by project id",
        "operationId": "get_layers_by_project_id_projects__project_id__layers_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.layers.schemas.OutLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Layers"],
        "summary": "Create new layer for this project",
        "description": "Create new layer for this project",
        "operationId": "create_layer_projects__project_id__layers_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUserLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/systems/me/layers": {
      "get": {
        "tags": ["Layers"],
        "summary": "Get this systems layers by project id",
        "description": "Get this systems layers by project id",
        "operationId": "get_layers_by_project_id_this_system_projects__project_id__systems_me_layers_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.layers.schemas.OutLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Layers"],
        "summary": "Create new layer for this project for this system",
        "description": "Create new layer for this project for this system",
        "operationId": "create_layer_this_system_projects__project_id__systems_me_layers_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/process": {
      "post": {
        "tags": ["Layers"],
        "summary": "Process layer",
        "description": "Process layer",
        "operationId": "process_layer_layers__layer_id__process_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/automatic-processing": {
      "post": {
        "tags": ["Layers"],
        "summary": "Process layer automatically",
        "description": "Process layer automatically",
        "operationId": "automatic_processing_layer_layers__layer_id__automatic_processing_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Layer Id"
            },
            "name": "layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/systems/{system_id}/layers/datavolume-3d": {
      "get": {
        "tags": ["Layers"],
        "summary": "Get System Layer 3D data volume",
        "description": "Get System Layer 3D data volume in GB",
        "operationId": "get_system_3d_data_volume_systems__system_id__layers_datavolume_3d_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/layers/datavolume-3d": {
      "get": {
        "tags": ["Layers"],
        "summary": "Get Project Layer 3D data volume",
        "description": "Get Project Layer 3D data volume in GB",
        "operationId": "get_project_3d_data_volume_projects__project_id__layers_datavolume_3d_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/coordinatesystems/": {
      "get": {
        "tags": ["Coordinatesystems"],
        "summary": "Get all coordinatesystems - Sodex only",
        "description": "Get all coordinatesystems",
        "operationId": "get_all_coordinatesystems_coordinatesystems__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.coordinatesystems.schemas.OutCoordinateSystem__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Coordinatesystems"],
        "summary": "Create new coordinatesystem",
        "description": "Create new coordinatesystem",
        "operationId": "create_coordinatesystem_coordinatesystems__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCoordinateSystem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCoordinateSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/coordinatesystems/{coordinatesystem_id}": {
      "get": {
        "tags": ["Coordinatesystems"],
        "summary": "Get coordinatesystem by id",
        "description": "Get coordinatesystem by id",
        "operationId": "get_coordinatesystem_by_id_coordinatesystems__coordinatesystem_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "coordinatesystem_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCoordinateSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Coordinatesystems"],
        "summary": "Update coordinatesystem",
        "description": "Update coordinatesystem",
        "operationId": "update_coordinatesystem_coordinatesystems__coordinatesystem_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "coordinatesystem_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCoordinateSystem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCoordinateSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Coordinatesystems"],
        "summary": "Delete coordinatesystem",
        "description": "Delete coordinatesystem",
        "operationId": "delete_coordinatesystem_coordinatesystems__coordinatesystem_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "coordinatesystem_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/coordinatesystems": {
      "get": {
        "tags": ["Coordinatesystems"],
        "summary": "Get coordinatesystems by project id",
        "description": "Get coordinatesystems by project id",
        "operationId": "get_coordinatesystems_by_project_id_projects__project_id__coordinatesystems_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.coordinatesystems.schemas.OutCoordinateSystem__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/coordinatesystems/{coordinatesystem_id}/calibration-file": {
      "get": {
        "tags": ["Coordinatesystems"],
        "summary": "Get Coordinatesystem Calibration File",
        "description": "Get coord-system calibration file",
        "operationId": "get_coordinatesystem_calibration_file_coordinatesystems__coordinatesystem_id__calibration_file_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "coordinatesystem_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.core.schemas.OutUrl__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/coordinatesystems/calibration-file": {
      "get": {
        "tags": ["Coordinatesystems"],
        "summary": "Get Project Coordinatesystem Calibration File",
        "description": "Get project coord-system calibration file",
        "operationId": "get_project_coordinatesystem_calibration_file_projects__project_id__coordinatesystems_calibration_file_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.core.schemas.OutUrl__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/coordinatesystems/lok-file-validation": {
      "post": {
        "tags": ["Coordinatesystems"],
        "summary": "Validate lok file",
        "description": "Validate lok file",
        "operationId": "validate_lok_file_coordinatesystems_lok_file_validation_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_validate_lok_file_coordinatesystems_lok_file_validation_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/correctionservices/": {
      "get": {
        "tags": ["Correctionservices"],
        "summary": "Get all correctionservices - Sodex only",
        "description": "Get all correctionservices",
        "operationId": "get_all_correctionservices_correctionservices__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.correctionservices.schemas.OutCorrectionservice__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/correctionservices/{correction_service_id}": {
      "get": {
        "tags": ["Correctionservices"],
        "summary": "Get correctionservice by id",
        "description": "Get correctionservice by id",
        "operationId": "get_correctionservice_by_id_correctionservices__correction_service_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "correction_service_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionservice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Correctionservices"],
        "summary": "Update correctionservice",
        "description": "Update correctionservice",
        "operationId": "update_correctionservice_correctionservices__correction_service_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "correction_service_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCorrectionservice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionservice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Correctionservices"],
        "summary": "Delete correctionservice",
        "description": "Delete correctionservice",
        "operationId": "delete_correctionservice_correctionservices__correction_service_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "correction_service_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/projects/{project_id}/correctionservices": {
      "get": {
        "tags": ["Correctionservices"],
        "summary": "Get my correctionservices by project id",
        "description": "Get correctionservices by project id",
        "operationId": "get_correctionservices_by_project_id_me_systems_me_projects__project_id__correctionservices_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionservice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Correctionservices"],
        "summary": "Create new correctionservice for me",
        "description": "Create new correctionservice for me",
        "operationId": "create_correctionservice_me_systems_me_projects__project_id__correctionservices_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCorrectionservice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionservice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/correctionservices": {
      "get": {
        "tags": ["Correctionservices"],
        "summary": "Get my correctionservices",
        "description": "Get my correctionservices",
        "operationId": "get_correctionservices_by_system_id_me_systems_me_correctionservices_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.correctionservices.schemas.OutCorrectionservice__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/projects/{project_id}/correctionservices": {
      "get": {
        "tags": ["Correctionservices"],
        "summary": "Get system correctionservices by project id",
        "description": "Get correctionservices by project id",
        "operationId": "get_correctionservices_by_project_id_systems__system_id__projects__project_id__correctionservices_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionservice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Correctionservices"],
        "summary": "Create new correctionservice for system for project",
        "description": "Create new correctionservice for system for project",
        "operationId": "create_project_system_correctionservice_systems__system_id__projects__project_id__correctionservices_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCorrectionservice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionservice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/correctionservices": {
      "get": {
        "tags": ["Correctionservices"],
        "summary": "Get correctionservices by system id",
        "description": "Get correctionservices by system id",
        "operationId": "get_correctionservices_by_system_id_systems__system_id__correctionservices_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.correctionservices.schemas.OutCorrectionservice__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Correctionservices"],
        "summary": "Create new correctionservice",
        "description": "Create new correctionservice",
        "operationId": "create_correctionservice_systems__system_id__correctionservices_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCorrectionservice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionservice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/correctionservices/validate": {
      "post": {
        "tags": ["Correctionservices"],
        "summary": "Validate project correctionservice",
        "description": "Validate project correctionservice",
        "operationId": "validate_correctionservice_correctionservices_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCorrectionservice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCorrectionserviceValidate_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/correctionservices-ntrip-mountpoints": {
      "get": {
        "tags": ["Correctionservices"],
        "summary": "Get ntrip mountpoints",
        "description": "Get ntrip mountpoints",
        "operationId": "get_ntrip_mountpoints_correctionservices_ntrip_mountpoints_get",
        "parameters": [
          {
            "description": "Ntrip server",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Server",
              "description": "Ntrip server"
            },
            "name": "server",
            "in": "query"
          },
          {
            "description": "Ntrip port",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Port",
              "description": "Ntrip port"
            },
            "name": "port",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_str__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/dashboards/": {
      "get": {
        "tags": ["Dashboards"],
        "summary": "Get all dashboards - Sodex only",
        "description": "Get all dashboards",
        "operationId": "get_all_dashboards_dashboards__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.dashboards.schemas.OutDashboard__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/dashboards/export": {
      "post": {
        "tags": ["Dashboards"],
        "summary": "Export dashboard",
        "description": "Export dashboard",
        "operationId": "export_dashboard_dashboards_export_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/dashboards/{dashboard_id}/share": {
      "get": {
        "tags": ["Dashboards"],
        "summary": "Create a share token for this dashboard",
        "description": "Create a share token for this dashboard",
        "operationId": "create_share_token_dashboards__dashboard_id__share_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dashboard_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/dashboards/{dashboard_id}": {
      "get": {
        "tags": ["Dashboards"],
        "summary": "Get dashboard by id",
        "description": "Get dashboard by id",
        "operationId": "get_dashboard_by_id_dashboards__dashboard_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dashboard_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDashboard_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Dashboards"],
        "summary": "Update dashboard",
        "description": "Update dashboard",
        "operationId": "update_dashboard_dashboards__dashboard_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dashboard_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDashboard_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Dashboards"],
        "summary": "Delete dashboard",
        "description": "Delete dashboard",
        "operationId": "delete_dashboard_dashboards__dashboard_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dashboard_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/dashboards": {
      "get": {
        "tags": ["Dashboards"],
        "summary": "Get dashboards by project id",
        "description": "Get dashboards by project id",
        "operationId": "get_dashboards_by_project_id_projects__project_id__dashboards_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.dashboards.schemas.OutDashboard__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Dashboards"],
        "summary": "Create new dashboard for this project",
        "description": "Create new dashboard for this project",
        "operationId": "create_dashboard_projects__project_id__dashboards_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputDashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDashboard_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/dashboards/{dashboard_id}/export": {
      "post": {
        "tags": ["Dashboards"],
        "summary": "Export dashboard by id",
        "description": "Export dashboard by id",
        "operationId": "export_dashboard_by_id_dashboards__dashboard_id__export_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dashboard_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportGraph"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/": {
      "get": {
        "tags": ["Files"],
        "summary": "Get all files",
        "description": "Get all files",
        "operationId": "get_all_files_files__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.files.schemas.OutFile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Files"],
        "summary": "Create new file",
        "description": "Create new file",
        "operationId": "create_file_files__post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_file_files__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "user"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/files": {
      "get": {
        "tags": ["Files"],
        "summary": "Get all files of a project",
        "description": "Get all files of a project",
        "operationId": "get_all_files_of_project_projects__project_id__files_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.files.schemas.OutFile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/files/size": {
      "get": {
        "tags": ["Files"],
        "summary": "Get total size of all files of the organization",
        "description": "Get total size of all files of the organization",
        "operationId": "get_total_size_of_organization_files_organizations_me_files_size_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/files/size": {
      "get": {
        "tags": ["Files"],
        "summary": "Get files size by organization",
        "description": "Get files size by organization",
        "operationId": "get_gb_size_of_organization_files_organizations__organization_id__files_size_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/files/size": {
      "get": {
        "tags": ["Files"],
        "summary": "Get total size of all files of the user",
        "description": "Get total size of all files of the user",
        "operationId": "get_total_size_of_user_files_projects__project_id__files_size_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/{file_id}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get file by id",
        "description": "Get file by id",
        "operationId": "get_file_by_id_files__file_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Files"],
        "summary": "Update file",
        "description": "Update file",
        "operationId": "update_file_files__file_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "file_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete file",
        "description": "Delete file",
        "operationId": "delete_file_files__file_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/{file_id}/url": {
      "get": {
        "tags": ["Files"],
        "summary": "Get signed file url by id",
        "description": "Get signed file url by id",
        "operationId": "get_file_url_by_id_files__file_id__url_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/files/part-put-url": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File Part Put Url",
        "operationId": "get_file_part_put_url_projects__project_id__files_part_put_url_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Upload id of the file",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id",
              "description": "Upload id of the file"
            },
            "name": "upload_id",
            "in": "query"
          },
          {
            "description": "Part number of the file",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Part Number",
              "description": "Part number of the file"
            },
            "name": "part_number",
            "in": "query"
          },
          {
            "description": "S3 key of the file",
            "required": true,
            "schema": {
              "type": "string",
              "title": "S3 Key",
              "description": "S3 key of the file"
            },
            "name": "s3_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/files/multipart-upload": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File Multipart Upload",
        "operationId": "get_file_multipart_upload_projects__project_id__files_multipart_upload_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Filename of the to upload file",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename",
              "description": "Filename of the to upload file"
            },
            "name": "filename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMultipartUpload_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/files/put-url": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File Put Url",
        "operationId": "get_file_put_url_projects__project_id__files_put_url_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Filename of the to upload file",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename",
              "description": "Filename of the to upload file"
            },
            "name": "filename",
            "in": "query"
          },
          {
            "description": "Number of parts to upload",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Part Count",
              "description": "Number of parts to upload",
              "default": 1
            },
            "name": "part_count",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPutUrls_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/assets": {
      "post": {
        "tags": ["Files"],
        "summary": "Create new file in the assets bucket",
        "description": "Create new file in the assets bucket",
        "operationId": "create_assets_file_files_assets_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_assets_file_files_assets_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "user"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/put-url": {
      "post": {
        "tags": ["Files"],
        "summary": "Create New File By Put Url",
        "description": "Create New File By Put Url",
        "operationId": "create_file_by_put_url_files_put_url_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileByPutUrl"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/files/{filetype}": {
      "get": {
        "tags": ["Files"],
        "summary": "Get all files of a project by type",
        "description": "Get all files of a project by type",
        "operationId": "get_all_files_of_project_by_type_projects__project_id__files__filetype__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__constants__FileType"
                }
              ],
              "title": "File type"
            },
            "name": "filetype",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.files.schemas.OutFile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/{file_id}/linked-to-snapshot": {
      "get": {
        "tags": ["Files"],
        "summary": "Is file linked snapshot",
        "description": "Is file linked to snapshot",
        "operationId": "is_file_linked_to_snapshot_files__file_id__linked_to_snapshot_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/files/upload/stream": {
      "post": {
        "tags": ["Files"],
        "summary": "Upload File Stream",
        "operationId": "upload_file_stream_projects__project_id__files_upload_stream_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_stream_projects__project_id__files_upload_stream_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/files/calculate-pixel-count": {
      "post": {
        "tags": ["Files"],
        "summary": "Calculate Images Pixel Count",
        "description": "Calculate Images Pixel Count",
        "operationId": "calculate_images_pixel_count_files_calculate_pixel_count_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "type": "array",
                "title": "File Ids",
                "description": "List of file ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_int_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/files/calculate-credits-cost": {
      "post": {
        "tags": ["Files"],
        "summary": "Calculate Images Credits Cost",
        "description": "Calculate Images Credits Cost",
        "operationId": "calculate_images_credits_cost_files_calculate_credits_cost_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_calculate_images_credits_cost_files_calculate_credits_cost_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/folders/{folder_id}/files": {
      "get": {
        "tags": ["Files"],
        "summary": "Get all files of a folder",
        "description": "Get all files of a folder",
        "operationId": "get_all_files_of_folder_folders__folder_id__files_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.files.schemas.OutFile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/folders/": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get all folders",
        "description": "Get all folders",
        "operationId": "get_all_folders_folders__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.folders.schemas.OutFolder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Folders"],
        "summary": "Create new folder",
        "description": "Create new folder",
        "operationId": "create_folder_folders__post",
        "parameters": [
          {
            "description": "If true, will return existing folder with same name and parent_id if exists.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Use Existing",
              "description": "If true, will return existing folder with same name and parent_id if exists.",
              "default": false
            },
            "name": "use_existing",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFolderWithFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/explorer": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get project explorer",
        "description": "Get project explorer",
        "operationId": "get_project_explorer_projects__project_id__explorer_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFolderWithFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/folders/{folder_id}": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get folder by id",
        "description": "Get folder by id",
        "operationId": "get_folder_by_id_folders__folder_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFolderWithFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "vidoc"]
          }
        ]
      },
      "put": {
        "tags": ["Folders"],
        "summary": "Update folder",
        "description": "Update folder",
        "operationId": "update_folder_folders__folder_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFolderWithFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      },
      "delete": {
        "tags": ["Folders"],
        "summary": "Delete folder",
        "description": "Delete folder",
        "operationId": "delete_folder_folders__folder_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/folders/{folder_id}/copy": {
      "patch": {
        "tags": ["Folders"],
        "summary": "Copy files and folders into this folder",
        "description": "Copy files and folders into this folder",
        "operationId": "copy_files_into_folder_folders__folder_id__copy_patch",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InputCopy"
                  }
                ],
                "title": "Input Copy",
                "description": "File and folder ids that should be copied"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFolderWithFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/folders/{folder_id}/move": {
      "patch": {
        "tags": ["Folders"],
        "summary": "Move files into this folder",
        "description": "Move files into this folder",
        "operationId": "move_files_into_folder_folders__folder_id__move_patch",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InputMove"
                  }
                ],
                "title": "Input Move",
                "description": "File ids that should be moved"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFolderWithFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/projects/{project_id}/explorer/zip-download": {
      "post": {
        "tags": ["Folders"],
        "summary": "Zip Folder Download",
        "description": "Download a folder and files as a zip file",
        "operationId": "project_explorer_zip_download_projects__project_id__explorer_zip_download_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputDownload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/folders/{folder_id}/pixel-count": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get Folder Images Pixel Count",
        "description": "Get pixel count of all images in a folder",
        "operationId": "get_folder_images_pixel_count_folders__folder_id__pixel_count_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_int_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/folders/{folder_id}/datavolume": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get Folder Datavolume",
        "description": "Get datavolume of all files in a folder only on level 1. Subfolders are not included. Size in GB",
        "operationId": "get_folder_images_datavolume_folders__folder_id__datavolume_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/folders/{folder_id}/sub-folders": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get all subfolders of a folder",
        "description": "Get all subfolders of a folder",
        "operationId": "get_folder_sub_folders_folders__folder_id__sub_folders_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.folders.schemas.OutFolder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/geofences/": {
      "get": {
        "tags": ["Geofences"],
        "summary": "Get all geofences - Sodex only",
        "description": "Get all geofences",
        "operationId": "get_all_geofences_geofences__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.geofences.schemas.OutGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/geofences/{geofence_id}": {
      "get": {
        "tags": ["Geofences"],
        "summary": "Get geofence by id",
        "description": "Get geofence by id",
        "operationId": "get_geofence_by_id_geofences__geofence_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "geofence_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Geofences"],
        "summary": "Update geofence",
        "description": "Update geofence",
        "operationId": "update_geofence_geofences__geofence_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "geofence_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGeofence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Geofences"],
        "summary": "Delete geofence",
        "description": "Delete geofence",
        "operationId": "delete_geofence_geofences__geofence_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "geofence_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/geofences": {
      "get": {
        "tags": ["Geofences"],
        "summary": "Get geofences by project id",
        "description": "Get geofences by project id",
        "operationId": "get_geofences_by_project_id_projects__project_id__geofences_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.geofences.schemas.OutGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Geofences"],
        "summary": "Create new geofence for this project",
        "description": "Create new geofence for this project",
        "operationId": "create_geofence_projects__project_id__geofences_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputGeofence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/orthophotos/": {
      "get": {
        "tags": ["Orthophotos"],
        "summary": "Get all Orthophotos - Sodex only",
        "description": "Get all Orthophotos",
        "operationId": "get_all_orthophotos_orthophotos__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.orthophotos.schemas.OutOrthophoto__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/orthophotos": {
      "get": {
        "tags": ["Orthophotos"],
        "summary": "Get Project Orthophotos",
        "description": "Get Project Orthophotos",
        "operationId": "get_project_orthophotos_projects__project_id__orthophotos_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Include orthophotos linked to a snapshot.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Include Snapshot Orthophotos",
              "description": "Include orthophotos linked to a snapshot.",
              "default": false
            },
            "name": "include_snapshot_orthophotos",
            "in": "query"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.orthophotos.schemas.OutOrthophoto__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Orthophotos"],
        "summary": "Create Project Orthophoto",
        "description": "Create Project Orthophoto",
        "operationId": "create_project_orthophoto_projects__project_id__orthophotos_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__orthophotos__schemas__InputOrthophoto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrthophoto_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/orthophotos/{orthophoto_id}": {
      "get": {
        "tags": ["Orthophotos"],
        "summary": "Get Orthophoto by id",
        "description": "Get Orthophoto by id",
        "operationId": "get_orthophoto_by_id_orthophotos__orthophoto_id__get",
        "parameters": [
          {
            "description": "Orthophoto unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Orthophoto unique MongoDB Object-ID as string",
              "description": "Orthophoto unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "orthophoto_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrthophoto_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Orthophotos"],
        "summary": "Update Orthophoto",
        "description": "Update Orthophoto",
        "operationId": "update_orthophoto_orthophotos__orthophoto_id__put",
        "parameters": [
          {
            "description": "Orthophoto unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Orthophoto unique MongoDB Object-ID as string",
              "description": "Orthophoto unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "orthophoto_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__orthophotos__schemas__UpdateOrthophoto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrthophoto_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Orthophotos"],
        "summary": "Delete Orthophoto",
        "description": "Delete Orthophoto",
        "operationId": "delete_orthophoto_orthophotos__orthophoto_id__delete",
        "parameters": [
          {
            "description": "Orthophoto unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Orthophoto unique MongoDB Object-ID as string",
              "description": "Orthophoto unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "orthophoto_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/project-tags/{project_tag_id}/orthophotos": {
      "get": {
        "tags": ["Orthophotos"],
        "summary": "Get orthophotos by project tag",
        "description": "Get orthophotos by project tag",
        "operationId": "get_orthophotos_by_project_tag_project_tags__project_tag_id__orthophotos_get",
        "parameters": [
          {
            "description": "ProjectTag unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "ProjectTag unique MongoDB Object-ID as string",
              "description": "ProjectTag unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_tag_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.orthophotos.schemas.OutOrthophoto__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/orthophoto": {
      "get": {
        "tags": ["Orthophotos"],
        "summary": "Get snapshot orthophoto",
        "description": "Get snapshot orthophoto",
        "operationId": "get_snapshot_orthophoto_snapshots__snapshot_id__orthophoto_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrthophoto_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/": {
      "get": {
        "tags": ["Phases"],
        "summary": "Get all phases",
        "description": "Get all phases",
        "operationId": "get_all_phases_phases__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.phases.schemas.OutPhase__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system", "guest", "sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/phases": {
      "get": {
        "tags": ["Phases"],
        "summary": "Get all phases by project",
        "description": "Get all phases by project",
        "operationId": "get_all_phases_by_project_projects__project_id__phases_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.phases.schemas.OutPhase__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Phases"],
        "summary": "Create new phase",
        "description": "Create new phase",
        "operationId": "create_phase_projects__project_id__phases_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPhase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPhase_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{phase_id}": {
      "get": {
        "tags": ["Phases"],
        "summary": "Get phase by id",
        "description": "Get phase by id",
        "operationId": "get_phase_by_id_phases__phase_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "phase_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPhase_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Phases"],
        "summary": "Update phase",
        "description": "Update phase",
        "operationId": "update_phase_phases__phase_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "phase_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPhase_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Phases"],
        "summary": "Delete phase",
        "description": "Delete phase",
        "operationId": "delete_phase_phases__phase_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "phase_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{phase_id}/state": {
      "put": {
        "tags": ["Phases"],
        "summary": "Update phase state",
        "description": "Update phase state",
        "operationId": "update_phase_state_phases__phase_id__state_put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "phase_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhaseState"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPhase_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system", "cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/phases/{phase_id}/order": {
      "put": {
        "tags": ["Phases"],
        "summary": "Update phase order",
        "description": "Update phase order",
        "operationId": "update_phase_order_phases__phase_id__order_put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "phase_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPhase_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/piles/": {
      "get": {
        "tags": ["Piles"],
        "summary": "Get all piles - Sodex Only",
        "description": "Get all piles - Sodex Only",
        "operationId": "get_all_piles_piles__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.piles.schemas.OutPile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/storages/{storage_id}/piles": {
      "get": {
        "tags": ["Piles"],
        "summary": "Get all piles",
        "description": "Get all piles",
        "operationId": "get_all_piles_by_storage_storages__storage_id__piles_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "storage_id",
            "in": "path"
          },
          {
            "description": "Get only latest volume for each pile",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Only Latest Volume",
              "description": "Get only latest volume for each pile",
              "default": false
            },
            "name": "only_latest_volume",
            "in": "query"
          },
          {
            "description": "List of pile ids to ignore",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": "array",
              "title": "Ignore Piles",
              "description": "List of pile ids to ignore",
              "default": []
            },
            "name": "ignore_piles",
            "in": "query"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.piles.schemas.OutPile__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Piles"],
        "summary": "Create new pile",
        "description": "Create new pile",
        "operationId": "create_pile_storages__storage_id__piles_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "storage_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/piles/{pile_id}": {
      "get": {
        "tags": ["Piles"],
        "summary": "Get pile by id",
        "description": "Get pile by id",
        "operationId": "get_pile_by_id_piles__pile_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Piles"],
        "summary": "Update pile",
        "description": "Update pile",
        "operationId": "update_pile_piles__pile_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPile_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Piles"],
        "summary": "Delete pile",
        "description": "Delete pile",
        "operationId": "delete_pile_piles__pile_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pile_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects",
        "description": "Get all projects",
        "operationId": "get_all_projects_projects__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/assets/auth": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get auth url for project assets",
        "description": "Get auth url for project assets",
        "operationId": "get_project_assets_auth_url_projects__project_id__assets_auth_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/potrees/auth": {
      "get": {
        "tags": ["Projects", "Potree"],
        "summary": "Get auth url for project potree",
        "description": "Get auth url for project potree",
        "operationId": "get_project_potree_auth_url_projects__project_id__potrees_auth_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/admins": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get admins by project id",
        "description": "Get admins by project id",
        "operationId": "get_admins_by_project_id_projects__project_id__admins_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.users.schemas.OutUser__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Add admins to project",
        "description": "Add user as admins to project",
        "operationId": "add_admins_to_project_projects__project_id__admins_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAdmins"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Remove admins from project",
        "description": "Remove admins from project.",
        "operationId": "remove_admins_from_project_projects__project_id__admins_delete",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": "array",
              "title": "Admin Ids"
            },
            "name": "admin_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/members": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get members by project id",
        "description": "Get members by project id",
        "operationId": "get_members_by_project_id_projects__project_id__members_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.users.schemas.OutUser__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Add members to project",
        "description": "Add user as members to project",
        "operationId": "add_users_to_project_projects__project_id__members_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMembers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Remove users from project",
        "description": "Remove users from project",
        "operationId": "remove_members_from_project_projects__project_id__members_delete",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": "array",
              "title": "Member Ids"
            },
            "name": "member_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/systems": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get systems by project id",
        "description": "Get systems by project id",
        "operationId": "get_systems_by_project_id_projects__project_id__systems_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.systems.schemas.OutSystem__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Add systems to project",
        "description": "Add systems to project",
        "operationId": "add_systems_to_project_projects__project_id__systems_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSystems"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Remove systems from project",
        "description": "Remove systems from project",
        "operationId": "remove_systems_from_project_projects__project_id__systems_delete",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": "array",
              "title": "System Ids"
            },
            "name": "system_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/projects/no-access": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects in my organization that I don't have access to",
        "description": "Get all projects in my organization that I don't have access to",
        "operationId": "get_my_organizations_no_access_projects_organizations_me_projects_no_access_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutNoAccessProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects in my organization",
        "description": "Get all projects in my organization",
        "operationId": "get_my_organizations_projects_organizations_me_projects_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "cloud_base",
              "guest",
              "system",
              "vidoc",
              "inactive"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create new project in my organization",
        "description": "Create new project in my organization",
        "operationId": "create_project_in_my_organization_organizations_me_projects_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects in organization",
        "description": "Get all projects in organization",
        "operationId": "get_organizations_projects_organizations__organization_id__projects_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create new project",
        "description": "Create new project",
        "operationId": "create_project_organizations__organization_id__projects_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get project by id",
        "description": "Get project by id",
        "operationId": "get_project_by_id_projects__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update project",
        "description": "Update project",
        "operationId": "update_project_projects__project_id__put",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProject_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete project",
        "description": "Delete project",
        "operationId": "delete_project_projects__project_id__delete",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/volume/cut-and-fill": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get project volume cut and fill",
        "description": "Get project volume cut and fill in m3",
        "operationId": "get_project_volume_cut_and_fill_projects__project_id__volume_cut_and_fill_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.processdata.snapshots.schemas.OutVolume__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/project-folders/{project_folder_id}/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get projects by project_folder id",
        "description": "Get projects by project_folder id",
        "operationId": "get_projects_by_project_folder_id_project_folders__project_folder_id__projects_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_folder_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get this system projects",
        "description": "Get this system projects",
        "operationId": "get_system_projects_systems_me_projects_get",
        "parameters": [
          {
            "description": "sort descending after last scanned at",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Last Scanned Sort",
              "description": "sort descending after last scanned at"
            },
            "name": "last_scanned_sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get projects by system id",
        "description": "Get projects by system id",
        "operationId": "get_projects_by_system_id_systems__system_id__projects_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutProject__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/projects/{project_id}/3d-timelapse": {
      "post": {
        "tags": ["Projects"],
        "summary": "Create 3D timelapse",
        "description": "Create 3D timelapse",
        "operationId": "create_project_3d_timelapse_projects__project_id__3d_timelapse_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputProject3DTimelapseConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/process-migration": {
      "post": {
        "tags": ["Projects"],
        "summary": "Process Project Migration",
        "operationId": "process_project_migration_projects__project_id__process_migration_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/viscan-scin-upload": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Viscan Scin Upload Credentials",
        "operationId": "get_viscan_scin_upload_credentials_projects__project_id__viscan_scin_upload_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Scan UUID to request the upload credentials for",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Scan Uuid",
              "description": "Scan UUID to request the upload credentials for"
            },
            "name": "scan_uuid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutViscanScinUploadCredentials_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc", "inactive"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/telekom-sma-valid": {
      "get": {
        "tags": ["Projects"],
        "summary": "Is Telekom Sma Valid",
        "operationId": "is_telekom_sma_valid_projects__project_id__telekom_sma_valid_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Telekom SMA to check",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Telekom Sma",
              "description": "Telekom SMA to check"
            },
            "name": "telekom_sma",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTelekomSMAValid_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "vidoc", "inactive"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/scantasks/": {
      "get": {
        "tags": ["Scantasks"],
        "summary": "Get all scantasks - Sodex only",
        "description": "Get all scantasks",
        "operationId": "get_all_scantasks_scantasks__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.scantasks.schemas.OutScanTask__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/scantasks": {
      "get": {
        "tags": ["Scantasks"],
        "summary": "Get scantasks by project id",
        "description": "Get scantasks by project id",
        "operationId": "get_scantasks_by_project_id_projects__project_id__scantasks_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.scantasks.schemas.OutScanTask__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Scantasks"],
        "summary": "Create new scantask for this project",
        "description": "Create new scantask for this project",
        "operationId": "create_scantask_projects__project_id__scantasks_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputScanTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutScanTask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/scantasks/{scantask_id}": {
      "get": {
        "tags": ["Scantasks"],
        "summary": "Get scantask by id",
        "description": "Get scantask by id",
        "operationId": "get_scantask_by_id_scantasks__scantask_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scantask_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutScanTask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Scantasks"],
        "summary": "Update scantask",
        "description": "Update scantask",
        "operationId": "update_scantask_scantasks__scantask_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scantask_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScanTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutScanTask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Scantasks"],
        "summary": "Delete scantask",
        "description": "Delete scantask",
        "operationId": "delete_scantask_scantasks__scantask_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scantask_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/scantasks/{scantask_id}/images": {
      "get": {
        "tags": ["Scantasks"],
        "summary": "Get images from scantask",
        "description": "Get signed s3 url from images from scantask",
        "operationId": "get_images_from_scantask_scantasks__scantask_id__images_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scantask_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_str__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Scantasks"],
        "summary": "Add images to scantask",
        "description": "Add images to scantask",
        "operationId": "add_images_to_scantask_scantasks__scantask_id__images_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "scantask_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_add_images_to_scantask_scantasks__scantask_id__images_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutScanTask_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/soils/": {
      "get": {
        "tags": ["Soils"],
        "summary": "Get all soils - Sodex only",
        "description": "Get all soils",
        "operationId": "get_all_soils_soils__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.soils.schemas.OutSoil__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/soils/{soil_id}": {
      "get": {
        "tags": ["Soils"],
        "summary": "Get soil by id",
        "description": "Get soil by id",
        "operationId": "get_soil_by_id_soils__soil_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "soil_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSoil_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Soils"],
        "summary": "Update soil",
        "description": "Update soil",
        "operationId": "update_soil_soils__soil_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "soil_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSoil"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSoil_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Soils"],
        "summary": "Delete soil",
        "description": "Delete soil",
        "operationId": "delete_soil_soils__soil_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "soil_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/soils": {
      "get": {
        "tags": ["Soils"],
        "summary": "Get soils by organization id",
        "description": "Get soils by organization id",
        "operationId": "get_soils_by_organization_id_organizations_me_soils_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.soils.schemas.OutSoil__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/soils": {
      "get": {
        "tags": ["Soils"],
        "summary": "Get soils by project id",
        "description": "Get soils by project id",
        "operationId": "get_soils_by_project_id_projects__project_id__soils_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.soils.schemas.OutSoil__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Soils"],
        "summary": "Create new soil for this project",
        "description": "Create new soil for this project",
        "operationId": "create_soil_projects__project_id__soils_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSoil"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSoil_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/soils/import": {
      "post": {
        "tags": ["Soils"],
        "summary": "Import soils for this project",
        "description": "Import soils for this project",
        "operationId": "import_soils_projects__project_id__soils_import_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSoils"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.soils.schemas.OutSoil__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/storages/": {
      "get": {
        "tags": ["Storages"],
        "summary": "Get all storages - Sodex Only",
        "description": "Get all storages - Sodex Only",
        "operationId": "get_all_storages_storages__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.storages.schemas.OutStorage__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/storages": {
      "get": {
        "tags": ["Storages"],
        "summary": "Get storages by project id",
        "description": "Get storages by project id",
        "operationId": "get_storages_by_project_id_projects__project_id__storages_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.storages.schemas.OutStorage__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Storages"],
        "summary": "Create new storage",
        "description": "Create new storage",
        "operationId": "create_storage_projects__project_id__storages_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputStorage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStorage_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/storages/{storage_id}": {
      "get": {
        "tags": ["Storages"],
        "summary": "Get storage by id",
        "description": "Get storage by id",
        "operationId": "get_storage_by_id_storages__storage_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "storage_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStorage_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Storages"],
        "summary": "Update storage",
        "description": "Update storage",
        "operationId": "update_storage_storages__storage_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "storage_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStorage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStorage_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Storages"],
        "summary": "Delete storage",
        "description": "Delete storage",
        "operationId": "delete_Storage_storages__storage_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "storage_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/storages/{storage_id}/volume": {
      "get": {
        "tags": ["Storages"],
        "summary": "Get Storage Volume",
        "description": "Get storage volume",
        "operationId": "get_storage_volume_storages__storage_id__volume_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "storage_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStorageVolumes_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/datasets/": {
      "get": {
        "tags": ["Datasets"],
        "summary": "Get all datasets - Sodex only",
        "description": "Get all datasets",
        "operationId": "get_all_datasets_datasets__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.datasets.schemas.OutDataset__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/datasets/{dataset_id}": {
      "get": {
        "tags": ["Datasets"],
        "summary": "Get dataset by id",
        "description": "Get dataset by id",
        "operationId": "get_dataset_by_id_datasets__dataset_id__get",
        "parameters": [
          {
            "description": "Dataset unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Dataset unique MongoDB Object-ID as string",
              "description": "Dataset unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dataset_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataset_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Datasets"],
        "summary": "Update dataset",
        "description": "Update dataset",
        "operationId": "update_dataset_datasets__dataset_id__put",
        "parameters": [
          {
            "description": "Dataset unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Dataset unique MongoDB Object-ID as string",
              "description": "Dataset unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dataset_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataset_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Datasets"],
        "summary": "Delete dataset",
        "description": "Delete dataset",
        "operationId": "delete_dataset_datasets__dataset_id__delete",
        "parameters": [
          {
            "description": "Dataset unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Dataset unique MongoDB Object-ID as string",
              "description": "Dataset unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dataset_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/datasets": {
      "get": {
        "tags": ["Datasets"],
        "summary": "Get project datasets",
        "description": "Get project datasets",
        "operationId": "get_project_datasets_projects__project_id__datasets_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.datasets.schemas.OutDataset__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Datasets"],
        "summary": "Create dataset for a project",
        "description": "Create dataset for a project",
        "operationId": "create_project_dataset_projects__project_id__datasets_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputDataset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataset_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/datasets/{dataset_id}/mock": {
      "post": {
        "tags": ["Datasets"],
        "summary": "Mock timeseries dataset",
        "description": "Mock timeseries dataset",
        "operationId": "mock_dataset_datasets__dataset_id__mock_post",
        "parameters": [
          {
            "description": "Dataset unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Dataset unique MongoDB Object-ID as string",
              "description": "Dataset unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dataset_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataset_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/lines/": {
      "get": {
        "tags": ["Lines"],
        "summary": "Get all lines - Sodex only",
        "description": "Get all lines",
        "operationId": "get_all_lines_lines__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.lines.schemas.OutLine__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/lines/{line_id}": {
      "get": {
        "tags": ["Lines"],
        "summary": "Get line by id",
        "description": "Get line by id",
        "operationId": "get_line_by_id_lines__line_id__get",
        "parameters": [
          {
            "description": "Line unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Line unique MongoDB Object-ID as string",
              "description": "Line unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "line_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Lines"],
        "summary": "Update line",
        "description": "Update line",
        "operationId": "update_line_lines__line_id__put",
        "parameters": [
          {
            "description": "Line unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Line unique MongoDB Object-ID as string",
              "description": "Line unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "line_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      },
      "delete": {
        "tags": ["Lines"],
        "summary": "Delete line",
        "description": "Delete line",
        "operationId": "delete_line_lines__line_id__delete",
        "parameters": [
          {
            "description": "Line unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Line unique MongoDB Object-ID as string",
              "description": "Line unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "line_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/lines": {
      "get": {
        "tags": ["Lines"],
        "summary": "Get project lines",
        "description": "Get projec lines",
        "operationId": "get_project_lines_projects__project_id__lines_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.lines.schemas.OutLine__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Lines"],
        "summary": "Create project line",
        "description": "Create project line",
        "operationId": "create_project_line_projects__project_id__lines_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cross-sections-project/{cross_section_project_id}/lines": {
      "get": {
        "tags": ["Lines"],
        "summary": "Get lines by cross section project id",
        "description": "Get lines by cross section project id",
        "operationId": "get_cross_section_project_lines_cross_sections_project__cross_section_project_id__lines_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cross_section_project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.lines.schemas.OutLine__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-lines/": {
      "get": {
        "tags": ["Storedlines"],
        "summary": "Get all stored_lines - Sodex only",
        "description": "Get all stored_lines",
        "operationId": "get_all_stored_lines_stored_lines__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.storedlines.schemas.OutStoredLine__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/stored-lines/{stored_lines_id}": {
      "get": {
        "tags": ["Storedlines"],
        "summary": "Get stored_lines by id",
        "description": "Get stored_lines by id",
        "operationId": "get_stored_lines_by_id_stored_lines__stored_lines_id__get",
        "parameters": [
          {
            "description": "StoredLines unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "StoredLines unique MongoDB Object-ID as string",
              "description": "StoredLines unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_lines_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Storedlines"],
        "summary": "Update stored_lines",
        "description": "Update stored_lines",
        "operationId": "update_stored_lines_stored_lines__stored_lines_id__put",
        "parameters": [
          {
            "description": "StoredLines unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "StoredLines unique MongoDB Object-ID as string",
              "description": "StoredLines unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_lines_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoredLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      },
      "delete": {
        "tags": ["Storedlines"],
        "summary": "Delete stored_lines",
        "description": "Delete stored_lines",
        "operationId": "delete_stored_lines_stored_lines__stored_lines_id__delete",
        "parameters": [
          {
            "description": "StoredLines unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "StoredLines unique MongoDB Object-ID as string",
              "description": "StoredLines unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_lines_id",
            "in": "path"
          },
          {
            "description": "Delete all files associated also in from the explorer and storage",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete all files associated also in from the explorer and storage",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/projects/{project_id}/stored-lines": {
      "get": {
        "tags": ["Storedlines"],
        "summary": "Get project stored_lines",
        "description": "Get project stored_lines",
        "operationId": "get_project_stored_lines_projects__project_id__stored_lines_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.storedlines.schemas.OutStoredLine__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Storedlines"],
        "summary": "Create project stored_lines",
        "description": "Create project stored_lines",
        "operationId": "create_project_stored_lines_projects__project_id__stored_lines_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputStoredLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-lines/{stored_lines_id}/point/{point_id}/file": {
      "post": {
        "tags": ["Storedlines"],
        "summary": "Upload files to storedlines point",
        "description": "Upload files to storedlines point",
        "operationId": "upload_file_to_storedlines_point_stored_lines__stored_lines_id__point__point_id__file_post",
        "parameters": [
          {
            "description": "Cable point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Cable point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "StoredLines unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "StoredLines unique MongoDB Object-ID as string",
              "description": "StoredLines unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_lines_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_to_storedlines_point_stored_lines__stored_lines_id__point__point_id__file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-lines/{stored_lines_id}/point/{point_id}/files": {
      "get": {
        "tags": ["Storedlines"],
        "summary": "Get files of storedlines point",
        "description": "Get files of storedlines point",
        "operationId": "get_files_of_storedlines_point_stored_lines__stored_lines_id__point__point_id__files_get",
        "parameters": [
          {
            "description": "Cable point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Cable point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "StoredLines unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "StoredLines unique MongoDB Object-ID as string",
              "description": "StoredLines unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_lines_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredLine_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["Storedlines"],
        "summary": "Delete all files from storedlines point",
        "description": "Delete all files from storedlines point",
        "operationId": "delete_files_from_storedlines_point_stored_lines__stored_lines_id__point__point_id__files_delete",
        "parameters": [
          {
            "description": "Storedline point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Storedline point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "StoredLines unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "StoredLines unique MongoDB Object-ID as string",
              "description": "StoredLines unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_lines_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/stored-lines/{stored_lines_id}/point/{point_id}/file/{file_id}": {
      "delete": {
        "tags": ["Storedlines"],
        "summary": "Delete file from storedlines point",
        "description": "Delete file from storedlines point",
        "operationId": "delete_file_from_storedlines_point_stored_lines__stored_lines_id__point__point_id__file__file_id__delete",
        "parameters": [
          {
            "description": "Cable point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Cable point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "File Id",
              "description": "File ID"
            },
            "name": "file_id",
            "in": "path"
          },
          {
            "description": "StoredLines unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "StoredLines unique MongoDB Object-ID as string",
              "description": "StoredLines unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_lines_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/checkpoints/": {
      "get": {
        "tags": ["Checkpointpoints"],
        "summary": "Get all checkpoints - Sodex only",
        "description": "Get all checkpoints",
        "operationId": "get_all_checkpoints_checkpoints__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.checkpoints.schemas.OutCheckpoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/checkpoints/{checkpoint_id}": {
      "get": {
        "tags": ["Checkpointpoints"],
        "summary": "Get checkpoint by id",
        "description": "Get checkpoint by id",
        "operationId": "get_checkpoint_by_id_checkpoints__checkpoint_id__get",
        "parameters": [
          {
            "description": "Checkpoint unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Checkpoint unique MongoDB Object-ID as string",
              "description": "Checkpoint unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "checkpoint_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCheckpoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Checkpointpoints"],
        "summary": "Update checkpoint",
        "description": "Update checkpoint",
        "operationId": "update_checkpoint_checkpoints__checkpoint_id__put",
        "parameters": [
          {
            "description": "Checkpoint unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Checkpoint unique MongoDB Object-ID as string",
              "description": "Checkpoint unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "checkpoint_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCheckpoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCheckpoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      },
      "delete": {
        "tags": ["Checkpointpoints"],
        "summary": "Delete checkpoint",
        "description": "Delete checkpoint",
        "operationId": "delete_checkpoint_checkpoints__checkpoint_id__delete",
        "parameters": [
          {
            "description": "Checkpoint unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Checkpoint unique MongoDB Object-ID as string",
              "description": "Checkpoint unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "checkpoint_id",
            "in": "path"
          },
          {
            "description": "Delete all files associated also in from the explorer and storage",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete all files associated also in from the explorer and storage",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/projects/{project_id}/checkpoints": {
      "get": {
        "tags": ["Checkpointpoints"],
        "summary": "Get project checkpoints",
        "description": "Get project checkpoints",
        "operationId": "get_project_checkpoints_projects__project_id__checkpoints_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.checkpoints.schemas.OutCheckpoint__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Checkpointpoints"],
        "summary": "Create project checkpoint",
        "description": "Create project checkpoint",
        "operationId": "create_project_checkpoint_projects__project_id__checkpoints_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCheckpoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCheckpoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/checkpoints/{checkpoint_id}/file": {
      "post": {
        "tags": ["Checkpointpoints"],
        "summary": "Upload files to checkpoint",
        "description": "Upload files to checkpoint",
        "operationId": "upload_file_to_checkpoints_point_checkpoints__checkpoint_id__file_post",
        "parameters": [
          {
            "description": "Checkpoint unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Checkpoint unique MongoDB Object-ID as string",
              "description": "Checkpoint unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "checkpoint_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_to_checkpoints_point_checkpoints__checkpoint_id__file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCheckpoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/checkpoints/{checkpoint_id}/files": {
      "get": {
        "tags": ["Checkpointpoints"],
        "summary": "Get files of checkpoint",
        "description": "Get files of checkpoint",
        "operationId": "get_files_of_checkpoints_point_checkpoints__checkpoint_id__files_get",
        "parameters": [
          {
            "description": "Checkpoint unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Checkpoint unique MongoDB Object-ID as string",
              "description": "Checkpoint unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "checkpoint_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCheckpoint_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["Checkpointpoints"],
        "summary": "Delete all files from checkpoint",
        "description": "Delete all files from checkpoint",
        "operationId": "delete_files_from_checkpoints_point_checkpoints__checkpoint_id__files_delete",
        "parameters": [
          {
            "description": "Checkpoint unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Checkpoint unique MongoDB Object-ID as string",
              "description": "Checkpoint unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "checkpoint_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/checkpoints/{checkpoint_id}/file/{file_id}": {
      "delete": {
        "tags": ["Checkpointpoints"],
        "summary": "Delete file from checkpoint",
        "description": "Delete file from checkpoint",
        "operationId": "delete_file_from_checkpoints_point_checkpoints__checkpoint_id__file__file_id__delete",
        "parameters": [
          {
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "File Id",
              "description": "File ID"
            },
            "name": "file_id",
            "in": "path"
          },
          {
            "description": "Checkpoint unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Checkpoint unique MongoDB Object-ID as string",
              "description": "Checkpoint unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "checkpoint_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/stored-points/": {
      "get": {
        "tags": ["Measurements"],
        "summary": "Get all stored_points - Sodex only",
        "description": "Get all stored_points",
        "operationId": "get_all_stored_points_stored_points__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.storedpoints.schemas.OutStoredPoints__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/stored-points/{stored_points_id}": {
      "get": {
        "tags": ["Measurements"],
        "summary": "Get stored_points by id",
        "description": "Get stored_points by id",
        "operationId": "get_stored_points_by_id_stored_points__stored_points_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_points_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredPoints_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Measurements"],
        "summary": "Update stored_points",
        "description": "Update stored_points",
        "operationId": "update_stored_points_stored_points__stored_points_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_points_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoredPoints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredPoints_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Measurements"],
        "summary": "Delete stored_points",
        "description": "Delete stored_points",
        "operationId": "delete_stored_points_stored_points__stored_points_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_points_id",
            "in": "path"
          },
          {
            "description": "Delete all files associated also in from the explorer and storage",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete all files associated also in from the explorer and storage",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/stored-points": {
      "get": {
        "tags": ["Measurements"],
        "summary": "Get stored_points by project id",
        "description": "Get stored_points by project id",
        "operationId": "get_stored_points_by_project_id_projects__project_id__stored_points_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.storedpoints.schemas.OutStoredPoints__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Measurements"],
        "summary": "Create new stored_points for this project",
        "description": "Create new stored_points for this project",
        "operationId": "create_stored_points_projects__project_id__stored_points_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputStoredPoints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredPoints_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-points/{stored_points_id}/point/{point_id}/file": {
      "post": {
        "tags": ["Measurements"],
        "summary": "Upload files to storedpoints point",
        "description": "Upload files to storedpoints point",
        "operationId": "upload_file_to_storedpoints_point_stored_points__stored_points_id__point__point_id__file_post",
        "parameters": [
          {
            "description": "Cable point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Cable point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_points_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_to_storedpoints_point_stored_points__stored_points_id__point__point_id__file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredPoints_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-points/{stored_points_id}/point/{point_id}/files": {
      "get": {
        "tags": ["Measurements"],
        "summary": "Get files of storedpoints point",
        "description": "Get files of storedpoints point",
        "operationId": "get_files_of_storedpoints_point_stored_points__stored_points_id__point__point_id__files_get",
        "parameters": [
          {
            "description": "Cable point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Cable point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_points_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutStoredPoints_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Measurements"],
        "summary": "Delete all files from storedpoints point",
        "description": "Delete all files from storedpoints point",
        "operationId": "delete_files_from_storedpoints_point_stored_points__stored_points_id__point__point_id__files_delete",
        "parameters": [
          {
            "description": "Storedponts point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Storedponts point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_points_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-points/{stored_points_id}/point/{point_id}/file/{file_id}": {
      "delete": {
        "tags": ["Measurements"],
        "summary": "Delete file from storedpoints point",
        "description": "Delete file from storedpoints point",
        "operationId": "delete_file_from_storedpoints_point_stored_points__stored_points_id__point__point_id__file__file_id__delete",
        "parameters": [
          {
            "description": "Cable point ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Point Id",
              "description": "Cable point ID"
            },
            "name": "point_id",
            "in": "path"
          },
          {
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "File Id",
              "description": "File ID"
            },
            "name": "file_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "stored_points_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/project-tags/": {
      "get": {
        "tags": ["Project Tags"],
        "summary": "Get all project_tags - Sodex only",
        "description": "Get all project_tags",
        "operationId": "get_all_project_tags_project_tags__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.tags.schemas.OutProjectTag__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/project-tags/{project_tag_id}": {
      "get": {
        "tags": ["Project Tags"],
        "summary": "Get project_tag by id",
        "description": "Get project_tag by id",
        "operationId": "get_project_tag_by_id_project_tags__project_tag_id__get",
        "parameters": [
          {
            "description": "ProjectTag unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "ProjectTag unique MongoDB Object-ID as string",
              "description": "ProjectTag unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_tag_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectTag_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Project Tags"],
        "summary": "Update project_tag",
        "description": "Update project_tag",
        "operationId": "update_project_tag_project_tags__project_tag_id__put",
        "parameters": [
          {
            "description": "ProjectTag unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "ProjectTag unique MongoDB Object-ID as string",
              "description": "ProjectTag unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_tag_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectTag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectTag_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Project Tags"],
        "summary": "Delete project_tag",
        "description": "Delete project_tag",
        "operationId": "delete_project_tag_project_tags__project_tag_id__delete",
        "parameters": [
          {
            "description": "ProjectTag unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "ProjectTag unique MongoDB Object-ID as string",
              "description": "ProjectTag unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_tag_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/project-tags": {
      "get": {
        "tags": ["Project Tags"],
        "summary": "Get project project_tags",
        "description": "Get project project_tags",
        "operationId": "get_project_project_tags_projects__project_id__project_tags_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.tags.schemas.OutProjectTag__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Project Tags"],
        "summary": "Create project project_tag",
        "description": "Create project project_tag",
        "operationId": "create_project_project_tag_projects__project_id__project_tags_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputProjectTag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectTag_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshot-comparisons/": {
      "get": {
        "tags": ["Snapshotcomparison"],
        "summary": "Get all SnapshotComparisons - Sodex only",
        "description": "Get all SnapshotComparisons",
        "operationId": "get_all_snapshot_comparisons_snapshot_comparisons__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.snapshotcomparison.schemas.OutSnapshotComparison__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/snapshot-comparisons": {
      "get": {
        "tags": ["Snapshotcomparison"],
        "summary": "Get Project SnapshotComparisons",
        "description": "Get Project SnapshotComparisons",
        "operationId": "get_project_snapshot_comparisons_projects__project_id__snapshot_comparisons_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.snapshotcomparison.schemas.OutSnapshotComparison__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Snapshotcomparison"],
        "summary": "Create Project SnapshotComparison",
        "description": "Create Project SnapshotComparison",
        "operationId": "create_project_snapshot_comparison_projects__project_id__snapshot_comparisons_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSnapshotComparison"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotComparison_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshot-comparisons/{snapshot_comparison_id}": {
      "get": {
        "tags": ["Snapshotcomparison"],
        "summary": "Get SnapshotComparison by id",
        "description": "Get SnapshotComparison by id",
        "operationId": "get_snapshot_comparison_by_id_snapshot_comparisons__snapshot_comparison_id__get",
        "parameters": [
          {
            "description": "SnapshotComparison unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SnapshotComparison unique MongoDB Object-ID as string",
              "description": "SnapshotComparison unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_comparison_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotComparison_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Snapshotcomparison"],
        "summary": "Update SnapshotComparison",
        "description": "Update SnapshotComparison",
        "operationId": "update_snapshot_comparison_snapshot_comparisons__snapshot_comparison_id__put",
        "parameters": [
          {
            "description": "SnapshotComparison unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SnapshotComparison unique MongoDB Object-ID as string",
              "description": "SnapshotComparison unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_comparison_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSnapshotComparison"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotComparison_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Snapshotcomparison"],
        "summary": "Delete SnapshotComparison",
        "description": "Delete SnapshotComparison",
        "operationId": "delete_snapshot_comparison_snapshot_comparisons__snapshot_comparison_id__delete",
        "parameters": [
          {
            "description": "SnapshotComparison unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SnapshotComparison unique MongoDB Object-ID as string",
              "description": "SnapshotComparison unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_comparison_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/gcp-sets/": {
      "get": {
        "tags": ["GCP Sets"],
        "summary": "Get all gcp_sets - Sodex only",
        "description": "Get all gcp_sets",
        "operationId": "get_all_gcp_sets_gcp_sets__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.gcpsets.schemas.OutGcpSet__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/gcp-sets/{gcp_set_id}": {
      "get": {
        "tags": ["GCP Sets"],
        "summary": "Get gcp_set by id",
        "description": "Get gcp_set by id",
        "operationId": "get_gcp_set_by_id_gcp_sets__gcp_set_id__get",
        "parameters": [
          {
            "description": "GcpSet unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "GcpSet unique MongoDB Object-ID as string",
              "description": "GcpSet unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "gcp_set_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGcpSet_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["GCP Sets"],
        "summary": "Update gcp_set",
        "description": "Update gcp_set",
        "operationId": "update_gcp_set_gcp_sets__gcp_set_id__put",
        "parameters": [
          {
            "description": "GcpSet unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "GcpSet unique MongoDB Object-ID as string",
              "description": "GcpSet unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "gcp_set_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGcpSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGcpSet_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["GCP Sets"],
        "summary": "Delete gcp_set",
        "description": "Delete gcp_set",
        "operationId": "delete_gcp_set_gcp_sets__gcp_set_id__delete",
        "parameters": [
          {
            "description": "GcpSet unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "GcpSet unique MongoDB Object-ID as string",
              "description": "GcpSet unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "gcp_set_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/gcp-sets": {
      "get": {
        "tags": ["GCP Sets"],
        "summary": "Get project gcp_sets",
        "description": "Get project gcp_sets",
        "operationId": "get_project_gcp_sets_projects__project_id__gcp_sets_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.gcpsets.schemas.OutGcpSet__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["GCP Sets"],
        "summary": "Create project gcp_set",
        "description": "Create project gcp_set",
        "operationId": "create_project_gcp_set_projects__project_id__gcp_sets_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputGcpSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutGcpSet_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pending-jobs/": {
      "get": {
        "tags": ["PendingJobs"],
        "summary": "Get all PendingJobs - Sodex only",
        "description": "Get all PendingJobs",
        "operationId": "get_all_pending_jobs_pending_jobs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.pendingJobs.model.OutPendingJob__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/pending-jobs": {
      "get": {
        "tags": ["PendingJobs"],
        "summary": "Get my organization PendingJobs",
        "description": "Get my organization PendingJobs",
        "operationId": "get_my_organization_pending_jobs_organizations_me_pending_jobs_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.pendingJobs.model.OutPendingJob__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/pending-jobs": {
      "get": {
        "tags": ["PendingJobs"],
        "summary": "Get organization PendingJobs",
        "description": "Get organization PendingJobs",
        "operationId": "get_organization_pending_jobs_organizations__organization_id__pending_jobs_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.pendingJobs.model.OutPendingJob__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/pending-jobs": {
      "get": {
        "tags": ["PendingJobs"],
        "summary": "Get Project PendingJobs",
        "description": "Get Project PendingJobs",
        "operationId": "get_project_pending_jobs_projects__project_id__pending_jobs_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.pendingJobs.model.OutPendingJob__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["PendingJobs"],
        "summary": "Create PendingJob",
        "description": "Create PendingJob",
        "operationId": "create_pending_job_projects__project_id__pending_jobs_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPendingJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPendingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pending-jobs/{pending_job_id}": {
      "get": {
        "tags": ["PendingJobs"],
        "summary": "Get PendingJob by id",
        "description": "Get PendingJob by id",
        "operationId": "get_pending_job_by_id_pending_jobs__pending_job_id__get",
        "parameters": [
          {
            "description": "PendingJob unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "PendingJob unique MongoDB Object-ID as string",
              "description": "PendingJob unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pending_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPendingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["PendingJobs"],
        "summary": "Update PendingJob",
        "description": "Update PendingJob",
        "operationId": "update_pending_job_pending_jobs__pending_job_id__put",
        "parameters": [
          {
            "description": "PendingJob unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "PendingJob unique MongoDB Object-ID as string",
              "description": "PendingJob unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pending_job_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePendingJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPendingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["PendingJobs"],
        "summary": "Delete PendingJob",
        "description": "Delete PendingJob",
        "operationId": "delete_pending_job_pending_jobs__pending_job_id__delete",
        "parameters": [
          {
            "description": "PendingJob unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "PendingJob unique MongoDB Object-ID as string",
              "description": "PendingJob unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pending_job_id",
            "in": "path"
          },
          {
            "description": "Delete data associated with the pending job. This includes any folder & files that might have been created by the job.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete All Data",
              "description": "Delete data associated with the pending job. This includes any folder & files that might have been created by the job.",
              "default": false
            },
            "name": "delete_all_data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pending-jobs/{pending_job_id}/execute": {
      "post": {
        "tags": ["PendingJobs"],
        "summary": "Execute PendingJob",
        "description": "Execute PendingJob",
        "operationId": "execute_pending_job_pending_jobs__pending_job_id__execute_post",
        "parameters": [
          {
            "description": "PendingJob unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "PendingJob unique MongoDB Object-ID as string",
              "description": "PendingJob unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pending_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPendingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/autostart-geofences/": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get all AutostartGeofences - Sodex only",
        "description": "Get all AutostartGeofences",
        "operationId": "get_all_autostart_geofences_autostart_geofences__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/autostart-geofences": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get my organization AutostartGeofences",
        "description": "Get my organization AutostartGeofences",
        "operationId": "get_my_organization_autostart_geofences_organizations_me_autostart_geofences_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/autostart-geofences": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get organization AutostartGeofences",
        "description": "Get organization AutostartGeofences",
        "operationId": "get_organization_autostart_geofences_organizations__organization_id__autostart_geofences_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/autostart-geofences": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get Project AutostartGeofences",
        "description": "Get Project AutostartGeofences",
        "operationId": "get_project_autostart_geofences_projects__project_id__autostart_geofences_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Autostartgeofence"],
        "summary": "Create Project AutostartGeofence",
        "description": "Create Project AutostartGeofence",
        "operationId": "create_project_autostart_geofence_projects__project_id__autostart_geofences_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputAutostartGeofence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAutostartGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/autostart-geofence": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get Project AutostartGeofence",
        "description": "Get Project AutostartGeofence",
        "operationId": "get_project_autostart_geofence_projects__project_id__autostart_geofence_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_Union_OutAutostartGeofence__NoneType__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/autostart-geofences": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get my system AutostartGeofences",
        "description": "Get my system AutostartGeofences",
        "operationId": "get_my_system_autostart_geofences_systems_me_autostart_geofences_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/autostart-geofences": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get System AutostartGeofences",
        "description": "Get System AutostartGeofences",
        "operationId": "get_system_autostart_geofences_systems__system_id__autostart_geofences_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/autostart-geofences/{autostart_geofence_id}": {
      "get": {
        "tags": ["Autostartgeofence"],
        "summary": "Get AutostartGeofence by id",
        "description": "Get AutostartGeofence by id",
        "operationId": "get_autostart_geofence_by_id_autostart_geofences__autostart_geofence_id__get",
        "parameters": [
          {
            "description": "AutostartGeofence unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AutostartGeofence unique MongoDB Object-ID as string",
              "description": "AutostartGeofence unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "autostart_geofence_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAutostartGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Autostartgeofence"],
        "summary": "Update AutostartGeofence",
        "description": "Update AutostartGeofence",
        "operationId": "update_autostart_geofence_autostart_geofences__autostart_geofence_id__put",
        "parameters": [
          {
            "description": "AutostartGeofence unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AutostartGeofence unique MongoDB Object-ID as string",
              "description": "AutostartGeofence unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "autostart_geofence_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAutostartGeofence"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAutostartGeofence_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Autostartgeofence"],
        "summary": "Delete AutostartGeofence",
        "description": "Delete AutostartGeofence",
        "operationId": "delete_autostart_geofence_autostart_geofences__autostart_geofence_id__delete",
        "parameters": [
          {
            "description": "AutostartGeofence unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AutostartGeofence unique MongoDB Object-ID as string",
              "description": "AutostartGeofence unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "autostart_geofence_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/autostart-geofences/{autostart_geofence_id}/update-check": {
      "post": {
        "tags": ["Autostartgeofence"],
        "summary": "Check Update AutostartGeofence",
        "description": "Check Update AutostartGeofence geofence coordinates",
        "operationId": "check_update_autostart_geofence_autostart_geofences__autostart_geofence_id__update_check_post",
        "parameters": [
          {
            "description": "AutostartGeofence unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AutostartGeofence unique MongoDB Object-ID as string",
              "description": "AutostartGeofence unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "autostart_geofence_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array",
                "title": "Geofence",
                "description": "Geofence points to which the geofence should be updated"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/autostart-geofences/{autostart_geofence_id}/system-add-check": {
      "post": {
        "tags": ["Autostartgeofence"],
        "summary": "Check AutostartGeofence system add",
        "description": "Check AutostartGeofence system add",
        "operationId": "check_autostart_geofence_system_add_autostart_geofences__autostart_geofence_id__system_add_check_post",
        "parameters": [
          {
            "description": "AutostartGeofence unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AutostartGeofence unique MongoDB Object-ID as string",
              "description": "AutostartGeofence unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "autostart_geofence_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_check_autostart_geofence_system_add_autostart_geofences__autostart_geofence_id__system_add_check_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/measurements/": {
      "get": {
        "tags": ["Layered Measurements"],
        "summary": "Get all Measurements - Sodex only",
        "description": "Get all Measurements",
        "operationId": "get_all_measurements_measurements__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurements.model.OutMeasurement__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/measurements": {
      "get": {
        "tags": ["Layered Measurements"],
        "summary": "Get my organization Measurements",
        "description": "Get my organization Measurements",
        "operationId": "get_my_organization_measurements_organizations_me_measurements_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurements.model.OutMeasurement__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/measurements": {
      "get": {
        "tags": ["Layered Measurements"],
        "summary": "Get organization Measurements",
        "description": "Get organization Measurements",
        "operationId": "get_organization_measurements_organizations__organization_id__measurements_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurements.model.OutMeasurement__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/measurements": {
      "get": {
        "tags": ["Layered Measurements"],
        "summary": "Get Project Measurements",
        "description": "Get Project Measurements",
        "operationId": "get_project_measurements_projects__project_id__measurements_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurements.model.OutMeasurement__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Layered Measurements"],
        "summary": "Create Project Measurement",
        "description": "Create Project Measurement",
        "operationId": "create_project_measurement_projects__project_id__measurements_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasurement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurement_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/measurement-layers/{measurement_layer_id}/measurements": {
      "get": {
        "tags": ["Layered Measurements"],
        "summary": "Get Measurement Layer Measurements",
        "description": "Get Measurement Layer Measurements",
        "operationId": "get_measurement_layer_measurements_measurement_layers__measurement_layer_id__measurements_get",
        "parameters": [
          {
            "description": "MeasurementLayer unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MeasurementLayer unique MongoDB Object-ID as string",
              "description": "MeasurementLayer unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_layer_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurements.model.OutMeasurement__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/measurements/{measurement_id}": {
      "get": {
        "tags": ["Layered Measurements"],
        "summary": "Get Measurement by id",
        "description": "Get Measurement by id",
        "operationId": "get_measurement_by_id_measurements__measurement_id__get",
        "parameters": [
          {
            "description": "Measurement unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Measurement unique MongoDB Object-ID as string",
              "description": "Measurement unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurement_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Layered Measurements"],
        "summary": "Update Measurement",
        "description": "Update Measurement",
        "operationId": "update_measurement_measurements__measurement_id__put",
        "parameters": [
          {
            "description": "Measurement unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Measurement unique MongoDB Object-ID as string",
              "description": "Measurement unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeasurement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurement_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Layered Measurements"],
        "summary": "Delete Measurement",
        "description": "Delete Measurement",
        "operationId": "delete_measurement_measurements__measurement_id__delete",
        "parameters": [
          {
            "description": "Measurement unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Measurement unique MongoDB Object-ID as string",
              "description": "Measurement unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/measurements/telekom-transfer": {
      "post": {
        "tags": ["Layered Measurements"],
        "summary": "Transfer Measurements to Telekom",
        "description": "Transfer Measurements to Telekom",
        "operationId": "transfer_measurements_to_telekom_snapshots__snapshot_id__measurements_telekom_transfer_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_ProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/measurement-layers/": {
      "get": {
        "tags": ["Measurementlayers"],
        "summary": "Get all MeasurementLayers - Sodex only",
        "description": "Get all MeasurementLayers",
        "operationId": "get_all_measurement_layers_measurement_layers__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/measurement-layers": {
      "get": {
        "tags": ["Measurementlayers"],
        "summary": "Get my organization MeasurementLayers",
        "description": "Get my organization MeasurementLayers",
        "operationId": "get_my_organization_measurement_layers_organizations_me_measurement_layers_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/measurement-layers": {
      "get": {
        "tags": ["Measurementlayers"],
        "summary": "Get organization MeasurementLayers",
        "description": "Get organization MeasurementLayers",
        "operationId": "get_organization_measurement_layers_organizations__organization_id__measurement_layers_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/measurement-layers": {
      "get": {
        "tags": ["Measurementlayers"],
        "summary": "Get Project MeasurementLayers",
        "description": "Get Project MeasurementLayers",
        "operationId": "get_project_measurement_layers_projects__project_id__measurement_layers_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Filter by tags so user only sees what they have access to",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "By Tags",
              "description": "Filter by tags so user only sees what they have access to",
              "default": true
            },
            "name": "by_tags",
            "in": "query"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Measurementlayers"],
        "summary": "Create Project MeasurementLayer",
        "description": "Create Project MeasurementLayer",
        "operationId": "create_project_measurement_layer_projects__project_id__measurement_layers_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasurementLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurementLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/measurement-layers/{measurement_layer_id}/measurement-layers": {
      "get": {
        "tags": ["Measurementlayers"],
        "summary": "Get Parent MeasurementLayers",
        "description": "Get Parent MeasurementLayers",
        "operationId": "get_parent_measurement_layers_measurement_layers__measurement_layer_id__measurement_layers_get",
        "parameters": [
          {
            "description": "MeasurementLayer unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MeasurementLayer unique MongoDB Object-ID as string",
              "description": "MeasurementLayer unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_layer_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/measurement-layers": {
      "get": {
        "tags": ["Measurementlayers"],
        "summary": "Get Snapshot MeasurementLayers",
        "description": "Get Snapshot MeasurementLayers",
        "operationId": "get_snapshot_measurement_layers_snapshots__snapshot_id__measurement_layers_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/measurement-layers/{measurement_layer_id}": {
      "get": {
        "tags": ["Measurementlayers"],
        "summary": "Get MeasurementLayer by id",
        "description": "Get MeasurementLayer by id",
        "operationId": "get_measurement_layer_by_id_measurement_layers__measurement_layer_id__get",
        "parameters": [
          {
            "description": "MeasurementLayer unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MeasurementLayer unique MongoDB Object-ID as string",
              "description": "MeasurementLayer unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurementLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Measurementlayers"],
        "summary": "Update MeasurementLayer",
        "description": "Update MeasurementLayer",
        "operationId": "update_measurement_layer_measurement_layers__measurement_layer_id__put",
        "parameters": [
          {
            "description": "MeasurementLayer unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MeasurementLayer unique MongoDB Object-ID as string",
              "description": "MeasurementLayer unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeasurementLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurementLayer_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Measurementlayers"],
        "summary": "Delete MeasurementLayer",
        "description": "Delete MeasurementLayer",
        "operationId": "delete_measurement_layer_measurement_layers__measurement_layer_id__delete",
        "parameters": [
          {
            "description": "MeasurementLayer unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MeasurementLayer unique MongoDB Object-ID as string",
              "description": "MeasurementLayer unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "measurement_layer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/2d-plans/": {
      "get": {
        "tags": ["2D Plans"],
        "summary": "Get all 2DPlans - Sodex only",
        "description": "Get all 2DPlans",
        "operationId": "get_all_2d_plans_2d_plans__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.plans2d.schemas.Out2DPlan__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/2d-plans": {
      "get": {
        "tags": ["2D Plans"],
        "summary": "Get my organization 2DPlans",
        "description": "Get my organization 2DPlans",
        "operationId": "get_my_organization_2d_plans_organizations_me_2d_plans_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.plans2d.schemas.Out2DPlan__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/2d-plans": {
      "get": {
        "tags": ["2D Plans"],
        "summary": "Get organization 2DPlans",
        "description": "Get organization 2DPlans",
        "operationId": "get_organization_plan_2ds_organizations__organization_id__2d_plans_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.plans2d.schemas.Out2DPlan__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/2d-plans": {
      "get": {
        "tags": ["2D Plans"],
        "summary": "Get Project 2DPlans",
        "description": "Get Project 2DPlans",
        "operationId": "get_project_2d_plans_projects__project_id__2d_plans_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.projects.plans2d.schemas.Out2DPlan__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["2D Plans"],
        "summary": "Create Project 2DPlan",
        "description": "Create Project 2DPlan",
        "operationId": "create_project_2d_plan_projects__project_id__2d_plans_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input2DPlan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_Out2DPlan_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/2d-plans/{plan_2d_id}": {
      "get": {
        "tags": ["2D Plans"],
        "summary": "Get 2DPlan by id",
        "description": "Get 2DPlan by id",
        "operationId": "get_2d_plan_by_id_2d_plans__plan_2d_id__get",
        "parameters": [
          {
            "description": "2DPlan unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "2DPlan unique MongoDB Object-ID as string",
              "description": "2DPlan unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "plan_2d_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_Out2DPlan_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["2D Plans"],
        "summary": "Update 2DPlan",
        "description": "Update 2DPlan",
        "operationId": "update_2d_plan_2d_plans__plan_2d_id__put",
        "parameters": [
          {
            "description": "2DPlan unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "2DPlan unique MongoDB Object-ID as string",
              "description": "2DPlan unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "plan_2d_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update2DPlan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_Out2DPlan_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["2D Plans"],
        "summary": "Delete 2DPlan",
        "description": "Delete 2DPlan",
        "operationId": "delete_2d_plan_2d_plans__plan_2d_id__delete",
        "parameters": [
          {
            "description": "2DPlan unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "2DPlan unique MongoDB Object-ID as string",
              "description": "2DPlan unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "plan_2d_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/2d-plans/{plan_2d_id}/geojson": {
      "get": {
        "tags": ["2D Plans"],
        "summary": "Get 2DPlan GeoJSON",
        "description": "Get 2DPlan GeoJSON",
        "operationId": "get_2d_plan_geojson_2d_plans__plan_2d_id__geojson_get",
        "parameters": [
          {
            "description": "2DPlan unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "2DPlan unique MongoDB Object-ID as string",
              "description": "2DPlan unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "plan_2d_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_dict_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/projects/{project_id}/project-notification-type-setting": {
      "put": {
        "tags": ["ProjectNotificationSettings"],
        "summary": "Update user project notification type setting",
        "description": "Update user project notification type setting",
        "operationId": "update_user_project_notification_type_setting_users_me_projects__project_id__project_notification_type_setting_put",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectUserNotificationTypeSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectUserNotificationTypeSettings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/projects/{project_id}/project-notification-type-settings": {
      "get": {
        "tags": ["ProjectNotificationSettings"],
        "summary": "Get user project notification type settings",
        "description": "Get user project notification type settings",
        "operationId": "get_user_project_notification_type_settings_users_me_projects__project_id__project_notification_type_settings_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProjectUserNotificationTypeSettings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/projects/{project_id}/uhf-configurations": {
      "get": {
        "tags": ["UHF Configurations"],
        "summary": "Get My System Project UhfConfigurations",
        "description": "Get My System Project UhfConfigurations",
        "operationId": "get_my_system_project_uhf_configurations_systems_me_projects__project_id__uhf_configurations_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Return system default configuration if no project configuration is found",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Return Default If None",
              "description": "Return system default configuration if no project configuration is found",
              "default": false
            },
            "name": "return_default_if_none",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/projects/{project_id}/uhf-configurations": {
      "get": {
        "tags": ["UHF Configurations"],
        "summary": "Get System Project UhfConfigurations",
        "description": "Get System Project UhfConfigurations",
        "operationId": "get_system_project_uhf_configurations_systems__system_id__projects__project_id__uhf_configurations_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Return system default configuration if no project configuration is found",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Return Default If None",
              "description": "Return system default configuration if no project configuration is found",
              "default": false
            },
            "name": "return_default_if_none",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/uhf-configurations": {
      "get": {
        "tags": ["UHF Configurations"],
        "summary": "Get My System UhfConfigurations",
        "description": "Get My System UhfConfigurations",
        "operationId": "get_my_system_uhf_configurations_systems_me_uhf_configurations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.uhfconfigurations.schemas.OutUhfConfiguration__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/uhf-configurations/default": {
      "get": {
        "tags": ["UHF Configurations"],
        "summary": "Get My System Default UhfConfiguration",
        "description": "Get My System Default UhfConfiguration",
        "operationId": "get_my_system_default_uhf_configuration_systems_me_uhf_configurations_default_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["UHF Configurations"],
        "summary": "Update My System Default UhfConfiguration",
        "description": "Update My System Default UhfConfiguration",
        "operationId": "update_my_uhf_configuration_systems_me_uhf_configurations_default_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUhfConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/uhf-configurations/default": {
      "get": {
        "tags": ["UHF Configurations"],
        "summary": "Get System Default UhfConfiguration",
        "description": "Get System Default UhfConfiguration",
        "operationId": "get_system_default_uhf_configuration_systems__system_id__uhf_configurations_default_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      },
      "put": {
        "tags": ["UHF Configurations"],
        "summary": "Update System Default UhfConfiguration",
        "description": "Update System Default UhfConfiguration",
        "operationId": "update_system_default_uhf_configuration_systems__system_id__uhf_configurations_default_put",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUhfConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": ["system_admin"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["UHF Configurations"],
        "summary": "Create System Default UhfConfiguration",
        "description": "Create System Default UhfConfiguration",
        "operationId": "create_system_default_uhf_configuration_systems__system_id__uhf_configurations_default_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUhfConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": ["system_admin"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/uhf-configurations": {
      "get": {
        "tags": ["UHF Configurations"],
        "summary": "Get System UhfConfigurations",
        "description": "Get System UhfConfigurations",
        "operationId": "get_system_uhf_configurations_systems__system_id__uhf_configurations_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.uhfconfigurations.schemas.OutUhfConfiguration__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      },
      "post": {
        "tags": ["UHF Configurations"],
        "summary": "Create UhfConfiguration",
        "description": "Create UhfConfiguration",
        "operationId": "create_uhf_configuration_systems__system_id__uhf_configurations_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUhfConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": ["system_admin"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/uhf-configurations/{uhf_configuration_id}": {
      "get": {
        "tags": ["UHF Configurations"],
        "summary": "Get UhfConfiguration by id",
        "description": "Get UhfConfiguration by id",
        "operationId": "get_uhf_configuration_by_id_uhf_configurations__uhf_configuration_id__get",
        "parameters": [
          {
            "description": "UhfConfiguration unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "UhfConfiguration unique MongoDB Object-ID as string",
              "description": "UhfConfiguration unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "uhf_configuration_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["UHF Configurations"],
        "summary": "Update UhfConfiguration",
        "description": "Update UhfConfiguration",
        "operationId": "update_uhf_configuration_uhf_configurations__uhf_configuration_id__put",
        "parameters": [
          {
            "description": "UhfConfiguration unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "UhfConfiguration unique MongoDB Object-ID as string",
              "description": "UhfConfiguration unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "uhf_configuration_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUhfConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUhfConfiguration_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": ["system_admin"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["UHF Configurations"],
        "summary": "Delete UhfConfiguration",
        "description": "Delete UhfConfiguration",
        "operationId": "delete_uhf_configuration_uhf_configurations__uhf_configuration_id__delete",
        "parameters": [
          {
            "description": "UhfConfiguration unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "UhfConfiguration unique MongoDB Object-ID as string",
              "description": "UhfConfiguration unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "uhf_configuration_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": ["system_admin"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tables/": {
      "get": {
        "tags": ["User Tables"],
        "summary": "Get all tables - Sodex only",
        "description": "Get all tables",
        "operationId": "get_all_tables_tables__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.usersettings.tables.schemas.OutTable__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/tables/me/{type}": {
      "get": {
        "tags": ["User Tables"],
        "summary": "Get user table by type",
        "description": "Get user table by type",
        "operationId": "get_user_table_by_type_tables_me__type__get",
        "parameters": [
          {
            "description": "Type of table the user has wants to get",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Type",
              "description": "Type of table the user has wants to get"
            },
            "name": "type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tables/{table_id}": {
      "get": {
        "tags": ["User Tables"],
        "summary": "Get table by id",
        "description": "Get table by id",
        "operationId": "get_table_by_id_tables__table_id__get",
        "parameters": [
          {
            "description": "Table unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Table unique MongoDB Object-ID as string",
              "description": "Table unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "table_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["User Tables"],
        "summary": "Update table",
        "description": "Update table",
        "operationId": "update_table_tables__table_id__put",
        "parameters": [
          {
            "description": "Table unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Table unique MongoDB Object-ID as string",
              "description": "Table unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "table_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["User Tables"],
        "summary": "Delete table",
        "description": "Delete table",
        "operationId": "delete_table_tables__table_id__delete",
        "parameters": [
          {
            "description": "Table unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Table unique MongoDB Object-ID as string",
              "description": "Table unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "table_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/tables/add-new-header/{type}": {
      "put": {
        "tags": ["User Tables"],
        "summary": "Add new header to tables by type",
        "description": "Add new header tables by type",
        "operationId": "add_new_header_tables_add_new_header__type__put",
        "parameters": [
          {
            "description": "Type of table the user has wants to get",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Type",
              "description": "Type of table the user has wants to get"
            },
            "name": "type",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Header"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/usersettings/": {
      "get": {
        "tags": ["User Settings"],
        "summary": "Get all usersettings - Sodex only",
        "description": "Get all usersettings",
        "operationId": "get_all_usersettings_usersettings__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sodexcloud.usersettings.usersettings.schemas.OutUserSetting__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/user-settings/{usersetting_id}": {
      "get": {
        "tags": ["User Settings"],
        "summary": "Get usersetting by id",
        "description": "Get usersetting by id",
        "operationId": "get_usersetting_by_id_user_settings__usersetting_id__get",
        "parameters": [
          {
            "description": "UserSetting unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "UserSetting unique MongoDB Object-ID as string",
              "description": "UserSetting unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "usersetting_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUserSetting_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/users/me/settings": {
      "get": {
        "tags": ["User Settings"],
        "summary": "Get my usersetting",
        "description": "Get my usersetting",
        "operationId": "get_my_usersetting_users_me_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUserSetting_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["User Settings"],
        "summary": "Update my usersetting",
        "description": "Update my usersetting",
        "operationId": "update_my_usersetting_users_me_settings_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUserSetting_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{user_id}/settings": {
      "get": {
        "tags": ["User Settings"],
        "summary": "Get user usersettings",
        "description": "Get user usersettings",
        "operationId": "get_user_usersettings_users__user_id__settings_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUserSetting_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/dji-docks/": {
      "get": {
        "tags": ["DjiDocks"],
        "summary": "Get all DjiDocks",
        "description": "Get all DjiDocks - Sodex only",
        "operationId": "get_all_dji_docks_dji_docks__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.djidocks.model.OutDjiDock__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/dji-docks": {
      "get": {
        "tags": ["DjiDocks"],
        "summary": "Get my organization DjiDocks",
        "description": "Get my organization DjiDocks",
        "operationId": "get_my_organization_dji_docks_organizations_me_dji_docks_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.djidocks.model.OutDjiDock__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/dji-docks": {
      "get": {
        "tags": ["DjiDocks"],
        "summary": "Get organization DjiDocks",
        "description": "Get organization DjiDocks",
        "operationId": "get_organization_dji_docks_organizations__organization_id__dji_docks_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.djidocks.model.OutDjiDock__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/dji-docks": {
      "get": {
        "tags": ["DjiDocks"],
        "summary": "Get project DjiDocks",
        "description": "Get project DjiDocks",
        "operationId": "get_project_dji_docks_projects__project_id__dji_docks_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.djidocks.model.OutDjiDock__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/dji-docks/{dji_dock_id}": {
      "get": {
        "tags": ["DjiDocks"],
        "summary": "Get DjiDock by id",
        "description": "Get DjiDock by id",
        "operationId": "get_dji_dock_by_id_dji_docks__dji_dock_id__get",
        "parameters": [
          {
            "description": "DjiDock unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "DjiDock unique MongoDB Object-ID as string",
              "description": "DjiDock unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dji_dock_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDjiDock_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["DjiDocks"],
        "summary": "Update DjiDock",
        "description": "Update DjiDock",
        "operationId": "update_dji_dock_dji_docks__dji_dock_id__put",
        "parameters": [
          {
            "description": "DjiDock unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "DjiDock unique MongoDB Object-ID as string",
              "description": "DjiDock unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dji_dock_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDjiDock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDjiDock_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["DjiDocks"],
        "summary": "Delete DjiDock",
        "description": "Delete DjiDock",
        "operationId": "delete_dji_dock_dji_docks__dji_dock_id__delete",
        "parameters": [
          {
            "description": "DjiDock unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "DjiDock unique MongoDB Object-ID as string",
              "description": "DjiDock unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dji_dock_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/dji-docks": {
      "post": {
        "tags": ["DjiDocks"],
        "summary": "Create DjiDock",
        "description": "Create DjiDock",
        "operationId": "create_dji_dock_dji_docks_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputDjiDock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDjiDock_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sharings/": {
      "get": {
        "tags": ["Sharing"],
        "summary": "Get all Sharings - Sodex only",
        "description": "Get all Sharings",
        "operationId": "get_all_sharings_sharings__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sharing.model.OutSharing__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/sharings": {
      "get": {
        "tags": ["Sharing"],
        "summary": "Get my organization Sharings",
        "description": "Get my organization Sharings",
        "operationId": "get_my_organization_sharings_organizations_me_sharings_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sharing.model.OutSharing__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/sharings": {
      "get": {
        "tags": ["Sharing"],
        "summary": "Get organization Sharings",
        "description": "Get organization Sharings",
        "operationId": "get_organization_sharings_organizations__organization_id__sharings_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sharing.model.OutSharing__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/sharings": {
      "get": {
        "tags": ["Sharing"],
        "summary": "Get Project Sharings",
        "description": "Get Project Sharings",
        "operationId": "get_project_sharings_projects__project_id__sharings_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.sharing.model.OutSharing__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sharings/{sharing_id}": {
      "get": {
        "tags": ["Sharing"],
        "summary": "Get Sharing by id",
        "description": "Get Sharing by id",
        "operationId": "get_sharing_by_id_sharings__sharing_id__get",
        "parameters": [
          {
            "description": "Sharing unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Sharing unique MongoDB Object-ID as string",
              "description": "Sharing unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "sharing_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSharing_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Sharing"],
        "summary": "Update Sharing",
        "description": "Update Sharing",
        "operationId": "update_sharing_sharings__sharing_id__put",
        "parameters": [
          {
            "description": "Sharing unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Sharing unique MongoDB Object-ID as string",
              "description": "Sharing unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "sharing_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSharing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSharing_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Sharing"],
        "summary": "Delete Sharing",
        "description": "Delete Sharing",
        "operationId": "delete_sharing_sharings__sharing_id__delete",
        "parameters": [
          {
            "description": "Sharing unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Sharing unique MongoDB Object-ID as string",
              "description": "Sharing unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "sharing_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/sharings/{sharing_id}/token": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Get Sharing token",
        "description": "Get Sharing token to access resources needed to display data of the sharing",
        "operationId": "get_sharing_token_sharings__sharing_id__token_post",
        "parameters": [
          {
            "description": "Sharing unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Sharing unique MongoDB Object-ID as string",
              "description": "Sharing unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "sharing_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_sharing_token_sharings__sharing_id__token_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_TokenInfo_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/dashboards/{dashboard_id}/sharing": {
      "post": {
        "tags": ["Sharing"],
        "summary": "Create Dashboard Sharing",
        "description": "Create Dashboard Sharing",
        "operationId": "create_dashboard_sharing_dashboards__dashboard_id__sharing_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "dashboard_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSharing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSharing_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/processing/finished": {
      "post": {
        "tags": ["Processing"],
        "summary": "Processing Finished",
        "operationId": "processing_finished_processing_finished_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessingJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/processing-jobs/{processing_job_id}/finished": {
      "post": {
        "tags": ["Processing"],
        "summary": "Processing Job Finished",
        "operationId": "processing_job_finished_processing_jobs__processing_job_id__finished_post",
        "parameters": [
          {
            "description": "Processing Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Processing Job Id",
              "description": "Processing Job ID"
            },
            "name": "processing_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/processing/job": {
      "post": {
        "tags": ["Processing"],
        "summary": "Create processing job",
        "description": "Create processing job. Sodex Only",
        "operationId": "create_processing_job_processing_job_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessingJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/users/me/processing-jobs": {
      "get": {
        "tags": ["Processing"],
        "summary": "Get My Processing Jobs",
        "operationId": "get_my_processing_jobs_users_me_processing_jobs_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Processing status",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProcessingJobStatus"
                }
              ],
              "description": "Processing status",
              "default": "processing"
            },
            "name": "processing_status",
            "in": "query"
          },
          {
            "description": "Sort descending after created_at",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Sort Desc",
              "description": "Sort descending after created_at",
              "default": true
            },
            "name": "sort_desc",
            "in": "query"
          },
          {
            "description": "Job type to filter on",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/JobType"
                }
              ],
              "description": "Job type to filter on"
            },
            "name": "job_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.processing.schemas.OutProcessingJob__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "vidoc", "inactive"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/processing/job/{processing_job_id}": {
      "get": {
        "tags": ["Processing"],
        "summary": "Get Processing Job",
        "operationId": "get_processing_job_processing_job__processing_job_id__get",
        "parameters": [
          {
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Processing Job Id",
              "description": "Job ID"
            },
            "name": "processing_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "vidoc", "inactive"]
          }
        ]
      },
      "delete": {
        "tags": ["Processing"],
        "summary": "Delete Processing Job",
        "operationId": "delete_processing_job_processing_job__processing_job_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "processing_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/processing-jobs": {
      "get": {
        "tags": ["Processing"],
        "summary": "Get Project Processing Jobs",
        "operationId": "get_project_processing_jobs_projects__project_id__processing_jobs_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Job type",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/JobType"
                }
              ],
              "description": "Job type"
            },
            "name": "job_type",
            "in": "query"
          },
          {
            "description": "Processing status",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProcessingJobStatus"
                }
              ],
              "description": "Processing status",
              "default": "processing"
            },
            "name": "processing_status",
            "in": "query"
          },
          {
            "description": "Sort descending after created_at",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Sort Desc",
              "description": "Sort descending after created_at",
              "default": true
            },
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.processing.schemas.OutProcessingJob__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/processing-jobs/extended": {
      "get": {
        "tags": ["Processing"],
        "summary": "Get Project Processing Jobs Extended",
        "operationId": "get_project_processing_jobs_extended_projects__project_id__processing_jobs_extended_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Job type",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/JobType"
              },
              "type": "array",
              "description": "Job type"
            },
            "name": "jobs",
            "in": "query"
          },
          {
            "description": "Processing status",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ProcessingJobStatus"
              },
              "type": "array",
              "description": "Processing status"
            },
            "name": "processing_status",
            "in": "query"
          },
          {
            "description": "Sort descending after created_at",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Sort Desc",
              "description": "Sort descending after created_at",
              "default": true
            },
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.processing.schemas.OutProcessingJob__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/processing/job/{processing_job_id}/process": {
      "post": {
        "tags": ["Processing"],
        "summary": "Process Processing Job",
        "operationId": "process_processing_job_processing_job__processing_job_id__process_post",
        "parameters": [
          {
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Processing Job Id",
              "description": "Job ID"
            },
            "name": "processing_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/processing/job/{processing_job_id}/pg-job-viscan-restart": {
      "post": {
        "tags": ["Processing"],
        "summary": "Process Processing Job Viscan Restart",
        "operationId": "process_processing_job_viscan_restart_processing_job__processing_job_id__pg_job_viscan_restart_post",
        "parameters": [
          {
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Processing Job Id",
              "description": "Job ID"
            },
            "name": "processing_job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/layers/{layer_id}/export/3d": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Layer 3D",
        "operationId": "export_layer_3d_layers__layer_id__export_3d_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportLayer3D"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/3d/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export 3d layer to explorer",
        "description": "Export 3d layer to explorer",
        "operationId": "export_layer_3d_explorer_layers__layer_id__3d_folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportLayer3DExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/export/photo": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Layer Photo",
        "operationId": "export_layer_photo_layers__layer_id__export_photo_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportPhotoLayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/photo/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export photo layer to explorer",
        "description": "Export photo layer to explorer",
        "operationId": "export_layer_photo_explorer_layers__layer_id__photo_folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportLayerPhotoExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/export/high-res": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export high res layer",
        "description": "Export high res layer",
        "operationId": "export_layer_high_res_layers__layer_id__export_high_res_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportLayerHighRes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/high-res/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export high res layer to explorer",
        "description": "Export high res layer to explorer",
        "operationId": "export_layer_high_res_explorer_layers__layer_id__high_res_folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportLayerHighResExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/export/high-res-v2": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export high res v2 layer",
        "description": "Export high res v2 layer",
        "operationId": "export_layer_high_res_v2_layers__layer_id__export_high_res_v2_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportHighResV2Layer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/merged-layers/{merged_layer_id}/export/3d": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Merged Layer 3D",
        "operationId": "export_merged_layer_3d_merged_layers__merged_layer_id__export_3d_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportMergedLayer3D"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/merged-layers/{merged_layer_id}/3d/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export 3d merged layer to explorer",
        "description": "Export 3d merged layer to explorer",
        "operationId": "export_merged_layer_3d_explorer_merged_layers__merged_layer_id__3d_folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportMergedLayer3DExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/merged-layers/{merged_layer_id}/export/photo": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Merged Layer Photo",
        "operationId": "export_merged_layer_photo_merged_layers__merged_layer_id__export_photo_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportMergedLayerPhoto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/merged-layers/{merged_layer_id}/photo/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export photo merged layer to explorer",
        "description": "Export photo merged layer to explorer",
        "operationId": "export_merged_layer_photo_explorer_merged_layers__merged_layer_id__photo_folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportMergedLayerPhotoExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/merged-layers/{merged_layer_id}/export/high-res": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Merged Layer High Res",
        "operationId": "export_merged_layer_high_res_merged_layers__merged_layer_id__export_high_res_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportMergedLayerHighRes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/merged-layers/{merged_layer_id}/high-res/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export high res merged layer to explorer",
        "description": "Export high res merged layer to explorer",
        "operationId": "export_merged_layer_high_res_explorer_merged_layers__merged_layer_id__high_res_folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "merged_layer_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportMergedLayerHighResExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/download": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Download Snapshot",
        "operationId": "download_snapshot_snapshots__snapshot_id__download_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputDownloadSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export snapshot to explorer",
        "description": "Export snapshot to explorer",
        "operationId": "export_snapshot_explorer_snapshots__snapshot_id__folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportSnapshotExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/cable-segments/export": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export cable segments to url",
        "operationId": "export_cable_projects__project_id__cable_segments_export_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportCable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cables/{cable_id}/folders/{folder_id}/explorer": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export cable to explorer",
        "operationId": "export_cable_explorer_cables__cable_id__folders__folder_id__explorer_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cable_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "folder_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportCableExplorer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/export/xml": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Project Xml",
        "operationId": "export_project_xml_projects__project_id__export_xml_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportProjectXML"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/potrees/{potree_id}/download/{pointcloud_id}": {
      "get": {
        "tags": ["on_demand"],
        "summary": "Download potree pointcloud",
        "description": "Download potree pointcloud",
        "operationId": "download_potree_potrees__potree_id__download__pointcloud_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Pointcloud Id"
            },
            "name": "pointcloud_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PotreeExportFileExtensions"
            },
            "name": "filetype",
            "in": "query"
          },
          {
            "description": "Measurement unit of the snapshot of the export",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MeasurementUnit"
                }
              ],
              "description": "Measurement unit of the snapshot of the export",
              "default": "m"
            },
            "name": "measurement_unit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/potrees/{potree_id}/export/{pointcloud_id}/cross-section": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export potree cross section",
        "description": "Export potree cross section",
        "operationId": "export_potree_cross_section_potrees__potree_id__export__pointcloud_id__cross_section_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Pointcloud Id"
            },
            "name": "pointcloud_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPotreeSideProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cross-sections/{cross_section_project_id}/points/export": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Cross Section Points Export",
        "operationId": "cross_section_points_export_cross_sections__cross_section_project_id__points_export_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cross_section_project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCrossSectionPointsExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/lines/{line_id}/export": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Line Export",
        "operationId": "line_export_lines__line_id__export_post",
        "parameters": [
          {
            "description": "Line unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Line unique MongoDB Object-ID as string",
              "description": "Line unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "line_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputLineExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-points/export": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Stored Points",
        "operationId": "export_stored_points_stored_points_export_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportStoredPoints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/stored-lines/export": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Stored Lines",
        "operationId": "export_stored_lines_stored_lines_export_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportStoredLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/potrees/{potree_id}/export-measurements": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Potree Measurements",
        "operationId": "export_potree_measurements_potrees__potree_id__export_measurements_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExportPotreeMeasurements"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/export-pile-base": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Pile Base",
        "operationId": "export_pile_base_snapshots__snapshot_id__export_pile_base_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InputExportPileBase"
                  }
                ],
                "title": "Data",
                "description": "Export pile base"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/measurements/export": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Export Measurements",
        "operationId": "export_measurements_projects__project_id__measurements_export_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetaProcessMeasurementsExport"
                  }
                ],
                "title": "Data",
                "description": "Export measurements"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/measure/point": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Point",
        "operationId": "measure_point_snapshots__snapshot_id__measure_point_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasurePoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/measure/points": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Points",
        "operationId": "measure_points_snapshots__snapshot_id__measure_points_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasurePoints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/measure/area": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Area",
        "operationId": "measure_area_snapshots__snapshot_id__measure_area_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasureArea"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/measure/area": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Layer Area",
        "operationId": "measure_layer_area_layers__layer_id__measure_area_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasureLayerArea"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/measure/point": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Layer Point",
        "operationId": "measure_layer_point_layers__layer_id__measure_point_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasurePoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/measure/points": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Layer Points",
        "operationId": "measure_layer_points_layers__layer_id__measure_points_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasureLayerPoints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/measure/volume": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Pile Volume",
        "operationId": "measure_pile_volume_snapshots__snapshot_id__measure_volume_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasurePile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/measure/volume": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Measure Pile In Layer",
        "operationId": "measure_pile_in_layer_layers__layer_id__measure_volume_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMeasureLayerPile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/cross-sections/{cross_section_project_id}/points": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Cross Section Points",
        "operationId": "cross_section_points_cross_sections__cross_section_project_id__points_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cross_section_project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCrossSection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/history/point": {
      "post": {
        "tags": ["on_demand"],
        "summary": "History Point",
        "operationId": "history_point_snapshots__snapshot_id__history_point_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputHistoryPoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/coords-global-to-local": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Convert Global To Local Coordinates",
        "operationId": "convert_global_to_local_coordinates_projects__project_id__coords_global_to_local_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaConvertCoordsGlobalLocal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/coords-local-to-global": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Convert Local To Global Coordinates",
        "operationId": "convert_local_to_global_coordinates_projects__project_id__coords_local_to_global_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetaConvertCoordsLocalGlobal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/dxf/coordinates": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Get Coordinates From Dxf File",
        "operationId": "get_coordinates_from_dxf_file_projects__project_id__dxf_coordinates_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_coordinates_from_dxf_file_projects__project_id__dxf_coordinates_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/geofence-detection-bounding-box": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Geofence Detection Bounding Box",
        "operationId": "geofence_detection_bounding_box_snapshots__snapshot_id__geofence_detection_bounding_box_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputGeofenceDetectionBox"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/line-detection-bounding-box": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Line Detection Bounding Box",
        "operationId": "line_detection_bounding_box_snapshots__snapshot_id__line_detection_bounding_box_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputLineDetectionBox"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/timelapse": {
      "post": {
        "tags": ["on_demand"],
        "summary": "Timelapse",
        "operationId": "timelapse_projects__project_id__timelapse_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputTimelapseConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/point-measurement/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Point Measurement",
        "operationId": "track_point_measurement_tracking_projects_visualization_measurements_point_measurement__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/distance-measurement/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Distance Measurement",
        "operationId": "track_distance_measurement_tracking_projects_visualization_measurements_distance_measurement__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/height-measurement/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Height Measurement",
        "operationId": "track_height_measurement_tracking_projects_visualization_measurements_height_measurement__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/area-measurement/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Area Measurement",
        "operationId": "track_area_measurement_tracking_projects_visualization_measurements_area_measurement__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/height-profile-measurement/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Height Profile Measurement",
        "operationId": "track_height_profile_measurement_tracking_projects_visualization_measurements_height_profile_measurement__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/volume-measurement/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Volume Measurement",
        "operationId": "track_volume_measurement_tracking_projects_visualization_measurements_volume_measurement__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/advanced-volume-measurement/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Advanced Volume Measurement",
        "operationId": "track_advanced_volume_measurement_tracking_projects_visualization_measurements_advanced_volume_measurement__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/fitting-point/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Fitting Point Added",
        "operationId": "track_fitting_point_added_tracking_projects_visualization_measurements_fitting_point__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/visualization/measurements/csv-point-export/{potree_id}": {
      "get": {
        "tags": ["visualization-tracking"],
        "summary": "Track Csv Point Export",
        "operationId": "track_csv_point_export_tracking_projects_visualization_measurements_csv_point_export__potree_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "potree_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/infomap/measurement-tools/rover-tool/{project_id}": {
      "get": {
        "tags": ["infomap-tracking"],
        "summary": "Track Rover Tool",
        "operationId": "track_rover_tool_tracking_projects_infomap_measurement_tools_rover_tool__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/infomap/measurement-tools/volume-tool/{project_id}": {
      "get": {
        "tags": ["infomap-tracking"],
        "summary": "Track Volume Tool",
        "operationId": "track_volume_tool_tracking_projects_infomap_measurement_tools_volume_tool__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/infomap/measurement-tools/distance-tool/{project_id}": {
      "get": {
        "tags": ["infomap-tracking"],
        "summary": "Track Distance Tool",
        "operationId": "track_distance_tool_tracking_projects_infomap_measurement_tools_distance_tool__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/infomap/measurement-tools/height-difference-tool/{project_id}": {
      "get": {
        "tags": ["infomap-tracking"],
        "summary": "Track Height Difference Tool",
        "operationId": "track_height_difference_tool_tracking_projects_infomap_measurement_tools_height_difference_tool__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/projects/infomap/measurement-tools/area-tool/{project_id}": {
      "get": {
        "tags": ["infomap-tracking"],
        "summary": "Track Area Tool",
        "operationId": "track_area_tool_tracking_projects_infomap_measurement_tools_area_tool__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/user-settings": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Settings Screen",
        "operationId": "entered_settings_screen_tracking_screens_user_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/notifications": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Notifications Screen",
        "operationId": "entered_notifications_screen_tracking_screens_notifications_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/systems": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Systems Screen",
        "operationId": "entered_systems_screen_tracking_screens_systems_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/organizations": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Organization Screen",
        "operationId": "entered_organization_screen_tracking_screens_organizations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/organization/settings": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Organization Settings Screen",
        "operationId": "entered_organization_settings_screen_tracking_screens_organization_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/organization/system-management": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered System Management Screen",
        "operationId": "entered_system_management_screen_tracking_screens_organization_system_management_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/organization/user-management": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered User Management Screen",
        "operationId": "entered_user_management_screen_tracking_screens_organization_user_management_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/organization/user-licenses": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered User Licenses Screen",
        "operationId": "entered_user_licenses_screen_tracking_screens_organization_user_licenses_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/informations/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Project Informations Screen",
        "operationId": "entered_project_informations_screen_tracking_screens_project_informations__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/data-export/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Data Export Screen",
        "operationId": "entered_data_export_screen_tracking_screens_project_data_export__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/infomap/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Infomap Screen",
        "operationId": "entered_infomap_screen_tracking_screens_project_infomap__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/dashboard/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Dashboard Screen",
        "operationId": "entered_dashboard_screen_tracking_screens_project_dashboard__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/phase/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Phase Screen",
        "operationId": "entered_phase_screen_tracking_screens_project_phase__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/gallery/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Gallery Screen",
        "operationId": "entered_gallery_screen_tracking_screens_project_gallery__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/tags/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Tags Screen",
        "operationId": "entered_tags_screen_tracking_screens_project_tags__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/explorer/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Explorer Screen",
        "operationId": "entered_explorer_screen_tracking_screens_project_explorer__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/project/visualization/{project_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Visualization Screen",
        "operationId": "entered_visualization_screen_tracking_screens_project_visualization__project_id__get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/system/livestream/{system_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Livestream Screen",
        "operationId": "entered_livestream_screen_tracking_screens_system_livestream__system_id__get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/system/machine-profiles/{system_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Profiles Screen",
        "operationId": "entered_profiles_screen_tracking_screens_system_machine_profiles__system_id__get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/system/settings/{system_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered System Settings Screen",
        "operationId": "entered_system_settings_screen_tracking_screens_system_settings__system_id__get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/tracking/screens/system/quicktasks/{system_id}": {
      "get": {
        "tags": ["screen-tracking"],
        "summary": "Entered Quicktasks Screen",
        "operationId": "entered_quicktasks_screen_tracking_screens_system_quicktasks__system_id__get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layer-data/": {
      "get": {
        "tags": ["Layer Data"],
        "summary": "Get all layer_datas - Sodex only",
        "description": "Get all layer_datas",
        "operationId": "get_all_layer_datas_layer_data__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.layerdata.schemas.OutLayerData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/layer-data/{layer_data_id}": {
      "get": {
        "tags": ["Layer Data"],
        "summary": "Get layer_data by id",
        "description": "Get layer_data by id",
        "operationId": "get_layer_data_by_id_layer_data__layer_data_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_data_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayerData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Layer Data"],
        "summary": "Update layer_data",
        "description": "Update layer_data",
        "operationId": "update_layer_data_layer_data__layer_data_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_data_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLayerData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayerData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Layer Data"],
        "summary": "Delete layer_data",
        "description": "Delete layer_data",
        "operationId": "delete_layer_data_layer_data__layer_data_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_data_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/data": {
      "get": {
        "tags": ["Layer Data"],
        "summary": "Get all layer_datas for a layer",
        "description": "Get all layer_datas for a layer",
        "operationId": "get_all_layer_datas_for_layer_layers__layer_id__data_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.layerdata.schemas.OutLayerData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Layer Data"],
        "summary": "Create new layer_data for a layer",
        "description": "Create new layer_data for a layer",
        "operationId": "create_layer_data_for_layer_layers__layer_id__data_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_layer_data_for_layer_layers__layer_id__data_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayerData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/data/upload-url": {
      "get": {
        "tags": ["Layer Data"],
        "summary": "Get layer data upload url",
        "description": "Get layer data upload url",
        "operationId": "get_layer_data_upload_url_layers__layer_id__data_upload_url_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          },
          {
            "description": "Filename of the layer data",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename",
              "description": "Filename of the layer data"
            },
            "name": "filename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/data/uploaded": {
      "post": {
        "tags": ["Layer Data"],
        "summary": "Create uploaded layer data",
        "description": "Create uploaded layer data",
        "operationId": "create_uploaded_layer_data_layers__layer_id__data_uploaded_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InputLayerData"
                  }
                ],
                "title": "Layer Data",
                "description": "Layer data to upload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLayerData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layer-data/{layer_data_id}/download-url": {
      "get": {
        "tags": ["Layer Data"],
        "summary": "Get layer data download url",
        "description": "Get layer data download url",
        "operationId": "get_layer_data_download_url_layer_data__layer_data_id__download_url_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_data_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/csmetas/": {
      "get": {
        "tags": ["CS Meta"],
        "summary": "Get all csmetas - Sodex only",
        "description": "Get all csmetas",
        "operationId": "get_all_csmetas_csmetas__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.csmeta.schemas.OutCsMeta__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/csmetas/{csmeta_id}": {
      "get": {
        "tags": ["CS Meta"],
        "summary": "Get csmeta by id",
        "description": "Get csmeta by id",
        "operationId": "get_csmeta_by_id_csmetas__csmeta_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "csmeta_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["CS Meta"],
        "summary": "Update csmeta",
        "description": "Update csmeta",
        "operationId": "update_csmeta_csmetas__csmeta_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "csmeta_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCsMeta"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CS Meta"],
        "summary": "Delete csmeta",
        "description": "Delete csmeta",
        "operationId": "delete_csmeta_csmetas__csmeta_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "csmeta_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/systems/me/csmetas": {
      "get": {
        "tags": ["CS Meta"],
        "summary": "Get csmeta by project and my system",
        "description": "Get csmeta by id",
        "operationId": "get_project_my_system_csmeta_projects__project_id__systems_me_csmetas_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/systems/{system_id}/csmetas": {
      "get": {
        "tags": ["CS Meta"],
        "summary": "Get csmeta by project and system",
        "description": "Get csmeta by id",
        "operationId": "get_csmeta_by_project_and_system_projects__project_id__systems__system_id__csmetas_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["CS Meta"],
        "summary": "Create new csmeta",
        "description": "Create new csmeta",
        "operationId": "create_csmeta_projects__project_id__systems__system_id__csmetas_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCsMeta"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/projects/{project_id}/csmetas": {
      "put": {
        "tags": ["CS Meta"],
        "summary": "Update system csmeta for project",
        "description": "Update system csmeta for project",
        "operationId": "update_csmeta_by_project_and_system_systems_me_projects__project_id__csmetas_put",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCsMeta"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/system-status/": {
      "get": {
        "tags": ["System Status"],
        "summary": "Get all systemstatus - Sodex only",
        "description": "Get all systemstatus",
        "operationId": "get_all_system_status_system_status__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.systemstatus.schemas.OutSystemStatus__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/status": {
      "get": {
        "tags": ["System Status"],
        "summary": "Get systemstatus by system id",
        "description": "Get systemstatus by system id",
        "operationId": "get_system_status_by_system_id_systems__system_id__status_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemStatus_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/systems/me/status": {
      "put": {
        "tags": ["System Status"],
        "summary": "Update my systemstatus",
        "description": "Update systemstatus",
        "operationId": "update_my_system_status_systems_me_status_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemStatus_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/system-status": {
      "get": {
        "tags": ["System Status"],
        "summary": "Get systemstatus of organization systems",
        "description": "Get systemstatus of organization systems",
        "operationId": "get_organization_system_status_organizations_me_system_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.systemstatus.schemas.OutSystemStatus__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/snapshots/{snapshot_id}/status": {
      "get": {
        "tags": ["System Status"],
        "summary": "Gets systemstatus by systemid and the system status that was active the most recent before the snapshot was created with project_id.",
        "description": "Get systemstatus by system id and snapshot id",
        "operationId": "get_system_status_by_snapshot_id_systems__system_id__snapshots__snapshot_id__status_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemStatus_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/system-status/{system_status_id}": {
      "delete": {
        "tags": ["System Status"],
        "summary": "Delete systemstatus",
        "description": "Delete systemstatus",
        "operationId": "delete_system_status_system_status__system_status_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_status_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/translations/": {
      "get": {
        "tags": ["Translations"],
        "summary": "Get all translations - Sodex only",
        "description": "Get all translations",
        "operationId": "get_all_translations_translations__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.translations.schemas.OutTranslation__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/translations/{translation_id}": {
      "get": {
        "tags": ["Translations"],
        "summary": "Get translation by id",
        "description": "Get translation by id",
        "operationId": "get_translation_by_id_translations__translation_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "translation_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTranslation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Translations"],
        "summary": "Update translation",
        "description": "Update translation",
        "operationId": "update_translation_translations__translation_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "translation_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTranslation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Translations"],
        "summary": "Delete translation",
        "description": "Delete translation",
        "operationId": "delete_translation_translations__translation_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "translation_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/translations": {
      "get": {
        "tags": ["Translations"],
        "summary": "Get translation by project id",
        "description": "Get translation by project id",
        "operationId": "get_translation_by_project_id_projects__project_id__translations_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTranslation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Translations"],
        "summary": "Create new translation",
        "description": "Create new translation",
        "operationId": "create_translation_projects__project_id__translations_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__v2__processdata__translations__schemas__InputTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTranslation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/translations/{translation_id}/extend": {
      "post": {
        "tags": ["Translations"],
        "summary": "Extend translation",
        "description": "Extend translation",
        "operationId": "extend_translation_translations__translation_id__extend_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "translation_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddTranslations"
                  }
                ],
                "title": "Data",
                "description": "Translations to add"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutTranslation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/images/": {
      "get": {
        "tags": ["Images (Systems only)"],
        "summary": "Get all images - Sodex only",
        "description": "Get all images",
        "operationId": "get_all_images_images__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.images.schemas.OutImage__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/images/{image_id}": {
      "get": {
        "tags": ["Images (Systems only)"],
        "summary": "Get image by id",
        "description": "Get image by id",
        "operationId": "get_image_by_id_images__image_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "image_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutImage_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Images (Systems only)"],
        "summary": "Delete image",
        "description": "Delete image",
        "operationId": "delete_image_images__image_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "image_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/images": {
      "post": {
        "tags": ["Images (Systems only)"],
        "summary": "Create new image",
        "description": "Create new image",
        "operationId": "create_image_in_project_projects__project_id__images_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_image_in_project_projects__project_id__images_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutImage_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/layers/{layer_id}/images": {
      "post": {
        "tags": ["Images (Systems only)"],
        "summary": "Create layer image",
        "description": "Create new layer image",
        "operationId": "create_image_in_layer_layers__layer_id__images_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_image_in_layer_layers__layer_id__images_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutImage_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get all snapshots - Sodex only",
        "description": "Get all snapshots",
        "operationId": "get_all_snapshots_snapshots__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshot__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshot by id",
        "description": "Get snapshot by id",
        "operationId": "get_snapshot_by_id_snapshots__snapshot_id__get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshot_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Snapshots"],
        "summary": "Update snapshot by id",
        "description": "Update snapshot by id",
        "operationId": "update_snapshot_by_id_snapshots__snapshot_id__put",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InUpdateSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Snapshots"],
        "summary": "Delete snapshot",
        "description": "Delete snapshot",
        "operationId": "delete_snapshot_snapshots__snapshot_id__delete",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/dates": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get unique snapshots dates by project id",
        "description": "Get unique days on which the project has a snapshot",
        "operationId": "get_snapshots_dates_projects__project_id__snapshots_dates_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Timezone offset in hours",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Timezone Offset",
              "description": "Timezone offset in hours",
              "default": 0
            },
            "name": "timezone_offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_datetime.datetime__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/favorites": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get favorized snapshots",
        "description": "Get snapshots data of all favorized snapshots in a project",
        "operationId": "get_favorized_snapshots_projects__project_id__snapshots_favorites_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshotData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/data/phase/{phase_id}": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshots data by project id and phase id",
        "description": "Get snapshots data by project id and phase id",
        "operationId": "get_snapshots_data_by_project_id_and_phase_id_projects__project_id__snapshots_data_phase__phase_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "phase_id",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Get data for manipulated snapshots",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Manipulated",
              "description": "Get data for manipulated snapshots",
              "default": false
            },
            "name": "manipulated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshotData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/data/latest": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get latest snapshot data by project id",
        "description": "Get latest snapshot data by project id",
        "operationId": "get_latest_snapshot_data_projects__project_id__snapshots_data_latest_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Get data for manipulated snapshots",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Manipulated",
              "description": "Get data for manipulated snapshots",
              "default": false
            },
            "name": "manipulated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/data": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshots data by project id",
        "description": "Get snapshots data by project id",
        "operationId": "get_snapshots_data_projects__project_id__snapshots_data_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Start date to filter snapshots",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start At",
              "description": "Start date to filter snapshots"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "End date to filter snapshots",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End At",
              "description": "End date to filter snapshots"
            },
            "name": "end_at",
            "in": "query"
          },
          {
            "description": "Get data for manipulated snapshots",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Manipulated",
              "description": "Get data for manipulated snapshots",
              "default": false
            },
            "name": "manipulated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshotData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/data/{date}": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshots data by project id and date",
        "description": "Get snapshots data by project id and date",
        "operationId": "get_snapshots_data_by_project_id_and_date_projects__project_id__snapshots_data__date__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "string",
                  "format": "date"
                }
              ],
              "title": "Date"
            },
            "name": "date",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Get data for manipulated snapshots",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Manipulated",
              "description": "Get data for manipulated snapshots",
              "default": false
            },
            "name": "manipulated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshotData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshots by project id",
        "description": "Get snapshots by project id",
        "operationId": "get_snapshots_by_project_id_projects__project_id__snapshots_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshot__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Snapshots"],
        "summary": "Create new snapshot for this project",
        "description": "Create new snapshot for this project",
        "operationId": "create_snapshot_projects__project_id__snapshots_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshot_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/preview": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshot preview",
        "description": "Get snapshot preview",
        "operationId": "get_snapshot_preview_snapshots__snapshot_id__preview_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPotreePreview_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/multipart-upload": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get Snapshot Multipart Upload",
        "operationId": "get_snapshot_multipart_upload_snapshots__snapshot_id__multipart_upload_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Filename of the file to upload",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename",
              "description": "Filename of the file to upload"
            },
            "name": "filename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMultipartSnapshotUpload_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/multipart-upload/part-url": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get Snapshot Upload Part Url",
        "operationId": "get_snapshot_upload_part_url_snapshots__snapshot_id__multipart_upload_part_url_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Upload id of the file",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id",
              "description": "Upload id of the file"
            },
            "name": "upload_id",
            "in": "query"
          },
          {
            "description": "Part number of the file",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Part Number",
              "description": "Part number of the file"
            },
            "name": "part_number",
            "in": "query"
          },
          {
            "description": "S3 key of the file",
            "required": true,
            "schema": {
              "type": "string",
              "title": "S3 Key",
              "description": "S3 key of the file"
            },
            "name": "s3_key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/multipart-upload-finished": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Finish Snapshot Multipart Upload",
        "operationId": "finish_snapshot_multipart_upload_snapshots__snapshot_id__multipart_upload_finished_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InSnapshotClusterUploadFinished"
                  }
                ],
                "title": "In Finished Upload",
                "description": "Data to finish the upload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/process": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Process snapshot",
        "description": "Process snapshot",
        "operationId": "process_system_snapshot_snapshots__snapshot_id__process_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/images": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshot images",
        "description": "Get snapshot images",
        "operationId": "get_snapshot_images_snapshots__snapshot_id__images_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutImages__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/images/{s3_key}": {
      "delete": {
        "tags": ["Snapshots"],
        "summary": "Delete snapshot images",
        "description": "Delete snapshot images",
        "operationId": "delete_snapshot_images_snapshots__snapshot_id__images__s3_key__delete",
        "parameters": [
          {
            "description": "S3 key of the image to delete",
            "required": true,
            "schema": {
              "type": "string",
              "title": "S3 Key",
              "description": "S3 key of the image to delete"
            },
            "name": "s3_key",
            "in": "path"
          },
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshot_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/image-upload-url": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get Snapshot Image Upload Url",
        "operationId": "get_snapshot_image_upload_url_snapshots__snapshot_id__image_upload_url_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Filename of the file to upload",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename",
              "description": "Filename of the file to upload"
            },
            "name": "filename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrlS3Key_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/image-uploaded": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Image uploaded to snapshot",
        "description": "Image uploaded to snapshot",
        "operationId": "image_uploaded_snapshots__snapshot_id__image_uploaded_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InImageUploaded"
                  }
                ],
                "title": "In Image Uploaded",
                "description": "Data to finish the upload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/files": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Upload files to snapshot",
        "description": "Upload files to snapshot",
        "operationId": "upload_snapshot_files_snapshots__snapshot_id__files_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_snapshot_files_snapshots__snapshot_id__files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshot_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/snapshots/monitoring": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshots by system id",
        "description": "Get snapshots by system id",
        "operationId": "get_snapshots_by_system_id_systems__system_id__snapshots_monitoring_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutMonitoringData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/projects/{project_id}/sdx-cloud-snapshots": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get sdx cloud snapshots by project id",
        "description": "Get sdx cloud snapshots by project id",
        "operationId": "get_sdx_cloud_snapshots_by_project_id_projects__project_id__sdx_cloud_snapshots_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshotData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Snapshots"],
        "summary": "Create sdx cloud snapshot",
        "description": "Create sdx cloud snapshot",
        "operationId": "create_sdx_cloud_snapshot_projects__project_id__sdx_cloud_snapshots_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSdxCloudSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/sdx-cloud-snapshots-pg-zip": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Create photogrammetry zip sdx cloud snapshot",
        "description": "Create phogrammetry zip sdx cloud snapshot",
        "operationId": "create_pg_zip_sdx_cloud_snapshot_projects__project_id__sdx_cloud_snapshots_pg_zip_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSdxCloudSnapshotPhotogrammetryZip"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/reprocess": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Reprocess snapshot",
        "description": "Reprocess snapshot",
        "operationId": "reprocess_snapshot_snapshots__snapshot_id__reprocess_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sdx-cloud-snapshots/{snapshot_id}/created-at": {
      "put": {
        "tags": ["Snapshots"],
        "summary": "Update sdx cloud snapshot by id",
        "description": "Update sdx cloud snapshot by id",
        "operationId": "update_sdx_cloud_snapshot_by_id_sdx_cloud_snapshots__snapshot_id__created_at_put",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSdxCloudSnapshotCreated"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/sdx-cloud-snapshots/{snapshot_id}": {
      "delete": {
        "tags": ["Snapshots"],
        "summary": "Delete sdx cloud snapshot",
        "description": "Delete sdx cloud snapshot",
        "operationId": "delete_sdx_cloud_snapshot_sdx_cloud_snapshots__snapshot_id__delete",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Delete files from file explorer. For photogrammetry snapshots only original images will be deleted not data created through processing.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete files from file explorer. For photogrammetry snapshots only original images will be deleted not data created through processing.",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          },
          {
            "description": "Delete pins associated with the snapshot",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Pins",
              "description": "Delete pins associated with the snapshot",
              "default": false
            },
            "name": "delete_pins",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/project-tags/{project_tag_id}/snapshots": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get snapshots by project tag id",
        "description": "Get snapshots by project tag id",
        "operationId": "get_snapshots_by_project_tag_id_project_tags__project_tag_id__snapshots_get",
        "parameters": [
          {
            "description": "ProjectTag unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "ProjectTag unique MongoDB Object-ID as string",
              "description": "ProjectTag unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "project_tag_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshotData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/datavolume-3d": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get 3D data volume my organization",
        "description": "Get 3D data volume my organization",
        "operationId": "get_3d_data_volume_my_organization_organizations_me_datavolume_3d_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/data-projects/datavolume-3d": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get data project 3D data volume my organization",
        "description": "Get data project 3D data volume my organization",
        "operationId": "get_3d_data_volume_my_organization_data_project_organizations_me_data_projects_datavolume_3d_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/external-processing-volume": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get external processing volume by organization id",
        "description": "Get external processing volume by organization id",
        "operationId": "get_external_processing_volume_by_organization_id_organizations__organization_id__external_processing_volume_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/system-projects/datavolume-3d": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get system project 3D data volume my organization",
        "description": "Get system project 3D data volume my organization",
        "operationId": "get_3d_data_volume_my_organization_system_project_organizations_me_system_projects_datavolume_3d_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/datavolume-3d": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get 3D data volume by organization id",
        "description": "Get 3D data volume by organization id",
        "operationId": "get_3d_data_volume_by_organization_id_organizations__organization_id__datavolume_3d_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_float_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/transfer": {
      "post": {
        "tags": ["Snapshots"],
        "summary": "Transfer snapshot",
        "description": "Transfer snapshot",
        "operationId": "transfer_snapshot_snapshots__snapshot_id__transfer_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputTransferSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/any-linked-to-telekom-scan": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Any project snapshots linked to a telekom scan",
        "description": "Any project snapshots linked to a telekom scan",
        "operationId": "any_project_snapshot_linked_to_telekom_scan_projects__project_id__snapshots_any_linked_to_telekom_scan_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/telekom-progress": {
      "get": {
        "tags": ["Snapshots"],
        "summary": "Get telekom progress for project",
        "description": "Get telekom progress for project",
        "operationId": "get_telekom_progress_for_project_projects__project_id__snapshots_telekom_progress_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshots.schemas.OutTelekomProgress__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pins/{pin_id}": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get pin by id",
        "description": "Get pin by id",
        "operationId": "get_pin_by_id_pins__pin_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPin_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Pins"],
        "summary": "Update pin",
        "description": "Update pin",
        "operationId": "update_pin_pins__pin_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPin_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Pins"],
        "summary": "Delete pin",
        "description": "Delete pin",
        "operationId": "delete_pin_pins__pin_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/pins": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get pins by project id",
        "description": "Get pins by project id",
        "operationId": "get_pins_by_project_id_projects__project_id__pins_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          },
          {
            "description": "Iso date string in utc",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start At",
              "description": "Iso date string in utc"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "Iso date string in utc",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End At",
              "description": "Iso date string in utc"
            },
            "name": "end_at",
            "in": "query"
          },
          {
            "description": "Latitude of top left corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lat Top Left",
              "description": "Latitude of top left corner in radians"
            },
            "name": "location_lat_top_left",
            "in": "query"
          },
          {
            "description": "Longitude of top left corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lon Top Left",
              "description": "Longitude of top left corner in radians"
            },
            "name": "location_lon_top_left",
            "in": "query"
          },
          {
            "description": "Latitude of bottom right corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lat Bottom Right",
              "description": "Latitude of bottom right corner in radians"
            },
            "name": "location_lat_bottom_right",
            "in": "query"
          },
          {
            "description": "Longitude of bottom right corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lon Bottom Right",
              "description": "Longitude of bottom right corner in radians"
            },
            "name": "location_lon_bottom_right",
            "in": "query"
          },
          {
            "description": "List of pin types to filter by",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/src__v2__processdata__pins__constants__PinType"
              },
              "type": "array",
              "description": "List of pin types to filter by"
            },
            "name": "pin_types",
            "in": "query"
          },
          {
            "description": "Cam position the pins should be from",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CamPosition"
                }
              ],
              "description": "Cam position the pins should be from"
            },
            "name": "cam_pos",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.pins.schemas.OutPin__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/pins/timeframe": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get pins by project id and timeframe",
        "description": "Get pins by project id and timeframe",
        "operationId": "get_pins_by_project_id_and_timeframe_projects__project_id__pins_timeframe_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          },
          {
            "description": "Iso date string in utc",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start At",
              "description": "Iso date string in utc"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "Iso date string in utc",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End At",
              "description": "Iso date string in utc"
            },
            "name": "end_at",
            "in": "query"
          },
          {
            "description": "Latitude of top left corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lat Top Left",
              "description": "Latitude of top left corner in radians"
            },
            "name": "location_lat_top_left",
            "in": "query"
          },
          {
            "description": "Longitude of top left corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lon Top Left",
              "description": "Longitude of top left corner in radians"
            },
            "name": "location_lon_top_left",
            "in": "query"
          },
          {
            "description": "Latitude of bottom right corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lat Bottom Right",
              "description": "Latitude of bottom right corner in radians"
            },
            "name": "location_lat_bottom_right",
            "in": "query"
          },
          {
            "description": "Longitude of bottom right corner in radians",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Location Lon Bottom Right",
              "description": "Longitude of bottom right corner in radians"
            },
            "name": "location_lon_bottom_right",
            "in": "query"
          },
          {
            "description": "List of pin types to filter by",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/src__v2__processdata__pins__constants__PinType"
              },
              "type": "array",
              "description": "List of pin types to filter by"
            },
            "name": "pin_types",
            "in": "query"
          },
          {
            "description": "Cam position the pins should be from",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CamPosition"
                }
              ],
              "description": "Cam position the pins should be from"
            },
            "name": "cam_pos",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.pins.schemas.OutPin__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/pins/form": {
      "post": {
        "tags": ["Pins"],
        "summary": "Create new pin for this project",
        "description": "Create new pin for this project",
        "operationId": "create_pin_form_projects__project_id__pins_form_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_pin_form_projects__project_id__pins_form_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPin_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pins/{pin_id}/files": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get files for pin",
        "description": "Get files for pin with signed url",
        "operationId": "get_files_for_pin_pins__pin_id__files_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.pins.schemas.OutFiles__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Pins"],
        "summary": "Delete files from pin",
        "description": "Delete files from pin",
        "operationId": "delete_files_from_pin_pins__pin_id__files_delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$"
              },
              "type": "array",
              "title": "File Ids"
            },
            "name": "file_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPin_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pins/{pin_id}/files/{file_id}": {
      "put": {
        "tags": ["Pins"],
        "summary": "Update file for pin",
        "description": "Update file for pin",
        "operationId": "update_file_for_pin_pins__pin_id__files__file_id__put",
        "parameters": [
          {
            "description": "Unique id of the file to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "File Id",
              "description": "Unique id of the file to be updated"
            },
            "name": "file_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateFiles"
                  }
                ],
                "title": "Data",
                "description": "File data to be updated"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPin_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pins": {
      "delete": {
        "tags": ["Pins"],
        "summary": "Delete pins by ids",
        "description": "Delete pins by ids",
        "operationId": "delete_pins_by_ids_pins_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$"
                },
                "type": "array",
                "title": "Pin Ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/projects/{project_id}/pins/dates": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get unique dates of pins for project",
        "description": "Get unnique dates of pins for project",
        "operationId": "get_dates_of_pins_projects__project_id__pins_dates_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_datetime.datetime__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/pins/{pin_id}/taginfo": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get tag info for pin",
        "description": "Get tag info for pin",
        "operationId": "get_pin_tag_info_pins__pin_id__taginfo_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "pin_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPinTagInfo_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/pins/date-nearest": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get nearest pin to date",
        "description": "Get nearest pin to date",
        "operationId": "get_nearest_pin_to_date_projects__project_id__pins_date_nearest_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Date"
            },
            "name": "date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPin_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/pins": {
      "get": {
        "tags": ["Pins"],
        "summary": "Get snapshot pins",
        "description": "Get snapshot pins",
        "operationId": "get_snapshot_pins_snapshots__snapshot_id__pins_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.pins.schemas.OutPin__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/dji-pins": {
      "post": {
        "tags": ["Pins"],
        "summary": "Create DJi Pins",
        "description": "Create Dji Pins",
        "operationId": "create_dji_pins_projects__project_id__dji_pins_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_dji_pins_projects__project_id__dji_pins_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/pins/telekom-transfer": {
      "post": {
        "tags": ["Pins"],
        "summary": "Transfer pins to telekom",
        "description": "Transfer pins to telekom",
        "operationId": "transfer_pins_to_telekom_projects__project_id__pins_telekom_transfer_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputTelekomTransfer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/tilesets/auth": {
      "get": {
        "tags": ["Tilesetmanagement"],
        "summary": "Get Tileset Auth",
        "operationId": "get_tileset_auth_projects__project_id__tilesets_auth_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/mapbox/auth": {
      "get": {
        "tags": ["Tilesetmanagement"],
        "summary": "Get mapbox authentication url",
        "description": "Get mapbox authentication url",
        "operationId": "get_mapbox_authentication_url_mapbox_auth_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/mapbox/{z}/{x}/{y}": {
      "get": {
        "tags": ["Tilesetmanagement"],
        "summary": "Load Mapbox Tileset",
        "operationId": "load_mapbox_tileset_mapbox__z___x___y__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "X"
            },
            "name": "x",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Y"
            },
            "name": "y",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Z"
            },
            "name": "z",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Expires"
            },
            "name": "Expires",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Signature"
            },
            "name": "Signature",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Policy"
            },
            "name": "Policy",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key_Pair_Id"
            },
            "name": "Key_Pair_Id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/snapshot-manipulations/": {
      "get": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Get all snapshot_manipulations - Sodex only",
        "description": "Get all snapshot_manipulations",
        "operationId": "get_all_snapshot_manipulations_snapshot_manipulations__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotmanipulations.schemas.OutSnapshotManipulation__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/snapshot-manipulations/{snapshot_manipulation_id}": {
      "get": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Get snapshot_manipulation by id",
        "description": "Get snapshot_manipulation by id",
        "operationId": "get_snapshot_manipulation_by_id_snapshot_manipulations__snapshot_manipulation_id__get",
        "parameters": [
          {
            "description": "SnapshotManipulation unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SnapshotManipulation unique MongoDB Object-ID as string",
              "description": "SnapshotManipulation unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_manipulation_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotManipulation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Update snapshot_manipulation",
        "description": "Update snapshot_manipulation",
        "operationId": "update_snapshot_manipulation_snapshot_manipulations__snapshot_manipulation_id__put",
        "parameters": [
          {
            "description": "SnapshotManipulation unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SnapshotManipulation unique MongoDB Object-ID as string",
              "description": "SnapshotManipulation unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_manipulation_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSnapshotManipulation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotManipulation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Delete snapshot_manipulation",
        "description": "Delete snapshot_manipulation",
        "operationId": "delete_snapshot_manipulation_snapshot_manipulations__snapshot_manipulation_id__delete",
        "parameters": [
          {
            "description": "SnapshotManipulation unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SnapshotManipulation unique MongoDB Object-ID as string",
              "description": "SnapshotManipulation unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_manipulation_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotManipulation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshot-manipulations": {
      "get": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Get project snapshot_manipulations",
        "description": "Get project snapshot_manipulations",
        "operationId": "get_project_snapshot_manipulations_projects__project_id__snapshot_manipulations_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotmanipulations.schemas.OutSnapshotManipulation__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots/{snapshot_id}/affected-manipulations": {
      "get": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Get project affected snapshot_manipulations",
        "description": "Get project affected snapshot_manipulations",
        "operationId": "get_project_affected_snapshot_manipulations_projects__project_id__snapshots__snapshot_id__affected_manipulations_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Manipulation type for which to get affected manipulations",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ManipulationType"
                }
              ],
              "description": "Manipulation type for which to get affected manipulations",
              "default": "complete_cleaning"
            },
            "name": "manipulation_type",
            "in": "query"
          },
          {
            "description": "End date to get affected manipulations until",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End At",
              "description": "End date to get affected manipulations until"
            },
            "name": "end_at",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotmanipulations.schemas.OutSnapshotManipulation__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/manipulations": {
      "get": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Get snapshot snapshot_manipulations",
        "description": "Get snapshot snapshot_manipulations",
        "operationId": "get_snapshot_manipulations_snapshots__snapshot_id__manipulations_get",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Get continuous snapshot_manipulations",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Continuous",
              "description": "Get continuous snapshot_manipulations",
              "default": true
            },
            "name": "continuous",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotmanipulations.schemas.OutSnapshotManipulation__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Snapshot Manipulations"],
        "summary": "Create project snapshot_manipulation",
        "description": "Create project snapshot_manipulation",
        "operationId": "create_project_snapshot_manipulation_snapshots__snapshot_id__manipulations_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSnapshotManipulation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotManipulation_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/bearing-maps/": {
      "get": {
        "tags": ["Bearing Maps"],
        "summary": "Get all bearing_maps - Sodex only",
        "description": "Get all bearing_maps",
        "operationId": "get_all_bearing_maps_bearing_maps__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.bearingmaps.schemas.OutBearingMap__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/bearing-maps/{bearing_map_id}": {
      "get": {
        "tags": ["Bearing Maps"],
        "summary": "Get bearing_map by id",
        "description": "Get bearing_map by id",
        "operationId": "get_bearing_map_by_id_bearing_maps__bearing_map_id__get",
        "parameters": [
          {
            "description": "BearingMap unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "BearingMap unique MongoDB Object-ID as string",
              "description": "BearingMap unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "bearing_map_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutBearingMap_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["Bearing Maps"],
        "summary": "Delete bearing_map",
        "description": "Delete bearing_map",
        "operationId": "delete_bearing_map_bearing_maps__bearing_map_id__delete",
        "parameters": [
          {
            "description": "BearingMap unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "BearingMap unique MongoDB Object-ID as string",
              "description": "BearingMap unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "bearing_map_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/projects/{project_id}/systems/me/bearing-maps": {
      "get": {
        "tags": ["Bearing Maps"],
        "summary": "Get system me project bearing_maps",
        "description": "Get system me project bearing_maps",
        "operationId": "get_system_me_project_bearing_maps_projects__project_id__systems_me_bearing_maps_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.bearingmaps.schemas.OutBearingMap__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/systems/{system_id}/bearing-maps": {
      "get": {
        "tags": ["Bearing Maps"],
        "summary": "Get system project bearing_maps",
        "description": "Get system project bearing_maps",
        "operationId": "get_system_project_bearing_maps_projects__project_id__systems__system_id__bearing_maps_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.bearingmaps.schemas.OutBearingMap__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/datacapturings/": {
      "get": {
        "tags": ["DataCapturing"],
        "summary": "Get all datacapturings - Sodex only",
        "description": "Get all datacapturings",
        "operationId": "get_all_datacapturings_datacapturings__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.datacapturing.schemas.OutDataCapturing__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/datacapturings/{datacapturing_id}": {
      "get": {
        "tags": ["DataCapturing"],
        "summary": "Get datacapturing by id",
        "description": "Get datacapturing by id",
        "operationId": "get_datacapturing_by_id_datacapturings__datacapturing_id__get",
        "parameters": [
          {
            "description": "DataCapturing unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "DataCapturing unique MongoDB Object-ID as string",
              "description": "DataCapturing unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "datacapturing_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataCapturing_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["DataCapturing"],
        "summary": "Update datacapturing",
        "description": "Update datacapturing",
        "operationId": "update_datacapturing_datacapturings__datacapturing_id__put",
        "parameters": [
          {
            "description": "DataCapturing unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "DataCapturing unique MongoDB Object-ID as string",
              "description": "DataCapturing unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "datacapturing_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataCapturing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataCapturing_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["DataCapturing"],
        "summary": "Delete datacapturing",
        "description": "Delete datacapturing",
        "operationId": "delete_datacapturing_datacapturings__datacapturing_id__delete",
        "parameters": [
          {
            "description": "DataCapturing unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "DataCapturing unique MongoDB Object-ID as string",
              "description": "DataCapturing unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "datacapturing_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/datacapturings": {
      "get": {
        "tags": ["DataCapturing"],
        "summary": "Get system datacapturings",
        "description": "Get system datacapturings",
        "operationId": "get_system_datacapturings_systems__system_id__datacapturings_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.datacapturing.schemas.OutDataCapturing__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/systems/me/datacapturing-upload-url": {
      "get": {
        "tags": ["DataCapturing"],
        "summary": "Get datacapturing upload url",
        "description": "Get datacapturing upload url",
        "operationId": "get_datacapturing_upload_url_systems_me_datacapturing_upload_url_get",
        "parameters": [
          {
            "description": "Filename of the datacapturing",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename",
              "description": "Filename of the datacapturing"
            },
            "name": "filename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/datacapturing-uploaded": {
      "post": {
        "tags": ["DataCapturing"],
        "summary": "Create uploaded system datacapturing",
        "description": "Create uploaded system datacapturing",
        "operationId": "create_system_datacapturing_systems_me_datacapturing_uploaded_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_system_datacapturing_systems_me_datacapturing_uploaded_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataCapturing_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/datacapturings": {
      "post": {
        "tags": ["DataCapturing"],
        "summary": "Create system datacapturing",
        "description": "Create system datacapturing",
        "operationId": "create_system_datacapturing_systems_me_datacapturings_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_system_datacapturing_systems_me_datacapturings_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDataCapturing_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/aidatas/": {
      "get": {
        "tags": ["Aidata"],
        "summary": "Get all aidatas - Sodex only",
        "description": "Get all aidatas",
        "operationId": "get_all_aidatas_aidatas__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.aidata.schemas.OutAiData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/aidatas-querying": {
      "get": {
        "tags": ["Aidata"],
        "summary": "Get system aidatas by querying",
        "description": "Get system aidatas by querying",
        "operationId": "get_system_aidatas_querying_aidatas_querying_get",
        "parameters": [
          {
            "description": "System ID",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "System Id",
              "description": "System ID"
            },
            "name": "system_id",
            "in": "query"
          },
          {
            "description": "Start date of the aidata",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start At Gte",
              "description": "Start date of the aidata"
            },
            "name": "start_at_gte",
            "in": "query"
          },
          {
            "description": "End date of the aidata",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End At Lte",
              "description": "End date of the aidata"
            },
            "name": "end_at_lte",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.aidata.schemas.OutAiData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/aidatas/{aidata_id}": {
      "get": {
        "tags": ["Aidata"],
        "summary": "Get aidata by id",
        "description": "Get aidata by id",
        "operationId": "get_aidata_by_id_aidatas__aidata_id__get",
        "parameters": [
          {
            "description": "AiData unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AiData unique MongoDB Object-ID as string",
              "description": "AiData unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "aidata_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAiData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "put": {
        "tags": ["Aidata"],
        "summary": "Update aidata",
        "description": "Update aidata",
        "operationId": "update_aidata_aidatas__aidata_id__put",
        "parameters": [
          {
            "description": "AiData unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AiData unique MongoDB Object-ID as string",
              "description": "AiData unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "aidata_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAiData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAiData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["Aidata"],
        "summary": "Delete aidata",
        "description": "Delete aidata",
        "operationId": "delete_aidata_aidatas__aidata_id__delete",
        "parameters": [
          {
            "description": "AiData unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AiData unique MongoDB Object-ID as string",
              "description": "AiData unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "aidata_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/aidatas": {
      "get": {
        "tags": ["Aidata"],
        "summary": "Get system aidatas",
        "description": "Get system aidatas",
        "operationId": "get_system_aidatas_systems__system_id__aidatas_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.aidata.schemas.OutAiData__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Aidata"],
        "summary": "Create system aidata",
        "description": "Create system aidata",
        "operationId": "create_system_aidata_systems__system_id__aidatas_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputAiData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAiData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/systems/me/aidatas": {
      "post": {
        "tags": ["Aidata"],
        "summary": "Create my system aidata",
        "description": "Create my system aidata",
        "operationId": "create_my_system_aidata_systems_me_aidatas_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_my_system_aidata_systems_me_aidatas_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAiData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots-v2/": {
      "get": {
        "tags": ["SnapshotsV2"],
        "summary": "Get all Snapshots V2 - Sodex only",
        "description": "Get all Snapshots V2",
        "operationId": "get_all_snapshots_v2_snapshots_v2__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 10000
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotsv2.schemas.OutSnapshotV2__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/snapshots-v2": {
      "get": {
        "tags": ["SnapshotsV2"],
        "summary": "Get my organization Snapshots V2",
        "description": "Get my organization Snapshots V2",
        "operationId": "get_my_organization_snapshots_v2_organizations_me_snapshots_v2_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 10000
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotsv2.schemas.OutSnapshotV2__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/snapshots-v2": {
      "get": {
        "tags": ["SnapshotsV2"],
        "summary": "Get organization Snapshots V2",
        "description": "Get organization Snapshots V2",
        "operationId": "get_organization_snapshots_v2_organizations__organization_id__snapshots_v2_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 10000
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotsv2.schemas.OutSnapshotV2__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/snapshots-v2": {
      "get": {
        "tags": ["SnapshotsV2"],
        "summary": "Get Project Snapshots V2",
        "description": "Get Project Snapshots V2",
        "operationId": "get_project_snapshots_v2_projects__project_id__snapshots_v2_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 10000
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotsv2.schemas.OutSnapshotV2__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/my-snapshots": {
      "get": {
        "tags": ["SnapshotsV2"],
        "summary": "Get My Project Snapshots V2",
        "description": "Get My Project Snapshots V2",
        "operationId": "get_my_project_snapshots_v2_projects__project_id__my_snapshots_get",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.processdata.snapshotsv2.schemas.OutSnapshotV2__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "vidoc", "inactive"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots-v2/{snapshot_id}": {
      "get": {
        "tags": ["SnapshotsV2"],
        "summary": "Get SnapshotV2 by id",
        "description": "Get SnapshotV2 by id",
        "operationId": "get_snapshotv2_by_id_snapshots_v2__snapshot_id__get",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["SnapshotsV2"],
        "summary": "Update SnapshotV2",
        "description": "Update SnapshotV2",
        "operationId": "update_snapshotv2_snapshots_v2__snapshot_id__put",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSnapshotV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/file-snapshot-v2": {
      "post": {
        "tags": ["SnapshotsV2"],
        "summary": "Create Project Sdx Cloud File SnapshotV2",
        "description": "Create Project Sdx Cloud File SnapshotV2",
        "operationId": "create_file_snapshotv2_projects__project_id__file_snapshot_v2_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSdxCloudFileSnapshotV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/photogrammetry-snapshot-v2": {
      "post": {
        "tags": ["SnapshotsV2"],
        "summary": "Create Project Photogrammetry SnapshotV2",
        "description": "Create Project Photogrammetry SnapshotV2",
        "operationId": "create_photogrammetry_snapshotv2_projects__project_id__photogrammetry_snapshot_v2_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSdxCloudSnapshotPhotogrammetryV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/photogrammetry-zip-snapshot-v2": {
      "post": {
        "tags": ["SnapshotsV2"],
        "summary": "Create Photogrammetry Snapshot Zip V2",
        "description": "Create Photogrammetry Snapshot Zip V2",
        "operationId": "create_photogrammetry_snapshot_zip_v2_projects__project_id__photogrammetry_zip_snapshot_v2_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSdxCloudSnapshotPhotogrammetryZipV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/projects/{project_id}/vidoc-snapshot": {
      "post": {
        "tags": ["SnapshotsV2"],
        "summary": "Create Vidoc Snapshot",
        "description": "Create Vidoc Snapshot",
        "operationId": "create_vidoc_snapshotv2_projects__project_id__vidoc_snapshot_post",
        "parameters": [
          {
            "description": "Unique project MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique project MongoDB Object-ID as string",
              "description": "Unique project MongoDB Object-ID as string"
            },
            "example": "668eb0adca7c6ff2ea8002bc",
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputVidocSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["vidoc", "inactive", "cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots/{snapshot_id}/commit-vidoc": {
      "post": {
        "tags": ["SnapshotsV2"],
        "summary": "Commit Vidoc Snapshot",
        "description": "Commit Vidoc Snapshot",
        "operationId": "commit_vidoc_snapshot_snapshots__snapshot_id__commit_vidoc_post",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitVidocSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["vidoc", "inactive", "cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots-v2/{snapshot_id}/data-project": {
      "put": {
        "tags": ["SnapshotsV2"],
        "summary": "Update Data Project SnapshotV2",
        "description": "Update Data Project SnapshotV2",
        "operationId": "update_data_project_snapshot_snapshots_v2__snapshot_id__data_project_put",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataProjectSnapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["SnapshotsV2"],
        "summary": "Delete Data Project SnapshotV2",
        "description": "Delete Data Project SnapshotV2",
        "operationId": "delete_data_project_snapshotv2_snapshots_v2__snapshot_id__data_project_delete",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          },
          {
            "description": "Delete source files",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Files",
              "description": "Delete source files",
              "default": false
            },
            "name": "delete_files",
            "in": "query"
          },
          {
            "description": "Delete pins",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Pins",
              "description": "Delete pins",
              "default": false
            },
            "name": "delete_pins",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots-v2/{snapshot_id}/data-project/process": {
      "post": {
        "tags": ["SnapshotsV2"],
        "summary": "Process Data Project SnapshotV2",
        "description": "Process Data Project SnapshotV2",
        "operationId": "process_snapshotv2_snapshots_v2__snapshot_id__data_project_process_post",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots-v2/{snapshot_id}/processing-files": {
      "get": {
        "tags": ["SnapshotsV2"],
        "summary": "Get processing files for snapshot",
        "description": "Get processing files for snapshot",
        "operationId": "get_processing_files_for_snapshot_snapshots_v2__snapshot_id__processing_files_get",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["SnapshotsV2"],
        "summary": "Update processing files for snapshot",
        "description": "Update processing files for snapshot",
        "operationId": "update_processing_files_for_snapshot_snapshots_v2__snapshot_id__processing_files_put",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcessingFiles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingFiles_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/snapshots-v2/{snapshot_id}/telekom-images": {
      "post": {
        "tags": ["SnapshotsV2"],
        "summary": "Create Telekom Images",
        "description": "Create Telekom Images",
        "operationId": "create_telekom_images_snapshots_v2__snapshot_id__telekom_images_post",
        "parameters": [
          {
            "description": "Snapshot unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Snapshot unique MongoDB Object-ID as string",
              "description": "Snapshot unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSnapshotTelekomImages"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSnapshotV2_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["inactive", "cloud_base", "vidoc"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/apiconfigs/": {
      "get": {
        "tags": ["API Configs"],
        "summary": "Get all apiconfigs - Sodex only",
        "description": "Get all apiconfigs",
        "operationId": "get_all_apiconfigs_apiconfigs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.apiconfigs.schemas.OutApiConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/apiconfigs/{api_config_id}": {
      "get": {
        "tags": ["API Configs"],
        "summary": "Get api_config by id",
        "description": "Get api_config by id",
        "operationId": "get_api_config_by_id_apiconfigs__api_config_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "api_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApiConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["API Configs"],
        "summary": "Update api_config",
        "description": "Update api_config",
        "operationId": "update_api_config_apiconfigs__api_config_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "api_config_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApiConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["API Configs"],
        "summary": "Delete api_config",
        "description": "Delete api_config",
        "operationId": "delete_api_config_apiconfigs__api_config_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "api_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/apiconfigs": {
      "get": {
        "tags": ["API Configs"],
        "summary": "Get apiconfig of my system",
        "description": "Get apiconfig of my system",
        "operationId": "get_api_configs_of_my_system_systems_me_apiconfigs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApiConfig_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/apiconfigs": {
      "get": {
        "tags": ["API Configs"],
        "summary": "Get apiconfig of a system",
        "description": "Get apiconfig of a system",
        "operationId": "get_api_configs_of_system_systems__system_id__apiconfigs_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApiConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["API Configs"],
        "summary": "Create new api_config",
        "description": "Create new api_config",
        "operationId": "create_api_config_systems__system_id__apiconfigs_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputApiConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApiConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cameraconfigs/": {
      "get": {
        "tags": ["Camera Configs"],
        "summary": "Get all cameraconfigs - Sodex only",
        "description": "Get all cameraconfigs",
        "operationId": "get_all_cameraconfigs_cameraconfigs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.cameraconfigs.schemas.OutCameraConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/cameraconfigs/{camera_config_id}": {
      "get": {
        "tags": ["Camera Configs"],
        "summary": "Get camera_config by id",
        "description": "Get camera_config by id",
        "operationId": "get_camera_config_by_id_cameraconfigs__camera_config_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "camera_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCameraConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Camera Configs"],
        "summary": "Update camera_config",
        "description": "Update camera_config",
        "operationId": "update_camera_config_cameraconfigs__camera_config_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "camera_config_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCameraConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCameraConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Camera Configs"],
        "summary": "Delete camera_config",
        "description": "Delete camera_config",
        "operationId": "delete_camera_config_cameraconfigs__camera_config_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "camera_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/cameraconfigs": {
      "get": {
        "tags": ["Camera Configs"],
        "summary": "Get cameraconfigs of my system",
        "description": "Get cameraconfigs of my system",
        "operationId": "get_camera_configs_of_my_system_systems_me_cameraconfigs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.systemconfiguration.cameraconfigs.schemas.OutCameraConfig__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/cameraconfigs": {
      "get": {
        "tags": ["Camera Configs"],
        "summary": "Get cameraconfigs of a system",
        "description": "Get cameraconfigs of a system",
        "operationId": "get_camera_configs_of_system_systems__system_id__cameraconfigs_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.systemconfiguration.cameraconfigs.schemas.OutCameraConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Camera Configs"],
        "summary": "Create new camera_config",
        "description": "Create new camera_config",
        "operationId": "create_camera_config_systems__system_id__cameraconfigs_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCameraConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCameraConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/csparams/": {
      "get": {
        "tags": ["CS Params"],
        "summary": "Get all csparams - Sodex only",
        "description": "Get all csparams",
        "operationId": "get_all_csparams_csparams__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.csparams.schemas.OutCsParam__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/csparams/{cs_param_id}": {
      "get": {
        "tags": ["CS Params"],
        "summary": "Get cs_param by id",
        "description": "Get cs_param by id",
        "operationId": "get_cs_param_by_id_csparams__cs_param_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cs_param_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["CS Params"],
        "summary": "Update cs_param",
        "description": "Update cs_param",
        "operationId": "update_cs_param_csparams__cs_param_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cs_param_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCsParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["CS Params"],
        "summary": "Delete cs_param",
        "description": "Delete cs_param",
        "operationId": "delete_cs_param_csparams__cs_param_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "cs_param_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/csparams": {
      "get": {
        "tags": ["CS Params"],
        "summary": "Get csparams of my system",
        "description": "Get csparams of my system",
        "operationId": "get_is_params_of_my_system_systems_me_csparams_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsParam_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/csparams": {
      "get": {
        "tags": ["CS Params"],
        "summary": "Get csparams of a system",
        "description": "Get csparams of a system",
        "operationId": "get_is_params_of_system_systems__system_id__csparams_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["CS Params"],
        "summary": "Create new is_param",
        "description": "Create new is_param",
        "operationId": "create_cs_param_systems__system_id__csparams_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCsParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutCsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/isparams/": {
      "get": {
        "tags": ["IS Params"],
        "summary": "Get all isparams - Sodex only",
        "description": "Get all isparams",
        "operationId": "get_all_is_params_isparams__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.isparams.schemas.OutIsParam__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/isparams/{is_param_id}": {
      "get": {
        "tags": ["IS Params"],
        "summary": "Get is_param by id",
        "description": "Get is_param by id",
        "operationId": "get_is_param_by_id_isparams__is_param_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "is_param_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutIsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["IS Params"],
        "summary": "Update is_param",
        "description": "Update is_param",
        "operationId": "update_is_param_isparams__is_param_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "is_param_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIsParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutIsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["IS Params"],
        "summary": "Delete is_param",
        "description": "Delete is_param",
        "operationId": "delete_is_param_isparams__is_param_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "is_param_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/isparams": {
      "get": {
        "tags": ["IS Params"],
        "summary": "Get isparams of my system",
        "description": "Get isparams of my system",
        "operationId": "get_is_params_of_my_system_systems_me_isparams_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutIsParam_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/isparams": {
      "get": {
        "tags": ["IS Params"],
        "summary": "Get isparams of a system",
        "description": "Get isparams of a system",
        "operationId": "get_is_params_of_system_systems__system_id__isparams_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutIsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["IS Params"],
        "summary": "Create new is_param",
        "description": "Create new is_param",
        "operationId": "create_is_param_systems__system_id__isparams_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputIsParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutIsParam_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/lidarconfigs/": {
      "get": {
        "tags": ["Lidar Configs"],
        "summary": "Get all lidarconfigs - Sodex only",
        "description": "Get all lidarconfigs",
        "operationId": "get_all_lidarconfigs_lidarconfigs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.lidarconfigs.schemas.OutLidarConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/lidarconfigs/{lidar_config_id}": {
      "get": {
        "tags": ["Lidar Configs"],
        "summary": "Get lidar_config by id",
        "description": "Get lidar_config by id",
        "operationId": "get_lidar_config_by_id_lidarconfigs__lidar_config_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "lidar_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLidarConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Lidar Configs"],
        "summary": "Update lidar_config",
        "description": "Update lidar_config",
        "operationId": "update_lidar_config_lidarconfigs__lidar_config_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "lidar_config_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLidarConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLidarConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Lidar Configs"],
        "summary": "Delete lidar_config",
        "description": "Delete lidar_config",
        "operationId": "delete_lidar_config_lidarconfigs__lidar_config_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "lidar_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/lidarconfigs": {
      "get": {
        "tags": ["Lidar Configs"],
        "summary": "Get lidarconfig of my system",
        "description": "Get lidarconfig of my system",
        "operationId": "get_lidar_configs_of_my_system_systems_me_lidarconfigs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.systemconfiguration.lidarconfigs.schemas.OutLidarConfig__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/lidarconfigs": {
      "get": {
        "tags": ["Lidar Configs"],
        "summary": "Get lidarconfig of a system",
        "description": "Get lidarconfig of a system",
        "operationId": "get_lidar_configs_of_system_systems__system_id__lidarconfigs_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.systemconfiguration.lidarconfigs.schemas.OutLidarConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Lidar Configs"],
        "summary": "Create new lidar_config",
        "description": "Create new lidar_config",
        "operationId": "create_lidar_config_systems__system_id__lidarconfigs_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputLidarConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLidarConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/machineconfigs/": {
      "get": {
        "tags": ["Machine Configs"],
        "summary": "Get all machineconfigs - Sodex only",
        "description": "Get all machineconfigs",
        "operationId": "get_all_machine_configs_machineconfigs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.machineconfigs.schemas.OutMachineConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/machineconfigs/{machine_config_id}": {
      "get": {
        "tags": ["Machine Configs"],
        "summary": "Get machine_config by id",
        "description": "Get machine_config by id",
        "operationId": "get_machine_config_by_id_machineconfigs__machine_config_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "machine_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMachineConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Machine Configs"],
        "summary": "Update machine_config",
        "description": "Update machine_config",
        "operationId": "update_machine_config_machineconfigs__machine_config_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "machine_config_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMachineConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMachineConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Machine Configs"],
        "summary": "Delete machine_config",
        "description": "Delete machine_config",
        "operationId": "delete_machine_config_machineconfigs__machine_config_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "machine_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/machineconfigs": {
      "get": {
        "tags": ["Machine Configs"],
        "summary": "Get machineconfigs of my system",
        "description": "Get machineconfigs of my system",
        "operationId": "get_is_params_of_my_system_systems_me_machineconfigs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMachineConfig_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/machineconfigs": {
      "get": {
        "tags": ["Machine Configs"],
        "summary": "Get machineconfigs of a system",
        "description": "Get machineconfigs of a system",
        "operationId": "get_is_params_of_system_systems__system_id__machineconfigs_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMachineConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Machine Configs"],
        "summary": "Create new is_param",
        "description": "Create new is_param",
        "operationId": "create_machineconfig_systems__system_id__machineconfigs_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputMachineConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMachineConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/managerconfigs/": {
      "get": {
        "tags": ["Manager Configs"],
        "summary": "Get all managerconfigs - Sodex only",
        "description": "Get all managerconfigs",
        "operationId": "get_all_managerconfigs_managerconfigs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.managerconfigs.schemas.OutManagerConfig__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/managerconfigs/{manager_config_id}": {
      "get": {
        "tags": ["Manager Configs"],
        "summary": "Get manager_config by id",
        "description": "Get manager_config by id",
        "operationId": "get_manager_config_by_id_managerconfigs__manager_config_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "manager_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutManagerConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Manager Configs"],
        "summary": "Update manager_config",
        "description": "Update manager_config",
        "operationId": "update_manager_config_managerconfigs__manager_config_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "manager_config_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagerConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutManagerConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Manager Configs"],
        "summary": "Delete manager_config",
        "description": "Delete manager_config",
        "operationId": "delete_manager_config_managerconfigs__manager_config_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "manager_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/managerconfigs": {
      "get": {
        "tags": ["Manager Configs"],
        "summary": "Get managerconfigs of my system",
        "description": "Get managerconfigs of my system",
        "operationId": "get_manager_configs_of_my_system_systems_me_managerconfigs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutManagerConfig_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/managerconfigs": {
      "get": {
        "tags": ["Manager Configs"],
        "summary": "Get managerconfigs of a system",
        "description": "Get managerconfigs of a system",
        "operationId": "get_manager_configs_of_system_systems__system_id__managerconfigs_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutManagerConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Manager Configs"],
        "summary": "Create new manager_config",
        "description": "Create new manager_config",
        "operationId": "create_manager_config_systems__system_id__managerconfigs_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputManagerConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutManagerConfig_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/system_metas/": {
      "get": {
        "tags": ["System Meta"],
        "summary": "Get all system_metas - Sodex only",
        "description": "Get all system_metas",
        "operationId": "get_all_system_metas_system_metas__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.systemconfiguration.systemmeta.schemas.OutSystemMeta__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/system_metas/{system_meta_id}": {
      "get": {
        "tags": ["System Meta"],
        "summary": "Get system_meta by id",
        "description": "Get system_meta by id",
        "operationId": "get_system_meta_by_id_system_metas__system_meta_id__get",
        "parameters": [
          {
            "description": "SystemMeta unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemMeta unique MongoDB Object-ID as string",
              "description": "SystemMeta unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_meta_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "put": {
        "tags": ["System Meta"],
        "summary": "Update system meta",
        "description": "Update system meta",
        "operationId": "update_system_meta_system_metas__system_meta_id__put",
        "parameters": [
          {
            "description": "SystemMeta unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemMeta unique MongoDB Object-ID as string",
              "description": "SystemMeta unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_meta_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemMeta"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["System Meta"],
        "summary": "Delete system_meta",
        "description": "Delete system_meta",
        "operationId": "delete_system_meta_system_metas__system_meta_id__delete",
        "parameters": [
          {
            "description": "SystemMeta unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemMeta unique MongoDB Object-ID as string",
              "description": "SystemMeta unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_meta_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/me/meta": {
      "get": {
        "tags": ["System Meta"],
        "summary": "Get my system meta",
        "description": "Get my system meta",
        "operationId": "get_my_system_meta_systems_me_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemMeta_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/meta": {
      "get": {
        "tags": ["System Meta"],
        "summary": "Get system meta",
        "description": "Get system meta",
        "operationId": "get_system_meta_systems__system_id__meta_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["System Meta"],
        "summary": "Create system meta",
        "description": "Create system meta",
        "operationId": "create_system_meta_systems__system_id__meta_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSystemMeta"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemMeta_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/extension-packs/": {
      "get": {
        "tags": ["ExtensionPacks"],
        "summary": "Get all extension_packs",
        "description": "Get all extension_packs",
        "operationId": "get_all_extension_packs_extension_packs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.extensionpacks.schemas.OutExtensionPack__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/extension-packs/license/{license}": {
      "get": {
        "tags": ["ExtensionPacks"],
        "summary": "Get all extension_packs by license_type - Sodex only",
        "description": "Get all extension_packs by license_type",
        "operationId": "get_all_extension_packs_by_license_extension_packs_license__license__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LicenseTypes"
            },
            "name": "license",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.extensionpacks.schemas.OutExtensionPack__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/me/extension-packs/default": {
      "get": {
        "tags": ["ExtensionPacks"],
        "summary": "Get all default extension_packs of this system",
        "description": "Get all default extension_packs of this system",
        "operationId": "get_all_default_extension_packs_of_this_system_systems_me_extension_packs_default_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.extensionpacks.schemas.OutExtensionPack__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/extension-packs/reset/all": {
      "post": {
        "tags": ["ExtensionPacks"],
        "summary": "Reset all extension_packs to license default",
        "description": "Reset all extension_packs to license default - all custom extension_packs and extra capacity will be removed",
        "operationId": "reset_all_extension_packs_extension_packs_reset_all_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/extension-packs/{extension_pack_id}": {
      "get": {
        "tags": ["ExtensionPacks"],
        "summary": "Get extension_pack by id",
        "description": "Get extension_pack by id",
        "operationId": "get_extension_pack_by_id_extension_packs__extension_pack_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "extension_pack_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutExtensionPack_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["ExtensionPacks"],
        "summary": "Update extension_pack",
        "description": "Update extension_pack",
        "operationId": "update_extension_pack_extension_packs__extension_pack_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "extension_pack_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExtensionPack"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutExtensionPack_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["ExtensionPacks"],
        "summary": "Delete extension_pack",
        "description": "Delete extension_pack",
        "operationId": "delete_extension_pack_extension_packs__extension_pack_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "extension_pack_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/extension-packs": {
      "post": {
        "tags": ["ExtensionPacks"],
        "summary": "Create new extension_pack for a project",
        "description": "Create new extension_pack for a project",
        "operationId": "create_extension_pack_extension_packs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputExtensionPack"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutExtensionPack_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/extension-packs/reset": {
      "post": {
        "tags": ["ExtensionPacks"],
        "summary": "Reset system extension packs to license default",
        "description": "Reset system extension packs to license default - all custom extension packs and extra capacity will be removed",
        "operationId": "reset_system_extension_packs_systems__system_id__extension_packs_reset_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/extension-packs/add": {
      "post": {
        "tags": ["ExtensionPacks"],
        "summary": "Add extension pack to system",
        "description": "Add extension pack to system - if an extension pack with the same name already exists the capacity will be added to it",
        "operationId": "add_extra_extension_pack_to_system_systems__system_id__extension_packs_add_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputAddExtensionPack"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/extension-packs/remove": {
      "delete": {
        "tags": ["ExtensionPacks"],
        "summary": "Remove extension pack from system",
        "description": "Remove extension pack from system",
        "operationId": "remove_extension_pack_from_system_systems__system_id__extension_packs_remove_delete",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExtensionPackName"
            },
            "name": "extension_pack_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/extension-packs/add/custom": {
      "post": {
        "tags": ["ExtensionPacks"],
        "summary": "Add custom extension pack capacity to system",
        "description": "Add custom extension pack capacity to system",
        "operationId": "add_custom_extension_pack_to_system_systems__system_id__extension_packs_add_custom_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputAddCustomCapacity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/me/extension-packs/remove/custom": {
      "delete": {
        "tags": ["ExtensionPacks"],
        "summary": "Remove custom extension pack capacity from this system",
        "description": "Remove custom extension pack capacity from this system",
        "operationId": "remove_custom_extension_pack_from_this_system_systems_me_extension_packs_remove_custom_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExtensionPackName"
            },
            "name": "extension_pack_name",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "number",
              "title": "Capacity"
            },
            "name": "capacity",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/extension-packs/remove/custom": {
      "delete": {
        "tags": ["ExtensionPacks"],
        "summary": "Remove custom extension pack capacity from system",
        "description": "Remove custom extension pack capacity from system",
        "operationId": "remove_custom_extension_pack_from_system_systems__system_id__extension_packs_remove_custom_delete",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExtensionPackName"
            },
            "name": "extension_pack_name",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "number",
              "title": "Capacity"
            },
            "name": "capacity",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/license-configs/": {
      "get": {
        "tags": ["LicenseConfigs"],
        "summary": "Get all license_configs - Sodex only",
        "description": "Get all license_configs",
        "operationId": "get_all_license_configss_license_configs__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.licenseconfigs.schemas.OutLicenseConfigs__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/license-configs/{license_config_id}": {
      "get": {
        "tags": ["LicenseConfigs"],
        "summary": "Get license_configs by id",
        "description": "Get license_configs by id",
        "operationId": "get_license_configs_by_id_license_configs__license_config_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "license_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLicenseConfigs_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["LicenseConfigs"],
        "summary": "Update license_configs",
        "description": "Update license_configs",
        "operationId": "update_license_configs_license_configs__license_config_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "license_config_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLicenseConfigs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLicenseConfigs_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["LicenseConfigs"],
        "summary": "Delete license_configs",
        "description": "Delete license_configs",
        "operationId": "delete_license_configs_license_configs__license_config_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "license_config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/licenses/{license_type}/configs": {
      "get": {
        "tags": ["LicenseConfigs"],
        "summary": "Get configs by license tyoe",
        "description": "Get all license configs by type",
        "operationId": "get_license_configs_by_type_licenses__license_type__configs_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OldUserLicenseTypes"
            },
            "name": "license_type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.licenseconfigs.schemas.OutLicenseConfigs__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/license-configs": {
      "post": {
        "tags": ["LicenseConfigs"],
        "summary": "Create new license_configs",
        "description": "Create new license_configs",
        "operationId": "create_license_configs_license_configs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputLicenseConfigs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLicenseConfigs_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Current User",
        "description": "Get current user",
        "operationId": "get_current_user_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update Current User",
        "description": "Update current user",
        "operationId": "update_current_user_users_me_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/logout": {
      "get": {
        "tags": ["Users"],
        "summary": "Logout Current User",
        "description": "Logout current user",
        "operationId": "logout_current_user_users_me_logout_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/confirm-email": {
      "get": {
        "tags": ["Users"],
        "summary": "Confirm User Email",
        "operationId": "confirm_user_email_users_confirm_email_get",
        "parameters": [
          {
            "description": "Token to confirm email",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token",
              "description": "Token to confirm email"
            },
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "307": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Get all users",
        "operationId": "get_all_users_users__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.users.schemas.OutUser__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["distributor", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create User",
        "description": "Create a new user",
        "operationId": "create_user_users__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/invite-url/{user_id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get invite url for user",
        "description": "Get invite url for user",
        "operationId": "get_invite_url_users_me_invite_url__user_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutInviteToken_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/password": {
      "put": {
        "tags": ["Users"],
        "summary": "Update Login Data",
        "description": "Update password of this user",
        "operationId": "update_login_data_users_password_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/export": {
      "get": {
        "tags": ["Users"],
        "summary": "Export Users",
        "description": "Export all users in csv format",
        "operationId": "export_users_users_export_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User",
        "description": "Get a user",
        "operationId": "get_user_users__user_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update User",
        "description": "Update a user",
        "operationId": "update_user_users__user_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete User",
        "description": "Delete a user",
        "operationId": "delete_user_users__user_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/users/invite-viscan-scin-users": {
      "post": {
        "tags": ["Users"],
        "summary": "Invite Viscan Scin Users",
        "description": "Invite viscan scin users",
        "operationId": "invite_viscan_scin_users_organizations_me_users_invite_viscan_scin_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteViscanScinUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.management.users.schemas.OutUser__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/users/invite-cloud-users": {
      "post": {
        "tags": ["Users"],
        "summary": "Invite Cloud Users",
        "description": "Invite cloud users",
        "operationId": "invite_cloud_users_organizations_me_users_invite_cloud_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteCloudUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.management.users.schemas.OutUser__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{user_id}/scin-app-user/password": {
      "post": {
        "tags": ["Users"],
        "summary": "Set Scin App User Password",
        "description": "Set Scin App User Password",
        "operationId": "set_scin_app_user_password_users__user_id__scin_app_user_password_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_set_scin_app_user_password_users__user_id__scin_app_user_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/{user_id}/scope-permissions": {
      "put": {
        "tags": ["Users"],
        "summary": "Update User Scope Permissions",
        "description": "Update user scope permissions",
        "operationId": "update_user_scope_permissions_users__user_id__scope_permissions_put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScopePermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/helpcenter-info": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User Helpcenter Info",
        "description": "Get user helpcenter info",
        "operationId": "get_user_helpcenter_info_users_me_helpcenter_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUserHelpcenterInfo_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/me/loops-email-settings": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User Loops Email Settings",
        "description": "Get user loops email settings",
        "operationId": "get_user_loops_email_settings_users_me_loops_email_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_LoopsEmailListSettings_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update User Loops Email Settings",
        "description": "Update user loops email settings",
        "operationId": "update_user_loops_email_settings_users_me_loops_email_settings_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoopsEmailListSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_LoopsEmailListSettings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/licenses/": {
      "get": {
        "tags": ["Licenses"],
        "summary": "Get all licenses",
        "description": "Get all licenses",
        "operationId": "get_all_licenses_licenses__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.licenses.schemas.OutLicense__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["distributor", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/licenses/{license_id}": {
      "get": {
        "tags": ["Licenses"],
        "summary": "Get license by id",
        "description": "Get license by id",
        "operationId": "get_license_by_id_licenses__license_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "license_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLicense_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Licenses"],
        "summary": "Update license",
        "description": "Update license - Sodex Only",
        "operationId": "update_license_licenses__license_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "license_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLicense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLicense_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Licenses"],
        "summary": "Delete license",
        "description": "Delete license",
        "operationId": "delete_license_licenses__license_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "license_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/licenses/system": {
      "post": {
        "tags": ["Licenses"],
        "summary": "Create system license",
        "description": "Create system license",
        "operationId": "create_system_license_licenses_system_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSystemLicense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutLicense_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/users/{user_id}/switch-license": {
      "put": {
        "tags": ["Licenses"],
        "summary": "Switch a user license",
        "description": "Switch a user license - switch",
        "operationId": "switch_user_license_users__user_id__switch_license_put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "user_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchUserLicense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUser_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/licenses": {
      "get": {
        "tags": ["Licenses"],
        "summary": "Get all licenses in my organization",
        "description": "Get all licenses in my organization",
        "operationId": "get_my_organizations_licenses_organizations_me_licenses_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.licenses.schemas.OutLicense__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/users/licenses": {
      "get": {
        "tags": ["Licenses"],
        "summary": "Get all users licenses in my organization",
        "description": "Get all users licenses in my organization",
        "operationId": "get_my_organizations_users_licenses_organizations_me_users_licenses_get",
        "parameters": [
          {
            "description": "Skip documents",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Skip",
              "description": "Skip documents",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit documents",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Limit",
              "description": "Limit documents",
              "default": 200
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Filter assigned licenses",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Assigned",
              "description": "Filter assigned licenses"
            },
            "name": "assigned",
            "in": "query"
          },
          {
            "description": "Filter by license type",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserLicenseTypes"
                }
              ],
              "description": "Filter by license type"
            },
            "name": "license_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.licenses.schemas.OutLicense__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["organization_admin"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/licenses": {
      "get": {
        "tags": ["Licenses"],
        "summary": "Get all licenses in organization",
        "description": "Get all licenses in organization",
        "operationId": "get_organizations_licenses_organizations__organization_id__licenses_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.licenses.schemas.OutLicense__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get all organizations",
        "description": "Get all organizations",
        "operationId": "get_all_organizations_organizations__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.organizations.schemas.OutOrganization__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["distributor", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Organizations"],
        "summary": "Create new organization",
        "description": "Create new organization",
        "operationId": "create_organization_organizations__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputOrganization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/confirm-invoice-email": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Confirm Invoice Email",
        "operationId": "confirm_invoice_email_organizations_confirm_invoice_email_get",
        "parameters": [
          {
            "description": "Token to confirm invoice email",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token",
              "description": "Token to confirm invoice email"
            },
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "307": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/me": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get current organization",
        "description": "Get current organization",
        "operationId": "my_organization_organizations_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Organizations"],
        "summary": "Update my organization",
        "description": "Update my organization",
        "operationId": "update_my_organization_organizations_me_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeOrganization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/support-info": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get support info for my organization",
        "description": "Get support info for my organization",
        "operationId": "my_organization_support_info_organizations_me_support_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSupportInfo_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/access": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get organizations the user has access to",
        "description": "Get organizations the user has access to -> relevant for distributors",
        "operationId": "my_organization_access_organizations_me_access_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.v2.management.organizations.schemas.OutOrganization__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/countries": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get all countries",
        "description": "Get all countries",
        "operationId": "get_all_countries_organizations_countries_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.core.schemas.OutCountry__"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/me/users": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get all users in my organization",
        "description": "Get all users in my organization",
        "operationId": "get_my_organizations_users_organizations_me_users_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.users.schemas.OutUser__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/valid-billing": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Check if organization has valid billing information",
        "description": "Check if organization has valid billing information",
        "operationId": "check_valid_billing_organizations_me_valid_billing_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get organization by id",
        "description": "Get organization by id",
        "operationId": "get_organization_by_id_organizations__organization_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Organizations"],
        "summary": "Update organization",
        "description": "Update organization",
        "operationId": "update_organization_organizations__organization_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Organizations"],
        "summary": "Delete organization",
        "description": "Delete organization",
        "operationId": "delete_organization_organizations__organization_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/users": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get all users in organization",
        "description": "Get all users in organization",
        "operationId": "get_organizations_users_organizations__organization_id__users_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.users.schemas.OutUser__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/stripe-settings": {
      "put": {
        "tags": ["Organizations"],
        "summary": "Update stripe settings for my organization",
        "description": "Update stripe settings for my organization",
        "operationId": "update_my_organization_stripe_settings_organizations_me_stripe_settings_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationStripeSettings"
                  }
                ],
                "title": "Data",
                "description": "Stripe settings for organization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/customer": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Create customer organization",
        "description": "Create customer organization of my reseller organization",
        "operationId": "create_reseller_customer_organization_organizations_me_customer_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCustomerOrganization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["distributor", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/give-access-to": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Give organization access to another one",
        "description": "Give organization access to another one",
        "operationId": "give_organization_access_to_organizations__organization_id__give_access_to_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_give_organization_access_to_organizations__organization_id__give_access_to_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/remove-access-to": {
      "delete": {
        "tags": ["Organizations"],
        "summary": "Remove organization access to another one",
        "description": "Remove organization access to another one",
        "operationId": "remove_organization_access_to_organizations__organization_id__remove_access_to_delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Organization Remove Access Id"
            },
            "name": "organization_remove_access_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations-tax-id-used": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Check if tax id is already used",
        "description": "Check if tax id is already used",
        "operationId": "check_tax_id_used_organizations_tax_id_used_get",
        "parameters": [
          {
            "description": "Tax id to check",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tax Id",
              "description": "Tax id to check"
            },
            "name": "tax_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/organizations/trial-signup": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Organization Trial Signup",
        "operationId": "organization_trial_signup_organizations_trial_signup_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InTrialSignup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/paid-signup": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Organization Paid Signup",
        "operationId": "organization_paid_signup_organizations_paid_signup_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InPaidSignup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/me/reseller-token": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Reseller Token",
        "operationId": "get_reseller_token_organizations_me_reseller_token_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/dji-flighthub-credentials": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get My Org Dji Flightub Credentials",
        "operationId": "get_my_org_dji_flightub_credentials_organizations_me_dji_flighthub_credentials_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutDjiFlighthubCredentials_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "organization_admin",
              "sodex",
              "distributor"
            ]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/white-label-logo": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get My Org Whitelabel",
        "operationId": "get_my_org_whitelabel_organizations_me_white_label_logo_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/white-label-logo": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Org Whitelabel",
        "operationId": "get_org_whitelabel_organizations__organization_id__white_label_logo_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/dv-usage-check": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Stat Check Dv Usage",
        "operationId": "stat_check_dv_usage_organizations__organization_id__dv_usage_check_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/send-open-invoices": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Send Open Invoices",
        "operationId": "send_open_invoices_organizations__organization_id__send_open_invoices_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/invoices/{invoice_id}/send": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Send Invoice",
        "operationId": "send_invoice_organizations__organization_id__invoices__invoice_id__send_post",
        "parameters": [
          {
            "description": "Invoice id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Invoice Id",
              "description": "Invoice id"
            },
            "name": "invoice_id",
            "in": "path"
          },
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/restart-trial": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Restart Trial",
        "operationId": "restart_trial_organizations__organization_id__restart_trial_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Trial days to extend to set",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Trial Days",
              "description": "Trial days to extend to set"
            },
            "name": "trial_days",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/start-extended-trial": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Start Extended Trial",
        "operationId": "start_extended_trial_organizations__organization_id__start_extended_trial_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrganization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/me/meta-export": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Export My Organization Meta",
        "operationId": "export_my_organization_meta_organizations_me_meta_export_post",
        "parameters": [
          {
            "description": "Delimiter to use for the CSV file",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Csv Delimiter",
              "description": "Delimiter to use for the CSV file",
              "default": ";"
            },
            "name": "csv_delimiter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": ["organization_admin"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/meta-export": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Export Organization Meta",
        "operationId": "export_organization_meta_organizations__organization_id__meta_export_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Delimiter to use for the CSV file",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Csv Delimiter",
              "description": "Delimiter to use for the CSV file",
              "default": ";"
            },
            "name": "csv_delimiter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProcessingJob_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/": {
      "get": {
        "tags": ["Systems"],
        "summary": "Get All Systems",
        "description": "Get all systems",
        "operationId": "get_all_systems_systems__get",
        "parameters": [
          {
            "description": "Excludes system that have 'copy' in their name or the 'is_copied' bool is true",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Exclude Copy Systems",
              "description": "Excludes system that have 'copy' in their name or the 'is_copied' bool is true",
              "default": true
            },
            "name": "exclude_copy_systems",
            "in": "query"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Systems",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.systems.schemas.OutSystem__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "distributor"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me": {
      "get": {
        "tags": ["Systems"],
        "summary": "Get my system",
        "description": "Get my system",
        "operationId": "get_my_system_systems_me_get",
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Systems"],
        "summary": "Update My System",
        "description": "Update this system",
        "operationId": "update_my_system_systems_me_put",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}": {
      "get": {
        "tags": ["Systems"],
        "summary": "Get System By Id",
        "description": "Get a system by id",
        "operationId": "get_system_by_id_systems__system_id__get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      },
      "put": {
        "tags": ["Systems"],
        "summary": "Update System By Id",
        "description": "Update a system by id",
        "operationId": "update_system_by_id_systems__system_id__put",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Systems"],
        "summary": "Delete System By Id",
        "description": "Delete a system by id",
        "operationId": "delete_system_by_id_systems__system_id__delete",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "sodex"]
          }
        ]
      }
    },
    "/systems/compact": {
      "post": {
        "tags": ["Systems"],
        "summary": "Create Compact System",
        "description": "Create a compact system",
        "operationId": "create_compact_system_systems_compact_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCompactSystem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/4dvision": {
      "post": {
        "tags": ["Systems"],
        "summary": "Create 4Dvision System",
        "description": "Create a 4dvision system",
        "operationId": "create_4dvision_system_systems_4dvision_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input4DVisionSystem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/any-type": {
      "post": {
        "tags": ["Systems"],
        "summary": "Create system",
        "description": "Create system",
        "operationId": "create_system_systems_any_type_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputBaseSystem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/configuration": {
      "post": {
        "tags": ["Systems"],
        "summary": "Create System Config",
        "description": "Create a empty system configuration",
        "operationId": "create_system_config_systems__system_id__configuration_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "If the configuration got created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/systems/{system_id}/freeze": {
      "post": {
        "tags": ["Systems"],
        "summary": "Freeze System",
        "description": "Freeze a system by id",
        "operationId": "freeze_system_systems__system_id__freeze_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_freeze_system_systems__system_id__freeze_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "System",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/{system_id}/assets/auth/private": {
      "get": {
        "tags": ["Systems", "systems-sensor-data"],
        "summary": "Get a signed s3 url for private assets",
        "description": "Get a signed s3 url for private assets that allows access to captured images related to the sensor data",
        "operationId": "get_systems_private_assets_systems__system_id__assets_auth_private_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/systems": {
      "get": {
        "tags": ["Systems"],
        "summary": "Get all systems in my organization",
        "description": "Get all systems in my organization",
        "operationId": "get_my_organizations_systems_organizations_me_systems_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.systems.schemas.OutSystem__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/systems": {
      "get": {
        "tags": ["Systems"],
        "summary": "Get all systems in organization",
        "description": "Get all systems in organization",
        "operationId": "get_organizations_systems_organizations__organization_id__systems_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.systems.schemas.OutSystem__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/monthly-license-period": {
      "post": {
        "tags": ["Systems"],
        "summary": "Start System Monthly License Period",
        "description": "Start System Monthly License Period",
        "operationId": "start_system_monthly_license_period_systems__system_id__monthly_license_period_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/components/": {
      "get": {
        "tags": ["Components"],
        "summary": "Get all components",
        "description": "Get all components",
        "operationId": "get_all_components_components__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.components.schemas.OutComponent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          },
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "post": {
        "tags": ["Components"],
        "summary": "Create new component",
        "description": "Create new component",
        "operationId": "create_component_components__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputComponent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutComponent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/me/components": {
      "get": {
        "tags": ["Components"],
        "summary": "Get My Components",
        "description": "Get all components of this system",
        "operationId": "get_my_components_systems_me_components_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Components of this system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.components.schemas.OutComponent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/components/cameras": {
      "get": {
        "tags": ["Components"],
        "summary": "Get My Cameras",
        "description": "Get all cameras of this system",
        "operationId": "get_my_cameras_systems_me_components_cameras_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cameras of this system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.components.schemas.OutComponent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/components/cameras": {
      "get": {
        "tags": ["Components"],
        "summary": "Get System Cameras",
        "description": "Get all cameras of this system",
        "operationId": "get_system_cameras_systems__system_id__components_cameras_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cameras of this system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.components.schemas.OutComponent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/systems/{system_id}/components": {
      "get": {
        "tags": ["Components"],
        "summary": "Get System Components",
        "description": "Get all components of this system",
        "operationId": "get_system_components_systems__system_id__components_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Components of this system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.components.schemas.OutComponent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          }
        ]
      }
    },
    "/components/{component_id}": {
      "get": {
        "tags": ["Components"],
        "summary": "Get component by id",
        "description": "Get component by id",
        "operationId": "get_component_by_id_components__component_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "component_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutComponent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["Components"],
        "summary": "Update component",
        "description": "Update component",
        "operationId": "update_component_components__component_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "component_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateComponent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutComponent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Components"],
        "summary": "Delete component",
        "description": "Delete component",
        "operationId": "delete_component_components__component_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "component_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/components/has-uhf-receiver": {
      "get": {
        "tags": ["Components"],
        "summary": "Check if system has uhf receiver",
        "description": "Check if system has uhf receiver",
        "operationId": "get_system_uhf_receiver_systems__system_id__components_has_uhf_receiver_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/releases/": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get all releases - Sodex only",
        "description": "Get all releases",
        "operationId": "get_all_releases_releases__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.management.releases.schemas.OutRelease__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/releases/{release_id}": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get release by id",
        "description": "Get release by id",
        "operationId": "get_release_by_id_releases__release_id__get",
        "parameters": [
          {
            "description": "Release unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Release unique MongoDB Object-ID as string",
              "description": "Release unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "release_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutRelease_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          }
        ]
      },
      "put": {
        "tags": ["Releases"],
        "summary": "Update release",
        "description": "Update release",
        "operationId": "update_release_releases__release_id__put",
        "parameters": [
          {
            "description": "Release unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Release unique MongoDB Object-ID as string",
              "description": "Release unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "release_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelease"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutRelease_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["Releases"],
        "summary": "Delete release",
        "description": "Delete release",
        "operationId": "delete_release_releases__release_id__delete",
        "parameters": [
          {
            "description": "Release unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Release unique MongoDB Object-ID as string",
              "description": "Release unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "release_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/systems/me/release-download": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get release download url for system",
        "description": "Get release download url for system",
        "operationId": "get_release_download_url_for_system_systems_me_release_download_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReleaseApp"
            },
            "name": "app",
            "in": "query"
          },
          {
            "description": "If not set, latest version by build_date will be used",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+\\.\\d+\\.\\d+$",
              "title": "Version",
              "description": "If not set, latest version by build_date will be used"
            },
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/me/release": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get system release",
        "description": "Get system release",
        "operationId": "get_system_release_systems_me_release_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReleaseApp"
            },
            "name": "app",
            "in": "query"
          },
          {
            "description": "If not set, the release type set in the relase config of system will be used",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReleaseTypes"
                }
              ],
              "description": "If not set, the release type set in the relase config of system will be used"
            },
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutRelease_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/release-download": {
      "get": {
        "tags": ["Releases"],
        "summary": "Get signed url for release download",
        "description": "Get signed url for release download",
        "operationId": "get_release_download_url_release_download_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReleaseApp"
            },
            "name": "app",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReleaseTypes"
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "If not set, latest version by build_date will be used",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+\\.\\d+\\.\\d+$",
              "title": "Version",
              "description": "If not set, latest version by build_date will be used"
            },
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system"]
          }
        ]
      }
    },
    "/releases": {
      "post": {
        "tags": ["Releases"],
        "summary": "Create release",
        "description": "Create release",
        "operationId": "create_release_releases_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_release_releases_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutRelease_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/system-subscriptions/": {
      "get": {
        "tags": ["SystemSubscriptions"],
        "summary": "Get all SystemSubscriptions",
        "description": "Get all SystemSubscriptions. Sodex only.",
        "operationId": "get_all_system_subscriptions_system_subscriptions__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.management.systemsubscriptions.model.OutSystemSubscription__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/system-subscriptions": {
      "get": {
        "tags": ["SystemSubscriptions"],
        "summary": "Get my organization SystemSubscriptions",
        "description": "Get my organization SystemSubscriptions",
        "operationId": "get_my_organization_system_subscriptions_organizations_me_system_subscriptions_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.management.systemsubscriptions.model.OutSystemSubscription__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/system-subscriptions": {
      "get": {
        "tags": ["SystemSubscriptions"],
        "summary": "Get organization SystemSubscriptions",
        "description": "Get organization SystemSubscriptions. Sodex Only",
        "operationId": "get_organization_system_subscriptions_organizations__organization_id__system_subscriptions_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.management.systemsubscriptions.model.OutSystemSubscription__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/system-subscriptions": {
      "get": {
        "tags": ["SystemSubscriptions"],
        "summary": "Get System SystemSubscriptions",
        "description": "Get System SystemSubscriptions",
        "operationId": "get_system_system_subscriptions_systems__system_id__system_subscriptions_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.management.systemsubscriptions.model.OutSystemSubscription__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      },
      "post": {
        "tags": ["SystemSubscriptions"],
        "summary": "Create SystemSubscription",
        "description": "Create SystemSubscription. Sodex Only.",
        "operationId": "create_system_subscription_systems__system_id__system_subscriptions_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSystemSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/system-subscriptions/{system_subscription_id}": {
      "get": {
        "tags": ["SystemSubscriptions"],
        "summary": "Get SystemSubscription by id",
        "description": "Get SystemSubscription by id",
        "operationId": "get_system_subscription_by_id_system_subscriptions__system_subscription_id__get",
        "parameters": [
          {
            "description": "SystemSubscription unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemSubscription unique MongoDB Object-ID as string",
              "description": "SystemSubscription unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_subscription_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["SystemSubscriptions"],
        "summary": "Update SystemSubscription",
        "description": "Update SystemSubscription. Sodex Only.",
        "operationId": "update_system_subscription_system_subscriptions__system_subscription_id__put",
        "parameters": [
          {
            "description": "SystemSubscription unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemSubscription unique MongoDB Object-ID as string",
              "description": "SystemSubscription unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_subscription_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["SystemSubscriptions"],
        "summary": "Delete SystemSubscription",
        "description": "Delete SystemSubscription. Sodex Only.",
        "operationId": "delete_system_subscription_system_subscriptions__system_subscription_id__delete",
        "parameters": [
          {
            "description": "SystemSubscription unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemSubscription unique MongoDB Object-ID as string",
              "description": "SystemSubscription unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_subscription_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/system-subscriptions/create-start": {
      "post": {
        "tags": ["SystemSubscriptions"],
        "summary": "Create and start SystemSubscription",
        "description": "Create and start SystemSubscription. Sodex Only.",
        "operationId": "create_and_start_system_subscription_systems__system_id__system_subscriptions_create_start_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSystemSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth-clients/": {
      "get": {
        "tags": ["AuthClients"],
        "summary": "Get all AuthClients - Sodex only",
        "description": "Get all AuthClients",
        "operationId": "get_all_auth_clients_auth_clients__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.authclients.model.OutAuthClient__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/auth-client": {
      "get": {
        "tags": ["AuthClients"],
        "summary": "Get my organization AuthClient",
        "description": "Get my organization AuthClient",
        "operationId": "get_my_organization_auth_clients_organizations_me_auth_client_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAuthClient_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/organizations/{organization_id}/auth-clients": {
      "get": {
        "tags": ["AuthClients"],
        "summary": "Get organization AuthClients",
        "description": "Get organization AuthClients",
        "operationId": "get_organization_auth_clients_organizations__organization_id__auth_clients_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.authclients.model.OutAuthClient__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": ["AuthClients"],
        "summary": "Create AuthClient",
        "description": "Create AuthClient",
        "operationId": "create_auth_client_organizations__organization_id__auth_clients_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputAuthClient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAuthClient_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth-clients/{auth_client_id}": {
      "get": {
        "tags": ["AuthClients"],
        "summary": "Get AuthClient by id",
        "description": "Get AuthClient by id",
        "operationId": "get_auth_client_by_id_auth_clients__auth_client_id__get",
        "parameters": [
          {
            "description": "AuthClient unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AuthClient unique MongoDB Object-ID as string",
              "description": "AuthClient unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "auth_client_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAuthClient_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "put": {
        "tags": ["AuthClients"],
        "summary": "Update AuthClient",
        "description": "Update AuthClient",
        "operationId": "update_auth_client_auth_clients__auth_client_id__put",
        "parameters": [
          {
            "description": "AuthClient unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AuthClient unique MongoDB Object-ID as string",
              "description": "AuthClient unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "auth_client_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAuthClient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutAuthClient_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      },
      "delete": {
        "tags": ["AuthClients"],
        "summary": "Delete AuthClient",
        "description": "Delete AuthClient",
        "operationId": "delete_auth_client_auth_clients__auth_client_id__delete",
        "parameters": [
          {
            "description": "AuthClient unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "AuthClient unique MongoDB Object-ID as string",
              "description": "AuthClient unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "auth_client_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/subscriptions": {
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get my organization Subscriptions",
        "description": "Get my organization Subscriptions",
        "operationId": "get_my_organization_subscriptions_organizations_me_subscriptions_get",
        "parameters": [
          {
            "description": "Filter by only billed subscriptions.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Billed",
              "description": "Filter by only billed subscriptions.",
              "default": true
            },
            "name": "billed",
            "in": "query"
          },
          {
            "description": "Filter by only credited subscriptions.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Credited",
              "description": "Filter by only credited subscriptions.",
              "default": false
            },
            "name": "credited",
            "in": "query"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.subscriptions.model.OutSubscription__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/subscriptions/{subscription_id}": {
      "get": {
        "tags": ["Subscriptions"],
        "summary": "Get Subscription by id",
        "description": "Get Subscription by id",
        "operationId": "get_subscription_by_id_subscriptions__subscription_id__get",
        "parameters": [
          {
            "description": "Subscription unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Subscription unique MongoDB Object-ID as string",
              "description": "Subscription unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      },
      "put": {
        "tags": ["Subscriptions"],
        "summary": "Update Subscription",
        "description": "Update Subscription",
        "operationId": "update_subscription_subscriptions__subscription_id__put",
        "parameters": [
          {
            "description": "Subscription unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Subscription unique MongoDB Object-ID as string",
              "description": "Subscription unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSubscription_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base"]
          }
        ]
      }
    },
    "/orders/": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get all Orders - Sodex only",
        "description": "Get all Orders",
        "operationId": "get_all_orders_orders__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.shop.orders.model.OutOrder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/organizations/me/orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get my organization Orders",
        "description": "Get my organization Orders",
        "operationId": "get_my_organization_orders_organizations_me_orders_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.shop.orders.model.OutOrder__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/orders/{order_id}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get Order by id",
        "description": "Get Order by id",
        "operationId": "get_order_by_id_orders__order_id__get",
        "parameters": [
          {
            "description": "Order unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Order unique MongoDB Object-ID as string",
              "description": "Order unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/organizations/me/invoices": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get my organization Invoices",
        "description": "Get my organization Invoices",
        "operationId": "get_my_organization_invoices_organizations_me_invoices_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.shop.invoices.model.OutInvoice__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/invoices/{invoice_id}": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get Invoice by id",
        "description": "Get Invoice by id",
        "operationId": "get_invoice_by_id_invoices__invoice_id__get",
        "parameters": [
          {
            "description": "Invoice unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Invoice unique MongoDB Object-ID as string",
              "description": "Invoice unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "invoice_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutInvoice_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/admin/systems/{system_id}/license-switch": {
      "post": {
        "tags": ["shop"],
        "summary": "Switch system license for free",
        "description": "Switch system license for free",
        "operationId": "system_license_switch_admin_systems__system_id__license_switch_post",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_system_license_switch_admin_systems__system_id__license_switch_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/admin/language-translations/file": {
      "get": {
        "tags": ["language-translations"],
        "summary": "Download a file with translations",
        "description": "Download a file with translations - Sodex Only",
        "operationId": "download_file_with_translations_admin_language_translations_file_get",
        "parameters": [
          {
            "description": "Name of the file to download",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Name",
              "description": "Name of the file to download"
            },
            "name": "file_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["language-translations"],
        "summary": "Upload a file with translations",
        "description": "Upload a file with translations - Sodex Only",
        "operationId": "upload_file_with_translations_admin_language_translations_file_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_with_translations_admin_language_translations_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/admin/language-translations": {
      "post": {
        "tags": ["language-translations"],
        "summary": "Create new language translation",
        "description": "Create new language translation - Sodex Only",
        "operationId": "create_translation_admin_language_translations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__v2__admin__translations__schemas__InputTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/admin/applications/": {
      "get": {
        "tags": ["applications"],
        "summary": "Get all applications - Sodex only",
        "description": "Get all applications",
        "operationId": "get_all_applications_admin_applications__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.admin.applications.schemas.OutApplications__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/applications/{application_id}": {
      "get": {
        "tags": ["applications"],
        "summary": "Get applications by id",
        "description": "Get applications by id",
        "operationId": "get_applications_by_id_admin_applications__application_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "application_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApplications_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["applications"],
        "summary": "Update applications",
        "description": "Update applications",
        "operationId": "update_applications_admin_applications__application_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "application_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApplications_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["applications"],
        "summary": "Delete applications",
        "description": "Delete applications",
        "operationId": "delete_applications_admin_applications__application_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "application_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/applications": {
      "post": {
        "tags": ["applications"],
        "summary": "Create new applications",
        "description": "Create new applications",
        "operationId": "create_applications_admin_applications_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputApplications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutApplications_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/admin/features/": {
      "get": {
        "tags": ["features"],
        "summary": "Get all features - Sodex only",
        "description": "Get all features",
        "operationId": "get_all_features_admin_features__get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.admin.features.schemas.OutFeature__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          }
        ]
      }
    },
    "/admin/features/{feature_id}": {
      "get": {
        "tags": ["features"],
        "summary": "Get feature by id",
        "description": "Get feature by id",
        "operationId": "get_feature_by_id_admin_features__feature_id__get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "feature_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFeature_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": ["features"],
        "summary": "Update feature",
        "description": "Update feature",
        "operationId": "update_feature_admin_features__feature_id__put",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "feature_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeature"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFeature_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["features"],
        "summary": "Delete feature",
        "description": "Delete feature",
        "operationId": "delete_feature_admin_features__feature_id__delete",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "feature_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_bool_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/features": {
      "post": {
        "tags": ["features"],
        "summary": "Create new feature",
        "description": "Create new feature",
        "operationId": "create_feature_admin_features_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputFeature"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutFeature_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cloud-shop/stripe-webhook-v2": {
      "post": {
        "tags": ["cloud shop"],
        "summary": "Stripe Webhook V2",
        "operationId": "stripe_webhook_v2_admin_cloud_shop_stripe_webhook_v2_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/admin/cloud-shop/create-default-payment-method": {
      "post": {
        "tags": ["cloud shop"],
        "summary": "Create Default Payment Method",
        "operationId": "create_default_payment_method_admin_cloud_shop_create_default_payment_method_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["organization_admin", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/cloud-shop/create-customer-portal-session": {
      "post": {
        "tags": ["cloud shop"],
        "summary": "Create Customer Portal Session",
        "operationId": "create_customer_portal_session_admin_cloud_shop_create_customer_portal_session_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["organization_admin", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/cloud-shop/create-checkout-session": {
      "post": {
        "tags": ["cloud shop"],
        "summary": "Create Checkout Session",
        "operationId": "create_checkout_session_admin_cloud_shop_create_checkout_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPurchase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["organization_admin", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/cloud-shop/token/session/{session_id}": {
      "get": {
        "tags": ["cloud shop"],
        "summary": "Get Checkout Session",
        "operationId": "get_checkout_session_admin_cloud_shop_token_session__session_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_TokenInfo_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cloud-shop/token/portal/{config_id}": {
      "get": {
        "tags": ["cloud shop"],
        "summary": "Get Portal Session",
        "operationId": "get_portal_session_admin_cloud_shop_token_portal__config_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Config Id"
            },
            "name": "config_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_TokenInfo_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cloud-shop/organizations/me/payment-method-default": {
      "get": {
        "tags": ["cloud shop"],
        "summary": "Get My Payment Method",
        "operationId": "get_my_payment_method_admin_cloud_shop_organizations_me_payment_method_default_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPaymentMethod_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["organization_admin", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/cloud-shop/organizations/{organization_id}/payment-method-default": {
      "get": {
        "tags": ["cloud shop"],
        "summary": "Get Organization Payment Method",
        "operationId": "get_organization_payment_method_admin_cloud_shop_organizations__organization_id__payment_method_default_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutPaymentMethod_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["organization_admin", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/cloud-shop/organizations/me/subscriptions": {
      "get": {
        "tags": ["cloud shop"],
        "summary": "Get My Subscriptions",
        "operationId": "get_my_subscriptions_admin_cloud_shop_organizations_me_subscriptions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.sdxstripe.subscription.subscription_model.SubscriptionModel__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["organization_admin", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/cloud-shop/organizations/{organization_id}/subscriptions": {
      "get": {
        "tags": ["cloud shop"],
        "summary": "Get Organization Subscriptions",
        "operationId": "get_organization_subscriptions_admin_cloud_shop_organizations__organization_id__subscriptions_get",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "organization_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_src.sdxstripe.subscription.subscription_model.SubscriptionModel__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/cloud-shop/shop-v2/purchase-products": {
      "post": {
        "tags": ["cloud shop"],
        "summary": "Purchase Products",
        "operationId": "purchase_products_admin_cloud_shop_shop_v2_purchase_products_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputPurchase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutOrder_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/organizations/me/products": {
      "get": {
        "tags": ["products"],
        "summary": "Get my organization Products",
        "description": "Get my organization Products",
        "operationId": "get_my_organization_products_admin_organizations_me_products_get",
        "parameters": [
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.mongodb.collections.shop.products.model.OutProduct__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/products/{product_id}": {
      "get": {
        "tags": ["products"],
        "summary": "Get Product by id",
        "description": "Get Product by id",
        "operationId": "get_product_by_id_admin_products__product_id__get",
        "parameters": [
          {
            "description": "Product unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Product unique MongoDB Object-ID as string",
              "description": "Product unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutProduct_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest", "sodex"]
          }
        ]
      }
    },
    "/sdxccs/coordinate-systems/global": {
      "get": {
        "tags": ["sdxccs"],
        "summary": "Get global coordinate systems",
        "description": "Get global coordinate systems.",
        "operationId": "get_systems_global_sdxccs_coordinate_systems_global_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_str__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          }
        ]
      }
    },
    "/sdxccs/coordinate-systems/local-global-connected": {
      "get": {
        "tags": ["sdxccs"],
        "summary": "Get local coordinate systems by global system",
        "description": "Get local coordinate systems by global system.",
        "operationId": "get_local_systems_by_global_system_sdxccs_coordinate_systems_local_global_connected_get",
        "parameters": [
          {
            "description": "Global system name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Global System",
              "description": "Global system name"
            },
            "name": "global_system",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_list_str__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          }
        ]
      }
    },
    "/sdxccs/coordinate-systems/pipeline": {
      "get": {
        "tags": ["sdxccs"],
        "summary": "Get source to target system pipeline",
        "description": "Get source to target system pipeline.",
        "operationId": "get_source_to_target_system_pipeline_sdxccs_coordinate_systems_pipeline_get",
        "parameters": [
          {
            "description": "Source system name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source System",
              "description": "Source system name"
            },
            "name": "source_system",
            "in": "query"
          },
          {
            "description": "Target system name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target System",
              "description": "Target system name"
            },
            "name": "target_system",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          }
        ]
      }
    },
    "/sdxccs/coordinate-systems-v2/": {
      "get": {
        "tags": ["sdxccs"],
        "summary": "Get all coordinate systems",
        "description": "Get all coordinate systems",
        "operationId": "get_all_coordinate_systems_sdxccs_coordinate_systems_v2__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_cloudtools.sodex.viscantransformation.schemas.ViscanCoordinateSystem__"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          }
        ]
      }
    },
    "/sdxccs/coordinate-systems/transformation-pipeline": {
      "get": {
        "tags": ["sdxccs"],
        "summary": "Get coordinate system transformation pipeline",
        "description": "Get coordinate system transformation pipeline.",
        "operationId": "get_coordinate_system_transformation_pipeline_sdxccs_coordinate_systems_transformation_pipeline_get",
        "parameters": [
          {
            "description": "Source coordinate system name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Cs",
              "description": "Source coordinate system name"
            },
            "name": "source_cs",
            "in": "query"
          },
          {
            "description": "Target coordinate system name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target Cs",
              "description": "Target coordinate system name"
            },
            "name": "target_cs",
            "in": "query"
          },
          {
            "description": "Vertical coordinate system name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target Vertical Cs",
              "description": "Vertical coordinate system name"
            },
            "name": "target_vertical_cs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["user"]
          }
        ]
      }
    },
    "/measurementapi/snapshots/{snapshot_id}/measure": {
      "post": {
        "tags": ["Measurement API"],
        "summary": "Measure In Snapshot",
        "description": "Perform measurements on points within a specific snapshot.\n\nTakes a list of points (either in global coordinates [lat/lon] or local coordinates [easting/northing])\nand performs requested measurements. All points must use the same coordinate system.\n\nSupported measurements:\n- Individual point heights and coordinates\n- Line measurements (2D/3D) - Requires min. 2 points\n- Area measurements (2D/3D) - Requires min. 3 points\n- Volume measurements - Requires min. 3 points\n- Cross section measurements - Requires min. 2 points\n\nAll distance measurements are in meters, coordinates in degrees.\n\nIf a reference_terrain_id is provided, height differences to the reference terrain\nwill be included in point measurements where available.\n\nArgs:\n    snapshot: The snapshot to measure in\n    user: The authenticated user\n    data: Measurement configuration including:\n        - points: List of points to measure (all must use same coordinate system)\n        - reference_terrain_id: Optional ID for height difference calculations\n        - manipulated: Whether to use manipulated version of snapshot\n        - line_config: Optional config for 2D/3D line measurements\n        - area_config: Optional config for 2D/3D area measurements\n        - volume_measurement_config: Optional config for volume calculations\n        - cross_section_config: Optional config for cross section measurements\n\nReturns:\n    GenericResponse containing OutMeasurementResult with:\n        - points: List of measured points with heights and optional reference differences\n        - line_result: Optional 2D/3D lengths if requested\n        - area_result: Optional 2D/3D areas if requested\n        - volume_result: Optional positive/negative volumes if requested\n        - cross_section_result: Optional cross section points if requested",
        "operationId": "measure_in_snapshot_measurementapi_snapshots__snapshot_id__measure_post",
        "parameters": [
          {
            "description": "Unique snapshot MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique snapshot MongoDB Object-ID as string",
              "description": "Unique snapshot MongoDB Object-ID as string"
            },
            "example": "64a2987fa30e493fecbbfe42",
            "name": "snapshot_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InMeasurementConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurementResult_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/measurementapi/layers/{layer_id}/measure": {
      "post": {
        "tags": ["Measurement API"],
        "summary": "Measure In Layer",
        "description": "Perform measurements on points within a specific layer.\n\nTakes a list of points (either in global coordinates [lat/lon] or local coordinates [easting/northing])\nand performs requested measurements. All points must use the same coordinate system.\n\nSupported measurements:\n- Individual point heights and coordinates\n- Line measurements (2D/3D) - Requires min. 2 points\n- Area measurements (2D/3D) - Requires min. 3 points\n- Volume measurements - Requires min. 3 points\n- Cross section measurements - Requires min. 2 points\n\nAll distance measurements are in meters, coordinates in degrees.\n\nIf a reference_terrain_id is provided, height differences to the reference terrain\nwill be included in point measurements where available.\n\nArgs:\n    layer: The layer to measure in\n    user: The authenticated user\n    data: Measurement configuration including:\n        - points: List of points to measure (all must use same coordinate system)\n        - reference_terrain_id: Optional ID for height difference calculations\n        - manipulated: Whether to use manipulated version of layer\n        - line_config: Optional config for 2D/3D line measurements\n        - area_config: Optional config for 2D/3D area measurements\n        - volume_measurement_config: Optional config for volume calculations\n        - cross_section_config: Optional config for cross section measurements\n\nReturns:\n    GenericResponse containing OutMeasurementResult with:\n        - points: List of measured points with heights and optional reference differences\n        - line_result: Optional 2D/3D lengths if requested\n        - area_result: Optional 2D/3D areas if requested\n        - volume_result: Optional positive/negative volumes if requested\n        - cross_section_result: Optional cross section points if requested",
        "operationId": "measure_in_layer_measurementapi_layers__layer_id__measure_post",
        "parameters": [
          {
            "description": "Unique MongoDB ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "MongoDB unique ID",
              "description": "Unique MongoDB ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "layer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InMeasurementConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutMeasurementResult_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/system-events": {
      "get": {
        "tags": ["System Events"],
        "summary": "Get System SystemEvents",
        "description": "Get System SystemEvents",
        "operationId": "get_system_system_events_systems__system_id__system_events_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sdxglobal.systemevents.schemas.OutSystemEvent__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/system-events/{system_event_id}": {
      "get": {
        "tags": ["System Events"],
        "summary": "Get SystemEvent by id",
        "description": "Get SystemEvent by id",
        "operationId": "get_system_event_by_id_system_events__system_event_id__get",
        "parameters": [
          {
            "description": "SystemEvent unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemEvent unique MongoDB Object-ID as string",
              "description": "SystemEvent unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_event_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemEvent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/systems/{system_id}/system-events/event-types": {
      "get": {
        "tags": ["System Events"],
        "summary": "Get SystemEvent Types",
        "description": "Get SystemEvent Types",
        "operationId": "get_system_event_types_systems__system_id__system_events_event_types_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_str__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          }
        ]
      }
    },
    "/systems/{system_id}/system-event-groups": {
      "get": {
        "tags": ["System Event Groups"],
        "summary": "Get System SystemEventGroups",
        "description": "Get System SystemEventGroups",
        "operationId": "get_system_system_event_groups_systems__system_id__system_event_groups_get",
        "parameters": [
          {
            "description": "Unique system MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Unique system MongoDB Object-ID as string",
              "description": "Unique system MongoDB Object-ID as string"
            },
            "example": "61fa724e17af8914fbd8baf7",
            "name": "system_id",
            "in": "path"
          },
          {
            "description": "Skip the first n results",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum":  true,
              "title": "Skip",
              "description": "Skip the first n results",
              "default": 0
            },
            "example": 0,
            "name": "skip",
            "in": "query"
          },
          {
            "description": "Limit the number of results",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": false,
              "title": "Limit",
              "description": "Limit the number of results",
              "default": 200
            },
            "example": 200,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sort",
              "description": "Sort the results. Use +/- to sort ascending/descending. No +/- means ascending. Separate through ','. Order is important.\n\n!!! IF SORT IS PROVIDED IT WILL BE EXECUTED FIRST !!! Limit and skip will be executed after sorting."
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Query",
              "description": "Query the results.                                        Schema: key'OPERATOR'value. Separate multiple through ','. Embedded documents marked with a (dot).                                        Supported operators:                                        = (equals)                                        != (not equals)                                        > (greater than)                                        < (less than)                                        >= (greater than or equal)                                        <= (less than or equal)                                        * (string contains)                                         ! (string does not contains)                                            Example: name*John,address.street=1st Street -> finds everyone that has John in the name and live ins 1st Street"
            },
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_List_src.v2.sdxglobal.systemseventgroups.schemas.OutSystemEventGroup__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/system-event-groups/{system_event_group_id}": {
      "get": {
        "tags": ["System Event Groups"],
        "summary": "Get SystemEventGroup by id",
        "description": "Get SystemEventGroup by id",
        "operationId": "get_system_event_group_by_id_system_event_groups__system_event_group_id__get",
        "parameters": [
          {
            "description": "SystemEventGroup unique MongoDB Object-ID as string",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 24,
              "minLength": 24,
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "SystemEventGroup unique MongoDB Object-ID as string",
              "description": "SystemEventGroup unique MongoDB Object-ID as string"
            },
            "example": "5f9f1c5b9c9d1b0b8c8b4567",
            "name": "system_event_group_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutSystemEventGroup_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["cloud_base", "guest"]
          },
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/healthcheck": {
      "get": {
        "summary": "Healthcheck",
        "operationId": "healthcheck_healthcheck_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/socket-io-url": {
      "get": {
        "summary": "Get sdxengine socketio url",
        "description": "Get sdxengine socketio url",
        "operationId": "get_sdxengine_socket_url_socket_io_url_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResponse_OutUrl_"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": ["system", "user"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddAdmins": {
        "properties": {
          "admin_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Admin Ids",
            "description": "List of user ids to add to the project",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["admin_ids"],
        "title": "AddAdmins"
      },
      "AddMembers": {
        "properties": {
          "member_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Member Ids",
            "description": "List of user ids to add to the project",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["member_ids"],
        "title": "AddMembers"
      },
      "AddSystems": {
        "properties": {
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of system ids to add to the project",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["system_ids"],
        "title": "AddSystems"
      },
      "AddTranslations": {
        "properties": {
          "translation_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Translation"
              }
            ],
            "description": "type of translation"
          },
          "translations": {
            "type": "object",
            "title": "Translations",
            "description": "translations"
          }
        },
        "type": "object",
        "required": ["translation_type", "translations"],
        "title": "AddTranslations"
      },
      "Applications": {
        "type": "string",
        "enum": [
          "cloud_prod",
          "cloud_dev",
          "sdxengine_prod",
          "sdxengine_dev",
          "on_demand_prod",
          "on_demand_dev",
          "processing_prod",
          "processing_dev"
        ],
        "title": "Applications",
        "description": "An enumeration."
      },
      "ArtificialintelligenceData": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "if the ai data is enabled or not",
            "default": false
          }
        },
        "type": "object",
        "title": "ArtificialintelligenceData"
      },
      "AutostartProblemProjects": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID which the geofence of the autostart overlaps with"
          },
          "system_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of system IDs which are enabled for autostart in the overlapping project"
          }
        },
        "type": "object",
        "required": ["project_id", "system_ids"],
        "title": "AutostartProblemProjects"
      },
      "BaseAPI": {
        "properties": {
          "ip": {
            "type": "string",
            "title": "Ip",
            "description": "IP address of the api"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "Port of the api"
          }
        },
        "type": "object",
        "title": "BaseAPI"
      },
      "BaseCrossSection": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cross section"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__crosssections__constants__CrossSectionType"
              }
            ],
            "description": "Type of the cross section"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Object ID of either the snapshot or tobe terrain"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the cross section"
          }
        },
        "type": "object",
        "required": ["name", "type"],
        "title": "BaseCrossSection"
      },
      "BaseLanguages": {
        "type": "string",
        "enum": ["de", "en", "fr", "nl"],
        "title": "BaseLanguages",
        "description": "An enumeration."
      },
      "BaseSharingMeta": {
        "properties": {},
        "type": "object",
        "title": "BaseSharingMeta"
      },
      "Body_add_files_to_quicktask_quicktasks__quicktask_id__files_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "title": "Body_add_files_to_quicktask_quicktasks__quicktask_id__files_post"
      },
      "Body_add_images_to_scantask_scantasks__scantask_id__images_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": ["files"],
        "title": "Body_add_images_to_scantask_scantasks__scantask_id__images_post"
      },
      "Body_calculate_images_credits_cost_files_calculate_credits_cost_post": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "File Ids",
            "description": "List of file ids"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotSdxProcessingSettings"
              }
            ],
            "title": "Settings",
            "description": "Processing settings"
          }
        },
        "type": "object",
        "required": ["file_ids", "settings"],
        "title": "Body_calculate_images_credits_cost_files_calculate_credits_cost_post"
      },
      "Body_check_autostart_geofence_system_add_autostart_geofences__autostart_geofence_id__system_add_check_post": {
        "properties": {
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id to for which the autostart should be enabled"
          }
        },
        "type": "object",
        "required": ["system_id"],
        "title": "Body_check_autostart_geofence_system_add_autostart_geofences__autostart_geofence_id__system_add_check_post"
      },
      "Body_create_assets_file_files_assets_post": {
        "properties": {
          "s3_key": {
            "type": "string",
            "minLength": 1,
            "title": "S3 Key",
            "description": "S3 key of the file"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "File to upload"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_create_assets_file_files_assets_post"
      },
      "Body_create_calendar_event_calendar__calendar_id__event_post": {
        "properties": {
          "event_name": {
            "type": "string",
            "maxLength": 255,
            "title": "Event Name"
          },
          "event_description": {
            "type": "string",
            "maxLength": 1500,
            "title": "Event Description"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the event"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the event"
          },
          "day_event": {
            "type": "boolean",
            "title": "Day Event",
            "description": "Is it an event that takes the whole day",
            "default": false
          },
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": ["start_at", "end_at"],
        "title": "Body_create_calendar_event_calendar__calendar_id__event_post"
      },
      "Body_create_dji_pins_projects__project_id__dji_pins_post": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "File Ids",
            "description": "File ids of the dji images"
          },
          "folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Folder Id",
            "description": "Folder id of the dji images"
          }
        },
        "type": "object",
        "title": "Body_create_dji_pins_projects__project_id__dji_pins_post"
      },
      "Body_create_file_files__post": {
        "properties": {
          "parent_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Parent Id",
            "description": "Parent id of the file"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__constants__FileType"
              }
            ],
            "description": "Type of the file",
            "default": "base"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "File to upload"
          }
        },
        "type": "object",
        "required": ["parent_id", "file"],
        "title": "Body_create_file_files__post"
      },
      "Body_create_image_in_layer_layers__layer_id__images_post": {
        "properties": {
          "image": {
            "type": "string",
            "format": "binary",
            "title": "Image"
          },
          "lidar_xyz": {
            "type": "string",
            "format": "binary",
            "title": "Lidar Xyz"
          },
          "is_data": {
            "type": "string",
            "format": "binary",
            "title": "Is Data"
          },
          "while_moving": {
            "type": "boolean",
            "title": "While Moving",
            "default": false
          }
        },
        "type": "object",
        "required": ["image"],
        "title": "Body_create_image_in_layer_layers__layer_id__images_post"
      },
      "Body_create_image_in_project_projects__project_id__images_post": {
        "properties": {
          "image": {
            "type": "string",
            "format": "binary",
            "title": "Image"
          },
          "lidar_xyz": {
            "type": "string",
            "format": "binary",
            "title": "Lidar Xyz"
          },
          "is_data": {
            "type": "string",
            "format": "binary",
            "title": "Is Data"
          },
          "while_moving": {
            "type": "boolean",
            "title": "While Moving",
            "default": false
          }
        },
        "type": "object",
        "required": ["image"],
        "title": "Body_create_image_in_project_projects__project_id__images_post"
      },
      "Body_create_layer_data_for_layer_layers__layer_id__data_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "global_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Global Pos",
            "description": "Global position of the layer data in radians"
          },
          "local_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Local Pos",
            "description": "Local position of the layer data in cm"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the layer data in radians"
          },
          "mb_to_remove": {
            "type": "number",
            "title": "Mb To Remove",
            "description": "MB to remove from the extension pack layer data",
            "default": 0.001
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_create_layer_data_for_layer_layers__layer_id__data_post"
      },
      "Body_create_my_system_aidata_systems_me_aidatas_post": {
        "properties": {
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the aidata"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the aidata"
          },
          "npy_file": {
            "type": "string",
            "format": "binary",
            "title": "Npy File",
            "description": "Numpy file"
          },
          "tar_file": {
            "type": "string",
            "format": "binary",
            "title": "Tar File",
            "description": "Tar file"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          }
        },
        "type": "object",
        "required": ["npy_file", "tar_file"],
        "title": "Body_create_my_system_aidata_systems_me_aidatas_post"
      },
      "Body_create_pin_form_projects__project_id__pins_form_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "tablet_files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Tablet Files"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the pin"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the pin"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__pins__constants__PinType"
              }
            ],
            "description": "Type of the pin",
            "default": "ref_img"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the pin"
          },
          "bearings": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Bearings",
            "description": "Bearings of the pin -> for system pins only"
          },
          "tag_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tag Id",
            "description": "Tag id linked to the pin"
          },
          "image_b64": {
            "type": "string",
            "title": "Image B64",
            "description": "Base64 of the image"
          },
          "cam_pos": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              }
            ],
            "description": "Position of camera that took image for pin -> for ref_img pins only"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot id linked to the pin"
          },
          "telekom_classification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomFileClassification"
              }
            ],
            "description": "Telekom classification of the pin"
          }
        },
        "type": "object",
        "required": ["location"],
        "title": "Body_create_pin_form_projects__project_id__pins_form_post"
      },
      "Body_create_potree_share_token_potrees__potree_id__share_post": {
        "properties": {
          "duration": {
            "type": "integer",
            "title": "Duration",
            "description": "Duration in minutes the token is valid for"
          }
        },
        "type": "object",
        "required": ["duration"],
        "title": "Body_create_potree_share_token_potrees__potree_id__share_post"
      },
      "Body_create_quicktask_systems__system_id__quicktasks_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the quicktask"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the quicktask"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Due date of the quicktask"
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Note of the quicktask"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "Body_create_quicktask_systems__system_id__quicktasks_post"
      },
      "Body_create_release_releases_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "app": {
            "$ref": "#/components/schemas/ReleaseApp"
          },
          "type": {
            "$ref": "#/components/schemas/ReleaseTypes"
          },
          "build_date": {
            "type": "string",
            "format": "date-time",
            "title": "Build Date",
            "description": "If not set, datetime of upload will be used"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "title": "Version"
          }
        },
        "type": "object",
        "required": ["file", "app", "type", "version"],
        "title": "Body_create_release_releases_post"
      },
      "Body_create_system_datacapturing_systems_me_datacapturing_uploaded_post": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "S3 key of the datacapturing"
          },
          "tag": {
            "type": "string",
            "title": "Tag",
            "description": "Tag of the datacapturing"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "Date of the datacapturing"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "Body_create_system_datacapturing_systems_me_datacapturing_uploaded_post"
      },
      "Body_create_system_datacapturing_systems_me_datacapturings_post": {
        "properties": {
          "tag": {
            "type": "string",
            "title": "Tag",
            "description": "Tag of the datacapturing"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "Date of the datacapturing"
          },
          "data": {
            "type": "string",
            "format": "binary",
            "title": "Data"
          }
        },
        "type": "object",
        "title": "Body_create_system_datacapturing_systems_me_datacapturings_post"
      },
      "Body_freeze_system_systems__system_id__freeze_post": {
        "properties": {
          "new_organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "New Organization Id"
          },
          "original_organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Original Organization Id"
          }
        },
        "type": "object",
        "required": ["new_organization_id", "original_organization_id"],
        "title": "Body_freeze_system_systems__system_id__freeze_post"
      },
      "Body_get_coordinates_from_dxf_file_projects__project_id__dxf_coordinates_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_get_coordinates_from_dxf_file_projects__project_id__dxf_coordinates_post"
      },
      "Body_get_sharing_token_sharings__sharing_id__token_post": {
        "properties": {
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password to access the sharing if password is required"
          }
        },
        "type": "object",
        "title": "Body_get_sharing_token_sharings__sharing_id__token_post"
      },
      "Body_give_organization_access_to_organizations__organization_id__give_access_to_post": {
        "properties": {
          "organization_access_to_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Access To Id",
            "description": "Organization id to give access to"
          }
        },
        "type": "object",
        "required": ["organization_access_to_id"],
        "title": "Body_give_organization_access_to_organizations__organization_id__give_access_to_post"
      },
      "Body_set_scin_app_user_password_users__user_id__scin_app_user_password_post": {
        "properties": {
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Plain password"
          }
        },
        "type": "object",
        "required": ["password"],
        "title": "Body_set_scin_app_user_password_users__user_id__scin_app_user_password_post"
      },
      "Body_system_license_switch_admin_systems__system_id__license_switch_post": {
        "properties": {
          "license": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__management__licenses__constants__SystemLicenseTypes"
              }
            ],
            "description": "License type to upgrade to",
            "default": "machine_license_plus"
          },
          "receiver_emails": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Receiver Emails",
            "description": "Emails that receive an update for this action",
            "default": [
              "nils.naumann@sodex.at",
              "ralf.pfefferkorn@sodex.at",
              "maximilian.fenkart@sodex.at"
            ]
          },
          "requested_by": {
            "type": "string",
            "title": "Requested By",
            "description": "Name of the person who requested this action",
            "default": "Bernhard"
          }
        },
        "type": "object",
        "title": "Body_system_license_switch_admin_systems__system_id__license_switch_post"
      },
      "Body_update_calendar_event_files_calendar_events__calendar_event_id__files_put": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "title": "Body_update_calendar_event_files_calendar_events__calendar_event_id__files_put"
      },
      "Body_update_many_cable_points_cable_points_many_put": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable point"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the cable point"
          },
          "update_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Update Ids",
            "description": "List of cable point IDs to update"
          }
        },
        "type": "object",
        "required": ["update_ids"],
        "title": "Body_update_many_cable_points_cable_points_many_put"
      },
      "Body_upload_file_stream_projects__project_id__files_upload_stream_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_file_stream_projects__project_id__files_upload_stream_post"
      },
      "Body_upload_file_to_cable_point_cable_points__cable_point_id__file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file. If not set will be the same as the uploaded file name."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the file"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_file_to_cable_point_cable_points__cable_point_id__file_post"
      },
      "Body_upload_file_to_checkpoints_point_checkpoints__checkpoint_id__file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file. If not set will be the same as the uploaded file name."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the file"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_file_to_checkpoints_point_checkpoints__checkpoint_id__file_post"
      },
      "Body_upload_file_to_storedlines_point_stored_lines__stored_lines_id__point__point_id__file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file. If not set will be the same as the uploaded file name."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the file"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_file_to_storedlines_point_stored_lines__stored_lines_id__point__point_id__file_post"
      },
      "Body_upload_file_to_storedpoints_point_stored_points__stored_points_id__point__point_id__file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file. If not set will be the same as the uploaded file name."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the file"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_file_to_storedpoints_point_stored_points__stored_points_id__point__point_id__file_post"
      },
      "Body_upload_file_with_translations_admin_language_translations_file_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": ["files"],
        "title": "Body_upload_file_with_translations_admin_language_translations_file_post"
      },
      "Body_upload_snapshot_files_snapshots__snapshot_id__files_post": {
        "properties": {
          "images": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Images",
            "description": "Images of the snapshot",
            "default": []
          },
          "s3_changed": {
            "type": "string",
            "format": "binary",
            "title": "S3 Changed",
            "description": "S3 changed file"
          }
        },
        "type": "object",
        "required": ["s3_changed"],
        "title": "Body_upload_snapshot_files_snapshots__snapshot_id__files_post"
      },
      "Body_validate_lok_file_coordinatesystems_lok_file_validation_post": {
        "properties": {
          "lok_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Lok File Id"
          },
          "grd_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Grd File Id"
          },
          "lcg_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Lcg File Id"
          }
        },
        "type": "object",
        "required": ["lok_file_id"],
        "title": "Body_validate_lok_file_coordinatesystems_lok_file_validation_post"
      },
      "Buckets": {
        "type": "string",
        "enum": [
          "ASSETS",
          "LOGS",
          "RELEASES",
          "SNAPSHOTS",
          "TILESETS",
          "POTREE",
          "CTA",
          "DJI",
          "DRONE_HARMONY",
          "VISCAN",
          "PHOTOGRAMMETRY"
        ],
        "title": "Buckets",
        "description": "An enumeration."
      },
      "CAPACITIES_HIGH_RES": {
        "type": "number",
        "enum": [5000, 10000, 20000],
        "title": "CAPACITIES_HIGH_RES",
        "description": "An enumeration."
      },
      "CAPACITIES_MODE_3D": {
        "type": "number",
        "enum": [5000, 10000],
        "title": "CAPACITIES_MODE_3D",
        "description": "An enumeration."
      },
      "CHGeoTifKey": {
        "type": "string",
        "enum": [
          "coordinatesystems/ch_geo2004.tif",
          "coordinatesystems/ch_geo2004_htrans.tif"
        ],
        "title": "CHGeoTifKey",
        "description": "An enumeration."
      },
      "CamPosition": {
        "type": "string",
        "enum": ["cam_front", "cam_left", "cam_right", "cam_arm"],
        "title": "CamPosition",
        "description": "An enumeration."
      },
      "CamType": {
        "type": "string",
        "enum": ["ark", "ark_rest", "irayple", "fake"],
        "title": "CamType",
        "description": "An enumeration."
      },
      "CanceledSubscriptionItems": {
        "properties": {
          "stripe_product_id": {
            "type": "string",
            "title": "Stripe Product Id",
            "description": "Stripe Product ID"
          },
          "product_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Product Id",
            "description": "Product ID"
          },
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Product"
              }
            ],
            "title": "Product",
            "description": "Product"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Canceled quantity",
            "default": 1
          },
          "canceled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Canceled At",
            "description": "Canceled at date"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount",
            "description": "Total amount of the item"
          }
        },
        "type": "object",
        "required": [
          "stripe_product_id",
          "product_id",
          "product",
          "canceled_at",
          "total_amount"
        ],
        "title": "CanceledSubscriptionItems"
      },
      "ChartType": {
        "type": "string",
        "enum": ["series", "cumulated"],
        "title": "ChartType",
        "description": "An enumeration."
      },
      "CloudLicenseName": {
        "type": "string",
        "enum": ["SDX-Cloud User - Basic", "SDX-Cloud User - Guest"],
        "title": "CloudLicenseName",
        "description": "An enumeration."
      },
      "Color": {
        "type": "string",
        "enum": [
          "#FCA5A5",
          "#EF4444",
          "#B91C1C",
          "#7F1D1D",
          "#450A0A",
          "#FDBA74",
          "#F97316",
          "#C2410C",
          "#7C2D12",
          "#431407",
          "#FEF08A",
          "#FDE047",
          "#FACC15",
          "#EAB308",
          "#A16207",
          "#BEF264",
          "#A3E635",
          "#84CC16",
          "#65A30D",
          "#3F6212",
          "#99F6E4",
          "#5EEAD4",
          "#14B8A6",
          "#0E7490",
          "#134E4A",
          "#7DD3FC",
          "#38BDF8",
          "#2563EB",
          "#1E40AF",
          "#172554",
          "#C084FC",
          "#9333EA",
          "#7E22CE",
          "#6B21A8",
          "#3B0764",
          "#FFFFFF",
          "#94A3B8",
          "#475569",
          "#1E293B",
          "#000000"
        ],
        "title": "Color",
        "description": "Sodex color palette enum"
      },
      "ColorizedOption": {
        "type": "string",
        "enum": [
          "low_res",
          "height_gradient",
          "sodex_gradient",
          "intensity_grayscale",
          "intensity_rgb",
          "colored_by_camera"
        ],
        "title": "ColorizedOption",
        "description": "An enumeration."
      },
      "CommitVidocSnapshot": {
        "properties": {
          "s3_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Keys",
            "description": "S3 keys of the snapshot"
          }
        },
        "type": "object",
        "required": ["s3_keys"],
        "title": "CommitVidocSnapshot"
      },
      "ComponentTypes": {
        "type": "string",
        "enum": [
          "lidar",
          "camera",
          "sim_card",
          "tablet",
          "tablet_doc",
          "ipc",
          "gnss",
          "antenna",
          "uhf_receiver"
        ],
        "title": "ComponentTypes",
        "description": "An enumeration."
      },
      "Configuration": {
        "type": "string",
        "enum": [
          "custom",
          "control_points",
          "calibration_file",
          "machine_control"
        ],
        "title": "Configuration",
        "description": "An enumeration."
      },
      "ConvertionSystem": {
        "type": "string",
        "enum": ["metric", "imperial"],
        "title": "ConvertionSystem",
        "description": "An enumeration."
      },
      "CoordinateSystemCalibrationFile": {
        "properties": {
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "The calibration file either .lok or .dc"
          },
          "gcg_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Gcg File Id",
            "description": "Gcg file"
          },
          "lcg_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Lcg File Id",
            "description": "Lcg file"
          },
          "grd_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Grd File Id",
            "description": "Grd file"
          }
        },
        "type": "object",
        "required": ["file_id"],
        "title": "CoordinateSystemCalibrationFile"
      },
      "CoordinateSystemControlPoints": {
        "properties": {
          "epsg_code": {
            "type": "integer",
            "title": "Epsg Code"
          },
          "global_datum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalDatum"
              }
            ],
            "description": "Global datum"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points"
          },
          "transformation_matrix": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Transformation Matrix",
            "description": "Transformation matrix"
          }
        },
        "type": "object",
        "required": ["epsg_code", "global_datum", "points"],
        "title": "CoordinateSystemControlPoints"
      },
      "CoordinateSystemCustom": {
        "properties": {
          "height_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HeightType"
              }
            ],
            "description": "What height type is used"
          },
          "position_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PositionType"
              }
            ],
            "description": "What position type is used"
          },
          "position": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PositionEPSG"
              },
              {
                "$ref": "#/components/schemas/PositionTransformation"
              }
            ],
            "title": "Position"
          },
          "height": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HeightCustomGeoidModel"
              },
              {
                "$ref": "#/components/schemas/HeightSlope"
              },
              {
                "$ref": "#/components/schemas/HeightOffset"
              },
              {
                "$ref": "#/components/schemas/HeightGeoidModel"
              },
              {
                "$ref": "#/components/schemas/HeightEllipsoid"
              }
            ],
            "title": "Height"
          }
        },
        "type": "object",
        "required": ["height_type", "position_type", "position", "height"],
        "title": "CoordinateSystemCustom"
      },
      "CoordinateSystemType": {
        "type": "string",
        "enum": ["ellipsoidal", "cartesic"],
        "title": "CoordinateSystemType",
        "description": "An enumeration."
      },
      "CoordinateType": {
        "type": "string",
        "enum": ["global", "local"],
        "title": "CoordinateType",
        "description": "An enumeration."
      },
      "CreateFileByPutUrl": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__schemas__S3UploadPart"
            },
            "type": "array",
            "title": "Parts",
            "description": "Parts to upload"
          },
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "ID of the upload"
          },
          "parent_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Id",
            "description": "ID of the parent file"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__constants__FileType"
              }
            ],
            "description": "Type of the file",
            "default": "base"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          }
        },
        "type": "object",
        "required": ["parts", "upload_id", "s3_key"],
        "title": "CreateFileByPutUrl"
      },
      "CrossSectionExportFileType": {
        "type": "string",
        "enum": [".csv", ".dxf"],
        "title": "CrossSectionExportFileType",
        "description": "An enumeration."
      },
      "CutAndFillTimeSeries": {
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Time of the timeseries"
          },
          "cut": {
            "type": "number",
            "title": "Cut",
            "description": "Cut volume of the timeseries",
            "default": 0
          },
          "fill": {
            "type": "number",
            "title": "Fill",
            "description": "Fill volume of the timeseries",
            "default": 0
          }
        },
        "type": "object",
        "required": ["timestamp"],
        "title": "CutAndFillTimeSeries"
      },
      "DataConvertCoordsGlobalLocal": {
        "properties": {
          "local_points": {
            "items": {
              "$ref": "#/components/schemas/ResponseLocalPoints"
            },
            "type": "array",
            "title": "Local Points",
            "description": "Local coordinates for the given global points in meta"
          }
        },
        "type": "object",
        "required": ["local_points"],
        "title": "DataConvertCoordsGlobalLocal"
      },
      "DataConvertCoordsLocalGlobal": {
        "properties": {
          "global_points": {
            "items": {
              "$ref": "#/components/schemas/ResponseGlobalPoints"
            },
            "type": "array",
            "title": "Global Points",
            "description": "Global coordinates for the given local points in meta"
          }
        },
        "type": "object",
        "required": ["global_points"],
        "title": "DataConvertCoordsLocalGlobal"
      },
      "DataDeletePileGeofence": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the pile geofence deletion is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataDeletePileGeofence"
      },
      "DataDeleteProject": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the project deletion is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataDeleteProject"
      },
      "DataDeleteSdxCloudSnapshot": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the sdx cloud snapshot is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataDeleteSdxCloudSnapshot"
      },
      "DataMeasureRoverPoint": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting of measure point"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing of measure point"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height of measure point"
          },
          "scanned_ts": {
            "type": "number",
            "title": "Scanned Ts",
            "description": "Scanned timestamp of measure point"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "Scanned at of measure point"
          },
          "reference_diff": {
            "type": "number",
            "title": "Reference Diff",
            "description": "Tobe difference of measure point"
          },
          "soil_id": {
            "type": "string",
            "title": "Soil Id",
            "description": "Soil id of measure point"
          },
          "phase_id": {
            "type": "string",
            "title": "Phase Id",
            "description": "Phase id of measure point"
          },
          "system_id": {
            "type": "string",
            "title": "System Id",
            "description": "System id of measure point"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "DataMeasureRoverPoint"
      },
      "DataMeasureRoverPointLayer": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting of measure point"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing of measure point"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height of measure point"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "DataMeasureRoverPointLayer"
      },
      "DataProcess2DPlan": {
        "properties": {
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the 2D plan GeoJSON on the assets bucket"
          }
        },
        "type": "object",
        "required": ["s3_key"],
        "title": "DataProcess2DPlan"
      },
      "DataProcess3DLayerExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcess3DLayerExport"
      },
      "DataProcess3DLayerExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcess3DLayerExportExplorer"
      },
      "DataProcess3DMergedLayerExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcess3DMergedLayerExport"
      },
      "DataProcess3DMergedLayerExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcess3DMergedLayerExportExplorer"
      },
      "DataProcessAutomaticMeasurements": {
        "properties": {
          "measurement_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Measurement Ids",
            "description": "List of measurement ids"
          }
        },
        "type": "object",
        "required": ["measurement_ids"],
        "title": "DataProcessAutomaticMeasurements"
      },
      "DataProcessAutostartSystemAddCheck": {
        "properties": {
          "project_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Ids",
            "description": "List of project ids which the system has autostart enabled for and current geofence overlaps with"
          }
        },
        "type": "object",
        "required": ["project_ids"],
        "title": "DataProcessAutostartSystemAddCheck"
      },
      "DataProcessAutostartUpdateCheck": {
        "properties": {
          "problem_projects": {
            "items": {
              "$ref": "#/components/schemas/AutostartProblemProjects"
            },
            "type": "array",
            "title": "Problem Projects",
            "description": "List of projects which have a problem with the autostart",
            "default": []
          }
        },
        "type": "object",
        "title": "DataProcessAutostartUpdateCheck"
      },
      "DataProcessCableExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessCableExport"
      },
      "DataProcessCableExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessCableExportExplorer"
      },
      "DataProcessCableImport": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the cable import is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessCableImport"
      },
      "DataProcessControlPointsMatrix": {
        "properties": {
          "matrix": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Matrix",
            "description": "Matrix of control points"
          }
        },
        "type": "object",
        "required": ["matrix"],
        "title": "DataProcessControlPointsMatrix"
      },
      "DataProcessCrossSectionPoints": {
        "properties": {
          "height": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Height",
            "description": "List of height"
          },
          "distances": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Distances",
            "description": "List of distance"
          },
          "easting": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Easting",
            "description": "List of easting"
          },
          "northing": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Northing",
            "description": "List of northing"
          }
        },
        "type": "object",
        "required": ["height", "distances", "easting", "northing"],
        "title": "DataProcessCrossSectionPoints"
      },
      "DataProcessCrossSectionPointsExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessCrossSectionPointsExport"
      },
      "DataProcessDataset": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the dataset processing is finished",
            "default": true
          }
        },
        "type": "object",
        "title": "DataProcessDataset"
      },
      "DataProcessDjiFlightDetection": {
        "properties": {
          "dji_flight_infos": {
            "items": {
              "$ref": "#/components/schemas/ProcessedDetectedDjiFlightInfo"
            },
            "type": "array",
            "title": "Dji Flight Infos",
            "description": "List of detected flights"
          }
        },
        "type": "object",
        "required": ["dji_flight_infos"],
        "title": "DataProcessDjiFlightDetection"
      },
      "DataProcessDjiUnprocessedImages": {
        "properties": {
          "dji_image_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Image File Ids",
            "description": "List of processed dji image file ids"
          }
        },
        "type": "object",
        "required": ["dji_image_file_ids"],
        "title": "DataProcessDjiUnprocessedImages"
      },
      "DataProcessDjiWebhook": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of file ids"
          },
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "DJI dock id"
          }
        },
        "type": "object",
        "required": ["file_ids", "dji_dock_id"],
        "title": "DataProcessDjiWebhook"
      },
      "DataProcessDjiWebhookImages": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the dji webhook images processing is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessDjiWebhookImages"
      },
      "DataProcessDxfFileCoordinates": {
        "properties": {
          "coordinates": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coordinates",
            "description": "List of coordinates"
          }
        },
        "type": "object",
        "required": ["coordinates"],
        "title": "DataProcessDxfFileCoordinates"
      },
      "DataProcessExportPileBase": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of pile base"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessExportPileBase"
      },
      "DataProcessGeofenceDetectionBox": {
        "properties": {
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Detected geofence global coordinates in radians (lat, lon)"
          },
          "mask_s3_key": {
            "type": "string",
            "title": "Mask S3 Key",
            "description": "S3 key of the mask image"
          }
        },
        "type": "object",
        "required": ["geofence"],
        "title": "DataProcessGeofenceDetectionBox"
      },
      "DataProcessHighResLayerExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessHighResLayerExport"
      },
      "DataProcessHighResLayerExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessHighResLayerExportExplorer"
      },
      "DataProcessHighResMergedLayerExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessHighResMergedLayerExport"
      },
      "DataProcessHighResMergedLayerExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessHighResMergedLayerExportExplorer"
      },
      "DataProcessHighResV2LayerExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessHighResV2LayerExport"
      },
      "DataProcessImageFile": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the image file processing is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessImageFile"
      },
      "DataProcessImageLayer": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the image layer processing is finished",
            "default": true
          }
        },
        "type": "object",
        "title": "DataProcessImageLayer"
      },
      "DataProcessInvoice": {
        "properties": {
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the invoice PDF on the assets bucket"
          }
        },
        "type": "object",
        "required": ["s3_key"],
        "title": "DataProcessInvoice"
      },
      "DataProcessLayer": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the layer processing is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessLayer"
      },
      "DataProcessLayerData": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the layer processing is finished",
            "default": true
          }
        },
        "type": "object",
        "title": "DataProcessLayerData"
      },
      "DataProcessLineDetectionBox": {
        "properties": {
          "line": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Line",
            "description": "Detected line global coordinates in radians (lat, lon)"
          },
          "mask_s3_key": {
            "type": "string",
            "title": "Mask S3 Key",
            "description": "S3 key of the mask image"
          }
        },
        "type": "object",
        "required": ["line"],
        "title": "DataProcessLineDetectionBox"
      },
      "DataProcessLineExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessLineExport"
      },
      "DataProcessLokFileValidation": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the lok file validation is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessLokFileValidation"
      },
      "DataProcessMeasureArea": {
        "properties": {
          "area_3d": {
            "type": "number",
            "title": "Area 3D",
            "description": "Area in m²"
          },
          "area_2d": {
            "type": "number",
            "title": "Area 2D",
            "description": "Area in m²"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/ProcessedAreaPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "List of processed area points"
          }
        },
        "type": "object",
        "required": ["area_3d", "area_2d", "points"],
        "title": "DataProcessMeasureArea"
      },
      "DataProcessMeasureLayerArea": {
        "properties": {
          "area_3d": {
            "type": "number",
            "title": "Area 3D",
            "description": "Area in m²"
          },
          "area_2d": {
            "type": "number",
            "title": "Area 2D",
            "description": "Area in m²"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/ProcessedAreaPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "List of processed area points"
          }
        },
        "type": "object",
        "required": ["area_3d", "area_2d", "points"],
        "title": "DataProcessMeasureLayerArea"
      },
      "DataProcessMeasureLayerPile": {
        "properties": {
          "vol_pos": {
            "type": "number",
            "title": "Vol Pos",
            "description": "Volume of the pile"
          },
          "vol_neg": {
            "type": "number",
            "title": "Vol Neg",
            "description": "Volume of the pile"
          },
          "global_highest_point": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Global Highest Point",
            "description": "Highest point of the pile",
            "default": [0, 0, 0]
          },
          "global_lowest_point": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Global Lowest Point",
            "description": "Lowest point of the pile",
            "default": [0, 0, 0]
          }
        },
        "type": "object",
        "required": ["vol_pos", "vol_neg"],
        "title": "DataProcessMeasureLayerPile"
      },
      "DataProcessMeasureLayerPoint": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting of measure point"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing of measure point"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height of measure point"
          },
          "system_id": {
            "type": "string",
            "title": "System Id",
            "description": "System id of measure point"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "DataProcessMeasureLayerPoint"
      },
      "DataProcessMeasureLayerPoints": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/DataMeasureRoverPointLayer"
            },
            "type": "array",
            "title": "Points",
            "description": "List of processed measure points"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "DataProcessMeasureLayerPoints"
      },
      "DataProcessMeasurePile": {
        "properties": {
          "vol_pos": {
            "type": "number",
            "title": "Vol Pos",
            "description": "Volume of the pile"
          },
          "vol_neg": {
            "type": "number",
            "title": "Vol Neg",
            "description": "Volume of the pile"
          },
          "global_highest_point": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Global Highest Point",
            "description": "Highest point of the pile",
            "default": [0, 0, 0]
          },
          "global_lowest_point": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Global Lowest Point",
            "description": "Lowest point of the pile",
            "default": [0, 0, 0]
          },
          "local_coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Local Coords",
            "description": "Local coordinates of the pile corner points, easting, northing, height",
            "default": []
          },
          "global_coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Global Coords",
            "description": "Global coordinates of the pile corner points, lat, lon, alt",
            "default": []
          }
        },
        "type": "object",
        "required": ["vol_pos", "vol_neg"],
        "title": "DataProcessMeasurePile"
      },
      "DataProcessMeasurePoint": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting of measure point"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing of measure point"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height of measure point"
          },
          "scanned_ts": {
            "type": "number",
            "title": "Scanned Ts",
            "description": "Scanned timestamp of measure point"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "Scanned at of measure point"
          },
          "reference_diff": {
            "type": "number",
            "title": "Reference Diff",
            "description": "Tobe difference of measure point"
          },
          "soil_id": {
            "type": "string",
            "title": "Soil Id",
            "description": "Soil id of measure point"
          },
          "phase_id": {
            "type": "string",
            "title": "Phase Id",
            "description": "Phase id of measure point"
          },
          "system_id": {
            "type": "string",
            "title": "System Id",
            "description": "System id of measure point"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "DataProcessMeasurePoint"
      },
      "DataProcessMeasurePoints": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/DataMeasureRoverPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "List of processed measure points"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "DataProcessMeasurePoints"
      },
      "DataProcessMeasurementsExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessMeasurementsExport"
      },
      "DataProcessMeasurementsToTelekom": {
        "properties": {
          "geojson_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geojson File Id",
            "description": "Geojson file id of the transfered scan in the telekom project"
          }
        },
        "type": "object",
        "required": ["geojson_file_id"],
        "title": "DataProcessMeasurementsToTelekom"
      },
      "DataProcessOrganizationCSVExport": {
        "properties": {
          "project_users_s3_url": {
            "type": "string",
            "title": "Project Users S3 Url",
            "description": "S3 key of the project users CSV"
          }
        },
        "type": "object",
        "required": ["project_users_s3_url"],
        "title": "DataProcessOrganizationCSVExport"
      },
      "DataProcessOrthophoto": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the orthophoto processing is finished",
            "default": true
          }
        },
        "type": "object",
        "title": "DataProcessOrthophoto"
      },
      "DataProcessPgSdxCloudSnapshot": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the sdx cloud snapshot is finished"
          },
          "snapshot_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Job Id",
            "description": "Snapshot job id"
          },
          "orthophoto_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Orthophoto Job Id",
            "description": "Orthophoto job id"
          },
          "s3_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Keys",
            "description": "List of s3 keys of transferred files from azure blob to s3"
          },
          "las_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Las File Id",
            "description": "Las file id"
          },
          "folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Folder Id",
            "description": "Folder id"
          },
          "orthophoto_tiff_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Orthophoto Tiff File Id",
            "description": "Orthophoto tiff file id"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessPgSdxCloudSnapshot"
      },
      "DataProcessPhotoLayerExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessPhotoLayerExport"
      },
      "DataProcessPhotoLayerExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessPhotoLayerExportExplorer"
      },
      "DataProcessPhotoMergedLayerExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessPhotoMergedLayerExport"
      },
      "DataProcessPhotoMergedLayerExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessPhotoMergedLayerExportExplorer"
      },
      "DataProcessPhotogrammetryToSodex": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the photogrammetry to sodex is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessPhotogrammetryToSodex"
      },
      "DataProcessPileGeofence": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the pile geofence processing is finished",
            "default": true
          }
        },
        "type": "object",
        "title": "DataProcessPileGeofence"
      },
      "DataProcessPointHistory": {
        "properties": {
          "x": {
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "type": "array",
            "title": "X",
            "description": "List of timestamps"
          },
          "y": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Y",
            "description": "List of heights corresponding to the timestamps"
          }
        },
        "type": "object",
        "required": ["x", "y"],
        "title": "DataProcessPointHistory"
      },
      "DataProcessPotreeCrossSectionExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of potree cross section"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessPotreeCrossSectionExport"
      },
      "DataProcessPotreeExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of potree"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessPotreeExport"
      },
      "DataProcessPotreeMeasurementsExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessPotreeMeasurementsExport"
      },
      "DataProcessPotreePointcloudUrls": {
        "properties": {
          "octree": {
            "type": "string",
            "title": "Octree",
            "description": "URL of the bin file"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "description": "URL of the metadata file"
          },
          "hierarchy": {
            "type": "string",
            "title": "Hierarchy",
            "description": "URL of the hierarchy file"
          }
        },
        "type": "object",
        "required": ["octree", "metadata", "hierarchy"],
        "title": "DataProcessPotreePointcloudUrls"
      },
      "DataProcessProject3DTimelapse": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessProject3DTimelapse"
      },
      "DataProcessProjectMigration": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the project migration is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessProjectMigration"
      },
      "DataProcessProjectXmlExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessProjectXmlExport"
      },
      "DataProcessReferenceTerrain": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the reference terrain processing is finished",
            "default": true
          }
        },
        "type": "object",
        "title": "DataProcessReferenceTerrain"
      },
      "DataProcessSdxCloudSnapshot": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the sdx cloud snapshot is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessSdxCloudSnapshot"
      },
      "DataProcessSdxCloudSnapshotMoved": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the sdx cloud snapshot is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessSdxCloudSnapshotMoved"
      },
      "DataProcessSnapshot": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the snapshot processing is finished",
            "default": true
          }
        },
        "type": "object",
        "title": "DataProcessSnapshot"
      },
      "DataProcessSnapshotComparison": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the snapshot comparison is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessSnapshotComparison"
      },
      "DataProcessSnapshotDownload": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of snapshot"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessSnapshotDownload"
      },
      "DataProcessSnapshotExportExplorer": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of snapshot"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessSnapshotExportExplorer"
      },
      "DataProcessSnapshotFilesToTelekom": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the snapshot files to telekom is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessSnapshotFilesToTelekom"
      },
      "DataProcessSnapshotManipulation": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the snapshot manipulation is finished",
            "default": true
          },
          "num_processed_manipulations": {
            "type": "integer",
            "title": "Num Processed Manipulations",
            "description": "Number of processed manipulations"
          }
        },
        "type": "object",
        "title": "DataProcessSnapshotManipulation"
      },
      "DataProcessSnapshotManipulationDeleted": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the snapshot manipulation is finished",
            "default": true
          },
          "num_processed_manipulations": {
            "type": "integer",
            "title": "Num Processed Manipulations",
            "description": "Number of processed manipulations"
          }
        },
        "type": "object",
        "title": "DataProcessSnapshotManipulationDeleted"
      },
      "DataProcessSnapshotTransfer": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot id of the transfered snapshot in the new project"
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "DataProcessSnapshotTransfer"
      },
      "DataProcessSnapshotZip": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of image file ids"
          }
        },
        "type": "object",
        "required": ["file_ids"],
        "title": "DataProcessSnapshotZip"
      },
      "DataProcessSodexToPhotogrammetry": {
        "properties": {
          "image_s3_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Image S3 Keys",
            "description": "List of image s3 keys in the photogrammetry bucket"
          }
        },
        "type": "object",
        "required": ["image_s3_keys"],
        "title": "DataProcessSodexToPhotogrammetry"
      },
      "DataProcessSodexToViscanTransfer": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the sodex to viscann transfer is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessSodexToViscanTransfer"
      },
      "DataProcessStoredLinesExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessStoredLinesExport"
      },
      "DataProcessStoredPointsExport": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessStoredPointsExport"
      },
      "DataProcessTelekomPinsToTelekom": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of file ids"
          }
        },
        "type": "object",
        "required": ["file_ids"],
        "title": "DataProcessTelekomPinsToTelekom"
      },
      "DataProcessTelekomTransfer": {
        "properties": {
          "scan_id": {
            "type": "string",
            "title": "Scan Id",
            "description": "Scan id of the transfered scan in the telekom project"
          },
          "geojson_file_id": {
            "type": "string",
            "title": "Geojson File Id",
            "description": "Geojson file id of the transfered scan in the telekom project"
          }
        },
        "type": "object",
        "required": ["scan_id", "geojson_file_id"],
        "title": "DataProcessTelekomTransfer"
      },
      "DataProcessTimelapse": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "If the timelapse processing is finished"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessTimelapse"
      },
      "DataProcessVidocImages": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of file ids"
          }
        },
        "type": "object",
        "required": ["file_ids"],
        "title": "DataProcessVidocImages"
      },
      "DataProcessVidocImagesV2": {
        "properties": {
          "vidoc_images": {
            "items": {
              "$ref": "#/components/schemas/ProcessingOutputVidocImage"
            },
            "type": "array",
            "title": "Vidoc Images",
            "description": "List of output vidoc images"
          }
        },
        "type": "object",
        "required": ["vidoc_images"],
        "title": "DataProcessVidocImagesV2"
      },
      "DataProcessViscanScinSnapshot": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the viscann scin snapshot processing is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessViscanScinSnapshot"
      },
      "DataProcessViscanScinWebhook": {
        "properties": {
          "image_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Image File Ids",
            "description": "List of image file ids"
          }
        },
        "type": "object",
        "required": ["image_file_ids"],
        "title": "DataProcessViscanScinWebhook"
      },
      "DataProcessViscanScinWebhookImages": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the viscann scin webhook images processing is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessViscanScinWebhookImages"
      },
      "DataProcessViscanToSodexTransfer": {
        "properties": {
          "finished": {
            "type": "boolean",
            "title": "Finished",
            "description": "If the viscann to sodex transfer is finished"
          }
        },
        "type": "object",
        "required": ["finished"],
        "title": "DataProcessViscanToSodexTransfer"
      },
      "DataProcessZipDownload": {
        "properties": {
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "Signed cloudfront S3 url of layer"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "DataProcessZipDownload"
      },
      "DataProcessZipImages": {
        "properties": {
          "img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Img File Ids",
            "description": "List of image file ids"
          }
        },
        "type": "object",
        "required": ["img_file_ids"],
        "title": "DataProcessZipImages"
      },
      "DataSourceUser": {
        "type": "string",
        "enum": [
          "csv_file",
          "high_res",
          "dxf_file",
          "unidentified_file",
          "snapshot"
        ],
        "title": "DataSourceUser",
        "description": "An enumeration."
      },
      "DataTypes": {
        "type": "string",
        "enum": ["cut_fill"],
        "title": "DataTypes",
        "description": "An enumeration."
      },
      "DataVolumeName": {
        "type": "string",
        "enum": ["SDX-Cloud - Data Volume Storage: 1000GB"],
        "title": "DataVolumeName",
        "description": "An enumeration."
      },
      "DateFormat": {
        "type": "string",
        "enum": ["international", "eu", "ger", "us", "canada", "middle_east"],
        "title": "DateFormat",
        "description": "An enumeration."
      },
      "DatumTransformation": {
        "type": "string",
        "enum": ["molodensky", "7_parameter"],
        "title": "DatumTransformation",
        "description": "An enumeration."
      },
      "DefaultSnapshotSdxProcessingSettings": {
        "properties": {
          "feature_quality": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryTaskFeatureQuality"
              }
            ],
            "description": "Feature quality",
            "default": "high"
          },
          "pc_quality": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryTaskPcQuality"
              }
            ],
            "description": "PC quality",
            "default": "medium"
          },
          "orthophoto_resolution": {
            "type": "number",
            "minimum": 0.01,
            "title": "Orthophoto Resolution",
            "description": "Orthophoto resolution",
            "default": 1
          }
        },
        "type": "object",
        "title": "DefaultSnapshotSdxProcessingSettings"
      },
      "DjiStorageLocation": {
        "properties": {
          "access_key_id": {
            "type": "string",
            "title": "Access Key Id",
            "default": "AKIAYEWFPD4QX7UXYDXJ"
          },
          "access_key_secret": {
            "type": "string",
            "title": "Access Key Secret",
            "default": "3dIn6min6ArYF3RwGHkhvT05J4y3VOmJ1LttanVv"
          },
          "region": {
            "type": "string",
            "title": "Region",
            "default": "eu-central-1"
          },
          "bucket": {
            "type": "string",
            "title": "Bucket",
            "default": "sodex-dji"
          },
          "arn": {
            "type": "string",
            "title": "Arn",
            "default": "arn:aws:iam::559833620257:role/dji-flighthub2-role"
          },
          "role_session_name": {
            "type": "string",
            "title": "Role Session Name",
            "default": "djiFlightHub2"
          },
          "provider": {
            "type": "string",
            "title": "Provider",
            "default": "aws"
          }
        },
        "type": "object",
        "title": "DjiStorageLocation"
      },
      "ErrorCode": {
        "type": "string",
        "enum": [
          "invalid_login_credentials",
          "user_email_not_verified",
          "invalid_billing_data",
          "not_enough_pixel_credits"
        ],
        "title": "ErrorCode",
        "description": "An enumeration."
      },
      "ErrorData": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "ErrorData"
      },
      "ErrorTypes": {
        "type": "string",
        "enum": [
          "UNDEFINED",
          "POINT_OVERFLOW",
          "RAM_OVERFLOW",
          "POINT_OUT_OF_BOUNDS",
          "WORKER_CLASS_NOT_FOUND",
          "NO_WORKER_AVAILABLE",
          "WORKER_NOT_REACHABLE",
          "FAILED_TO_EXTRACT_ZIP",
          "FAILED_TO_PROCESS_SNAPSHOT",
          "COORDINATE_SYSTEM_MISMATCH"
        ],
        "title": "ErrorTypes",
        "description": "An enumeration."
      },
      "EventType": {
        "type": "string",
        "enum": ["user", "scan", "user_snapshot", "dji_dock_snapshot"],
        "title": "EventType",
        "description": "An enumeration."
      },
      "Export3DModeFiletype": {
        "type": "string",
        "enum": [".xyz", ".ply", ".las", ".e57", ".csv", ".pts"],
        "title": "Export3DModeFiletype",
        "description": "An enumeration."
      },
      "ExportCableFileType": {
        "type": "string",
        "enum": [".csv", ".dxf", ".shp"],
        "title": "ExportCableFileType",
        "description": "An enumeration."
      },
      "ExportDataset": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "timestamps": {
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "string",
                  "format": "date-time"
                }
              ]
            },
            "type": "array",
            "title": "Timestamps"
          },
          "values": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Values"
          }
        },
        "type": "object",
        "required": ["name", "values"],
        "title": "ExportDataset"
      },
      "ExportGraph": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id"
          },
          "filetype": {
            "type": "string",
            "title": "Filetype"
          },
          "language": {
            "$ref": "#/components/schemas/BaseLanguages"
          },
          "graph_setup": {
            "$ref": "#/components/schemas/GraphSetup"
          },
          "datasets": {
            "items": {
              "$ref": "#/components/schemas/ExportDataset"
            },
            "type": "array",
            "title": "Datasets"
          },
          "share_token": {
            "type": "string",
            "title": "Share Token"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "filetype",
          "language",
          "graph_setup",
          "datasets"
        ],
        "title": "ExportGraph"
      },
      "ExportHighResFiletype": {
        "type": "string",
        "enum": [".xyz", ".ply", ".las", ".e57", ".csv", ".pts", ".laz"],
        "title": "ExportHighResFiletype",
        "description": "An enumeration."
      },
      "ExportPileBaseFileType": {
        "type": "string",
        "enum": [".las", ".e57", ".csv"],
        "title": "ExportPileBaseFileType",
        "description": "An enumeration."
      },
      "ExportPotreeMeasurementsFileType": {
        "type": "string",
        "enum": [".csv", ".dxf"],
        "title": "ExportPotreeMeasurementsFileType",
        "description": "An enumeration."
      },
      "ExtensionPackName": {
        "type": "string",
        "enum": [
          "MODE_3D",
          "INTENSITY",
          "HIGH_RES",
          "DENSITY",
          "PHOTO_MODE",
          "INTERNET",
          "DATAVOLUME_3D"
        ],
        "title": "ExtensionPackName",
        "description": "An enumeration."
      },
      "ExtensionType": {
        "type": "string",
        "enum": ["system", "project"],
        "title": "ExtensionType",
        "description": "An enumeration."
      },
      "ExtensionUnit": {
        "type": "string",
        "enum": ["MB", "COUNT", "CM"],
        "title": "ExtensionUnit",
        "description": "An enumeration."
      },
      "ExtractionArea": {
        "properties": {
          "min_y": {
            "type": "number",
            "title": "Min Y",
            "description": "Minimum y coordinate of the extraction in meters"
          },
          "max_y": {
            "type": "number",
            "title": "Max Y",
            "description": "Maximum y coordinate of the extraction in meters"
          },
          "min_x": {
            "type": "number",
            "title": "Min X",
            "description": "Minimum x coordinate of the extraction in meters"
          },
          "max_x": {
            "type": "number",
            "title": "Max X",
            "description": "Maximum x coordinate of the extraction in meters"
          }
        },
        "type": "object",
        "required": ["min_y", "max_y", "min_x", "max_x"],
        "title": "ExtractionArea"
      },
      "Feature": {
        "type": "string",
        "enum": ["tobe_ondemand_gradient"],
        "title": "Feature",
        "description": "An enumeration."
      },
      "FeatureCategory": {
        "type": "string",
        "enum": [
          "phub",
          "infomap",
          "tag",
          "project_settings",
          "project_creation",
          "system_hub",
          "file_viewer",
          "potree_import",
          "data_export",
          "gallery",
          "phases",
          "file_explorer",
          "visualization",
          "dashboard",
          "notifications",
          "sidenav",
          "snapshots",
          "snapshot_notes",
          "general",
          "layers",
          "projects",
          "cables",
          "cable_segments",
          "cable_layers",
          "system"
        ],
        "title": "FeatureCategory",
        "description": "FeatureCategory"
      },
      "Features": {
        "type": "string",
        "enum": [
          "projecthub_snapshots",
          "projecthub_infomap",
          "projecthub_phases",
          "projecthub_gallery",
          "projecthub_tags",
          "projecthub_dashboard",
          "projecthub_visualizations",
          "projecthub_explorer",
          "infomap_snapshot_selection",
          "infomap_storages",
          "infomap_view",
          "infomap_measure_volume",
          "infomap_measure_rover",
          "infomap_measure_height_difference",
          "infomap_measure_cross_sections",
          "infomap_tobe_terrains",
          "infomap_filter_geofence_filter",
          "infomap_filter_system_filter",
          "infomap_create_geofence",
          "infomap_view_tobe_terrains",
          "infomap_view_is_terrain",
          "infomap_view_last_scanned_terrain",
          "infomap_view_low_res_terrain",
          "infomap_view_orthophoto",
          "infomap_view_highres",
          "infomap_cables",
          "infomap_cable_block_area_create",
          "infomap_manage",
          "infomap_manage_cable_block_areas",
          "infomap_inspect_nysm",
          "infomap_inspect",
          "infomap_measure_rover_projects",
          "infomap_inspect_show_latest",
          "infomap_create",
          "infomap_create_note",
          "infomap_filter",
          "infomap_filter_pins",
          "infomap_storage_create",
          "infomap_storage_delete",
          "infomap_storage_edit",
          "infomap_pile_create",
          "infomap_pile_delete",
          "infomap_pile_edit",
          "infomap_pile_geofence_create",
          "infomap_pile_geofence_delete",
          "infomap_pile_geofences_tobe_ref_mode",
          "infomap_orthophoto_create",
          "infomap_orthophoto_delete",
          "infomap_tobe_terrains_create",
          "infomap_tobe_terrains_delete",
          "infomap_tobe_terrains_edit",
          "nysm_tool_download",
          "pin_note_edit",
          "pin_delete",
          "tag_soils",
          "soils_create",
          "soils_delete",
          "soils_edit",
          "soils_import",
          "tag_cable_types",
          "cable_types_create",
          "cable_types_delete",
          "cable_types_edit",
          "project_settings_snapshot_settings",
          "project_settings_default_export_options",
          "project_creation_snapshot_settings",
          "project_creation_default_export_options",
          "project_creation_grid_size",
          "systemhub_machine_profiles",
          "systemhub_quick_tasks",
          "systemhub_livestream",
          "systemhub_settings",
          "file_office_viewer",
          "file_model_viewer",
          "file_note_viewer",
          "mode_3d",
          "intensity",
          "photo_mode",
          "import_from_snapshot",
          "import_from_file",
          "import_from_high_res_layers",
          "import_from_3d_mode",
          "snapshot_favorites",
          "snapshots",
          "high_res_layers",
          "phases_create",
          "phases_delete",
          "phases_edit",
          "phases_move",
          "dashboard_create",
          "dashboard_delete",
          "dashboard_edit",
          "dashboard_edit_view",
          "graph_create",
          "graph_delete",
          "graph_edit",
          "graph_export_pdf",
          "graph_export_excel",
          "graph_export_csv",
          "graph_download",
          "dashboard_share",
          "gallery_image_delete",
          "gallery_timelapse",
          "gallery_image_download",
          "file_explorer_create_folder",
          "file_explorer_upload_file",
          "file_explorer_move_file",
          "file_explorer_move_folder",
          "file_explorer_rename_file",
          "file_explorer_rename_folder",
          "file_explorer_delete_file",
          "file_explorer_delete_folder",
          "file_explorer_download_file",
          "file_explorer_download_folder",
          "file_explorer_copy",
          "file_explorer_move",
          "file_explorer_delete_many",
          "visualization_create_project",
          "visualization_delete_project",
          "visualization_edit_project",
          "visualization_share",
          "default_notifications",
          "email_notifications",
          "notifications_page",
          "systems_page",
          "download_img_in_popup",
          "snapshot_download",
          "snapshot_img_delete",
          "favor_snapshot",
          "unfavor_snapshot",
          "snapshot_note_creation",
          "high_res_download",
          "high_res_delete",
          "high_res_edit",
          "high_res_create",
          "3d_mode_download",
          "3d_mode_delete",
          "3d_mode_edit",
          "3d_mode_create",
          "photo_mode_download",
          "photo_mode_delete",
          "photo_mode_edit",
          "photo_mode_create",
          "merged_layer_edit",
          "merged_layer_delete",
          "merged_layer_create",
          "merged_layer_download",
          "merged_layers",
          "project_create",
          "project_move",
          "project_folder_create",
          "create_cable",
          "edit_cable",
          "delete_cable",
          "export_cable",
          "create_cable_segment",
          "edit_cable_segment",
          "delete_cable_segment",
          "create_cable_layer",
          "edit_cable_layer",
          "delete_cable_layer"
        ],
        "title": "Features",
        "description": "An enumeration."
      },
      "File": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file - saved on assets bucket"
          }
        },
        "type": "object",
        "required": ["name", "s3_key"],
        "title": "File"
      },
      "FittingPoint": {
        "properties": {
          "position": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Position",
            "description": "Position of the manipulation"
          },
          "offset": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Offset",
            "description": "Offset of the manipulation"
          }
        },
        "type": "object",
        "required": ["position", "offset"],
        "title": "FittingPoint"
      },
      "GNSSPosition": {
        "type": "string",
        "enum": ["back_left", "back_right"],
        "title": "GNSSPosition",
        "description": "An enumeration."
      },
      "GenericResponse_List_cloudtools.mongodb.collections.authclients.model.OutAuthClient__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutAuthClient"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.authclients.model.OutAuthClient]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutAutostartGeofence"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.autostartgeofence.model.OutAutostartGeofence]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.management.systemsubscriptions.model.OutSystemSubscription__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSystemSubscription"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.management.systemsubscriptions.model.OutSystemSubscription]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutMeasurementLayer"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.measurementlayers.model.OutMeasurementLayer]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.measurements.model.OutMeasurement__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutMeasurement"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.measurements.model.OutMeasurement]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.sharing.model.OutSharing__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSharing"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.sharing.model.OutSharing]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.shop.invoices.model.OutInvoice__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutInvoice"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.shop.invoices.model.OutInvoice]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.shop.orders.model.OutOrder__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutOrder"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.shop.orders.model.OutOrder]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.shop.products.model.OutProduct__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutProduct"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.shop.products.model.OutProduct]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.djidocks.model.OutDjiDock__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutDjiDock"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.sodexcloud.projects.djidocks.model.OutDjiDock]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.sodexcloud.projects.pendingJobs.model.OutPendingJob__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutPendingJob"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.sodexcloud.projects.pendingJobs.model.OutPendingJob]]"
      },
      "GenericResponse_List_cloudtools.mongodb.collections.subscriptions.model.OutSubscription__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSubscription"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.mongodb.collections.subscriptions.model.OutSubscription]]"
      },
      "GenericResponse_List_cloudtools.sodex.viscantransformation.schemas.ViscanCoordinateSystem__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ViscanCoordinateSystem"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[cloudtools.sodex.viscantransformation.schemas.ViscanCoordinateSystem]]"
      },
      "GenericResponse_List_datetime.datetime__": {
        "properties": {
          "data": {
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[datetime.datetime]]"
      },
      "GenericResponse_List_src.core.schemas.OutCountry__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCountry"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.core.schemas.OutCountry]]"
      },
      "GenericResponse_List_src.v2.admin.applications.schemas.OutApplications__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutApplications"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.admin.applications.schemas.OutApplications]]"
      },
      "GenericResponse_List_src.v2.admin.features.schemas.OutFeature__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutFeature"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.admin.features.schemas.OutFeature]]"
      },
      "GenericResponse_List_src.v2.management.components.schemas.OutComponent__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutComponent"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.components.schemas.OutComponent]]"
      },
      "GenericResponse_List_src.v2.management.extensionpacks.schemas.OutExtensionPack__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/src__v2__management__extensionpacks__schemas__OutExtensionPack"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.extensionpacks.schemas.OutExtensionPack]]"
      },
      "GenericResponse_List_src.v2.management.licenseconfigs.schemas.OutLicenseConfigs__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutLicenseConfigs"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.licenseconfigs.schemas.OutLicenseConfigs]]"
      },
      "GenericResponse_List_src.v2.management.licenses.schemas.OutLicense__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutLicense"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.licenses.schemas.OutLicense]]"
      },
      "GenericResponse_List_src.v2.management.organizations.schemas.OutOrganization__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutOrganization"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.organizations.schemas.OutOrganization]]"
      },
      "GenericResponse_List_src.v2.management.releases.schemas.OutRelease__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutRelease"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.releases.schemas.OutRelease]]"
      },
      "GenericResponse_List_src.v2.management.systems.schemas.OutSystem__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSystem"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.systems.schemas.OutSystem]]"
      },
      "GenericResponse_List_src.v2.management.users.schemas.OutUser__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutUser"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.management.users.schemas.OutUser]]"
      },
      "GenericResponse_List_src.v2.processdata.aidata.schemas.OutAiData__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutAiData"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.aidata.schemas.OutAiData]]"
      },
      "GenericResponse_List_src.v2.processdata.bearingmaps.schemas.OutBearingMap__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutBearingMap"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.bearingmaps.schemas.OutBearingMap]]"
      },
      "GenericResponse_List_src.v2.processdata.csmeta.schemas.OutCsMeta__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCsMeta"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.csmeta.schemas.OutCsMeta]]"
      },
      "GenericResponse_List_src.v2.processdata.datacapturing.schemas.OutDataCapturing__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutDataCapturing"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.datacapturing.schemas.OutDataCapturing]]"
      },
      "GenericResponse_List_src.v2.processdata.images.schemas.OutImage__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutImage"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.images.schemas.OutImage]]"
      },
      "GenericResponse_List_src.v2.processdata.layerdata.schemas.OutLayerData__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutLayerData"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.layerdata.schemas.OutLayerData]]"
      },
      "GenericResponse_List_src.v2.processdata.pins.schemas.OutFiles__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutFiles"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.pins.schemas.OutFiles]]"
      },
      "GenericResponse_List_src.v2.processdata.pins.schemas.OutPin__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutPin"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.pins.schemas.OutPin]]"
      },
      "GenericResponse_List_src.v2.processdata.snapshotmanipulations.schemas.OutSnapshotManipulation__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSnapshotManipulation"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.snapshotmanipulations.schemas.OutSnapshotManipulation]]"
      },
      "GenericResponse_List_src.v2.processdata.snapshots.schemas.OutImages__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutImages"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.snapshots.schemas.OutImages]]"
      },
      "GenericResponse_List_src.v2.processdata.snapshots.schemas.OutMonitoringData__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutMonitoringData"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.snapshots.schemas.OutMonitoringData]]"
      },
      "GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshotData__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSnapshotData"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.snapshots.schemas.OutSnapshotData]]"
      },
      "GenericResponse_List_src.v2.processdata.snapshots.schemas.OutSnapshot__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSnapshot"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.snapshots.schemas.OutSnapshot]]"
      },
      "GenericResponse_List_src.v2.processdata.snapshots.schemas.OutTelekomProgress__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutTelekomProgress"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.snapshots.schemas.OutTelekomProgress]]"
      },
      "GenericResponse_List_src.v2.processdata.snapshotsv2.schemas.OutSnapshotV2__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/src__v2__processdata__snapshotsv2__schemas__OutSnapshotV2"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.snapshotsv2.schemas.OutSnapshotV2]]"
      },
      "GenericResponse_List_src.v2.processdata.systemstatus.schemas.OutSystemStatus__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSystemStatus"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.systemstatus.schemas.OutSystemStatus]]"
      },
      "GenericResponse_List_src.v2.processdata.translations.schemas.OutTranslation__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutTranslation"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.processdata.translations.schemas.OutTranslation]]"
      },
      "GenericResponse_List_src.v2.sdxglobal.systemevents.schemas.OutSystemEvent__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSystemEvent"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sdxglobal.systemevents.schemas.OutSystemEvent]]"
      },
      "GenericResponse_List_src.v2.sdxglobal.systemseventgroups.schemas.OutSystemEventGroup__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSystemEventGroup"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sdxglobal.systemseventgroups.schemas.OutSystemEventGroup]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.cables.cableblockareas.schemas.OutCableBlockArea__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCableBlockArea"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.cables.cableblockareas.schemas.OutCableBlockArea]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.cables.cablelayers.schemas.OutCableLayer__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCableLayer"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.cables.cablelayers.schemas.OutCableLayer]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.cables.cablepointlinks.schemas.OutPointLink__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutPointLink"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.cables.cablepointlinks.schemas.OutPointLink]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCablePoint"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.cables.cables.schemas.OutCable__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCable"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.cables.cables.schemas.OutCable]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.cables.cablesegments.schemas.OutSegment__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSegment"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.cables.cablesegments.schemas.OutSegment]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.cables.cabletypes.schemas.OutCableType__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCableType"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.cables.cabletypes.schemas.OutCableType]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.calendars.calendarevents.schemas.OutCalendarEvent__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCalendarEvent"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.calendars.calendarevents.schemas.OutCalendarEvent]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.calendars.calendars.schemas.OutCalendarWithSettings__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCalendarWithSettings"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.calendars.calendars.schemas.OutCalendarWithSettings]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.calendars.calendars.schemas.OutCalendar__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCalendar"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.calendars.calendars.schemas.OutCalendar]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.calendars.calendarsettings.schemas.OutCalendarSetting__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCalendarSetting"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.calendars.calendarsettings.schemas.OutCalendarSetting]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.filetypes.schemas.OutFiletype__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutFiletype"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.filetypes.schemas.OutFiletype]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.gallery.schemas.OutGalleryDateInfo__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutGalleryDateInfo"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.gallery.schemas.OutGalleryDateInfo]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.gallery.schemas.OutGalleryInfo__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutGalleryInfo"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.gallery.schemas.OutGalleryInfo]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.gradients.schemas.OutGradient__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutGradient"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.gradients.schemas.OutGradient]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.notifications.notifications2.schemas.OutNotification__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutNotification"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.notifications.notifications2.schemas.OutNotification]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.notifications.settings.schemas.OutNotificationSettings__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutNotificationSettings"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.notifications.settings.schemas.OutNotificationSettings]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.potree.schemas.OutPotree__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutPotree"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.potree.schemas.OutPotree]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.coordinatesystems.schemas.OutCoordinateSystem__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCoordinateSystem"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.coordinatesystems.schemas.OutCoordinateSystem]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.correctionservices.schemas.OutCorrectionservice__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCorrectionservice"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.correctionservices.schemas.OutCorrectionservice]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.crosssections.schemas.OutCrossSectionProject__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCrossSectionProject"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.crosssections.schemas.OutCrossSectionProject]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.dashboards.schemas.OutDashboard__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutDashboard"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.dashboards.schemas.OutDashboard]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.datasets.schemas.OutDataset__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutDataset"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.datasets.schemas.OutDataset]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.files.schemas.OutFile__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__schemas__OutFile"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.files.schemas.OutFile]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.folders.schemas.OutFolder__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutFolder"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.folders.schemas.OutFolder]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.gcpsets.schemas.OutGcpSet__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutGcpSet"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.gcpsets.schemas.OutGcpSet]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.geofences.schemas.OutGeofence__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutGeofence"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.geofences.schemas.OutGeofence]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.infomapfilters.schemas.OutInfomapfilter__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutInfomapfilter"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.infomapfilters.schemas.OutInfomapfilter]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.layers.schemas.OutLayer__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutLayer"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.layers.schemas.OutLayer]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.lines.schemas.OutLine__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutLine"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.lines.schemas.OutLine]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.checkpoints.schemas.OutCheckpoint__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCheckpoint"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.measurementtools.checkpoints.schemas.OutCheckpoint]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.storedlines.schemas.OutStoredLine__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutStoredLine"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.measurementtools.storedlines.schemas.OutStoredLine]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.measurementtools.storedpoints.schemas.OutStoredPoints__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutStoredPoints"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.measurementtools.storedpoints.schemas.OutStoredPoints]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.mergedlayers.schemas.OutMergedLayer__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutMergedLayer"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.mergedlayers.schemas.OutMergedLayer]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.orthophotos.schemas.OutOrthophoto__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__orthophotos__schemas__OutOrthophoto"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.orthophotos.schemas.OutOrthophoto]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.phases.schemas.OutPhase__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutPhase"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.phases.schemas.OutPhase]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.pilegeofences.schemas.OutPileGeofence__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutPileGeofence"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.pilegeofences.schemas.OutPileGeofence]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.piles.schemas.OutPile__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutPile"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.piles.schemas.OutPile]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.plans2d.schemas.Out2DPlan__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Out2DPlan"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.plans2d.schemas.Out2DPlan]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.projectfolders.schemas.OutProjectFolder__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutProjectFolder"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.projectfolders.schemas.OutProjectFolder]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutNoAccessProject__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutNoAccessProject"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.projects.schemas.OutNoAccessProject]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.projects.schemas.OutProject__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutProject"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.projects.schemas.OutProject]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.referenceterrains.schemas.OutTobeTerrain__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutTobeTerrain"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.referenceterrains.schemas.OutTobeTerrain]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.scanblockareas.schemas.OutScanBlockArea__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutScanBlockArea"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.scanblockareas.schemas.OutScanBlockArea]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.scantasks.schemas.OutScanTask__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutScanTask"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.scantasks.schemas.OutScanTask]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.snapshotcomparison.schemas.OutSnapshotComparison__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSnapshotComparison"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.snapshotcomparison.schemas.OutSnapshotComparison]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.soils.schemas.OutSoil__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSoil"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.soils.schemas.OutSoil]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.storages.schemas.OutStorage__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutStorage"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.storages.schemas.OutStorage]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.tags.schemas.OutProjectTag__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutProjectTag"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.tags.schemas.OutProjectTag]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.projects.visconfigs.schemas.OutVisConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutVisConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.projects.visconfigs.schemas.OutVisConfig]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.snapshotnotes.schemas.OutSnapshotNote__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSnapshotNote"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.snapshotnotes.schemas.OutSnapshotNote]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.states.schemas.OutStateWithPhases__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutStateWithPhases"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.states.schemas.OutStateWithPhases]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.states.schemas.OutState__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutState"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.states.schemas.OutState]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.systems.buckets.schemas.OutBucket__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutBucket"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.systems.buckets.schemas.OutBucket]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.systems.profiles.schemas.OutProfile__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutProfile"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.systems.profiles.schemas.OutProfile]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.systems.quicktasks.schemas.OutFile__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__systems__quicktasks__schemas__OutFile"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.systems.quicktasks.schemas.OutFile]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.systems.quicktasks.schemas.OutQuicktask__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutQuicktask"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.systems.quicktasks.schemas.OutQuicktask]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.uhfconfigurations.schemas.OutUhfConfiguration__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutUhfConfiguration"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.uhfconfigurations.schemas.OutUhfConfiguration]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.usersettings.tables.schemas.OutTable__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutTable"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.usersettings.tables.schemas.OutTable]]"
      },
      "GenericResponse_List_src.v2.sodexcloud.usersettings.usersettings.schemas.OutUserSetting__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutUserSetting"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.sodexcloud.usersettings.usersettings.schemas.OutUserSetting]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.apiconfigs.schemas.OutApiConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutApiConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.apiconfigs.schemas.OutApiConfig]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.cameraconfigs.schemas.OutCameraConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCameraConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.cameraconfigs.schemas.OutCameraConfig]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.csparams.schemas.OutCsParam__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCsParam"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.csparams.schemas.OutCsParam]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.isparams.schemas.OutIsParam__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutIsParam"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.isparams.schemas.OutIsParam]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.lidarconfigs.schemas.OutLidarConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutLidarConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.lidarconfigs.schemas.OutLidarConfig]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.machineconfigs.schemas.OutMachineConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutMachineConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.machineconfigs.schemas.OutMachineConfig]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.managerconfigs.schemas.OutManagerConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutManagerConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.managerconfigs.schemas.OutManagerConfig]]"
      },
      "GenericResponse_List_src.v2.systemconfiguration.systemmeta.schemas.OutSystemMeta__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutSystemMeta"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[src.v2.systemconfiguration.systemmeta.schemas.OutSystemMeta]]"
      },
      "GenericResponse_List_str__": {
        "properties": {
          "data": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[List[str]]"
      },
      "GenericResponse_LoopsEmailListSettings_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LoopsEmailListSettings"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[LoopsEmailListSettings]"
      },
      "GenericResponse_Out2DPlan_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Out2DPlan"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[Out2DPlan]"
      },
      "GenericResponse_OutAiData_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutAiData"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutAiData]"
      },
      "GenericResponse_OutApiConfig_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutApiConfig"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutApiConfig]"
      },
      "GenericResponse_OutApplications_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutApplications"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutApplications]"
      },
      "GenericResponse_OutAuthClient_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutAuthClient"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutAuthClient]"
      },
      "GenericResponse_OutAutostartGeofence_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutAutostartGeofence"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutAutostartGeofence]"
      },
      "GenericResponse_OutBearingMap_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutBearingMap"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutBearingMap]"
      },
      "GenericResponse_OutBucket_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutBucket"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutBucket]"
      },
      "GenericResponse_OutCableBlockArea_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCableBlockArea"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCableBlockArea]"
      },
      "GenericResponse_OutCableLayer_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCableLayer"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCableLayer]"
      },
      "GenericResponse_OutCablePoint_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCablePoint"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCablePoint]"
      },
      "GenericResponse_OutCableType_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCableType"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCableType]"
      },
      "GenericResponse_OutCable_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCable"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCable]"
      },
      "GenericResponse_OutCalendarEvent_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCalendarEvent"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCalendarEvent]"
      },
      "GenericResponse_OutCalendarSetting_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCalendarSetting"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCalendarSetting]"
      },
      "GenericResponse_OutCalendar_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCalendar"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCalendar]"
      },
      "GenericResponse_OutCameraConfig_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCameraConfig"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCameraConfig]"
      },
      "GenericResponse_OutCheckpoint_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCheckpoint"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCheckpoint]"
      },
      "GenericResponse_OutComponent_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutComponent"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutComponent]"
      },
      "GenericResponse_OutCoordinateSystem_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCoordinateSystem"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCoordinateSystem]"
      },
      "GenericResponse_OutCorrectionserviceValidate_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCorrectionserviceValidate"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCorrectionserviceValidate]"
      },
      "GenericResponse_OutCorrectionservice_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCorrectionservice"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCorrectionservice]"
      },
      "GenericResponse_OutCrossSectionProject_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCrossSectionProject"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCrossSectionProject]"
      },
      "GenericResponse_OutCsMeta_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCsMeta"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCsMeta]"
      },
      "GenericResponse_OutCsParam_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutCsParam"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutCsParam]"
      },
      "GenericResponse_OutDashboard_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutDashboard"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutDashboard]"
      },
      "GenericResponse_OutDataCapturing_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutDataCapturing"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutDataCapturing]"
      },
      "GenericResponse_OutDataset_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutDataset"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutDataset]"
      },
      "GenericResponse_OutDjiDock_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutDjiDock"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutDjiDock]"
      },
      "GenericResponse_OutDjiFlighthubCredentials_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutDjiFlighthubCredentials"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutDjiFlighthubCredentials]"
      },
      "GenericResponse_OutExtensionPack_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/src__v2__management__extensionpacks__schemas__OutExtensionPack"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutExtensionPack]"
      },
      "GenericResponse_OutFeature_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutFeature"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutFeature]"
      },
      "GenericResponse_OutFile_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__schemas__OutFile"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutFile]"
      },
      "GenericResponse_OutFiletype_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutFiletype"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutFiletype]"
      },
      "GenericResponse_OutFolderWithFiles_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutFolderWithFiles"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutFolderWithFiles]"
      },
      "GenericResponse_OutGcpSet_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutGcpSet"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutGcpSet]"
      },
      "GenericResponse_OutGeofence_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutGeofence"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutGeofence]"
      },
      "GenericResponse_OutGradient_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutGradient"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutGradient]"
      },
      "GenericResponse_OutImage_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutImage"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutImage]"
      },
      "GenericResponse_OutInfomapfilter_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutInfomapfilter"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutInfomapfilter]"
      },
      "GenericResponse_OutInviteToken_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutInviteToken"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutInviteToken]"
      },
      "GenericResponse_OutInvoice_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutInvoice"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutInvoice]"
      },
      "GenericResponse_OutIsParam_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutIsParam"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutIsParam]"
      },
      "GenericResponse_OutLayerData_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutLayerData"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutLayerData]"
      },
      "GenericResponse_OutLayer_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutLayer"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutLayer]"
      },
      "GenericResponse_OutLicenseConfigs_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutLicenseConfigs"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutLicenseConfigs]"
      },
      "GenericResponse_OutLicense_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutLicense"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutLicense]"
      },
      "GenericResponse_OutLidarConfig_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutLidarConfig"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutLidarConfig]"
      },
      "GenericResponse_OutLine_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutLine"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutLine]"
      },
      "GenericResponse_OutMachineConfig_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutMachineConfig"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutMachineConfig]"
      },
      "GenericResponse_OutManagerConfig_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutManagerConfig"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutManagerConfig]"
      },
      "GenericResponse_OutMeasurementLayer_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutMeasurementLayer"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutMeasurementLayer]"
      },
      "GenericResponse_OutMeasurementResult_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutMeasurementResult"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutMeasurementResult]"
      },
      "GenericResponse_OutMeasurement_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutMeasurement"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutMeasurement]"
      },
      "GenericResponse_OutMergedLayer_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutMergedLayer"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutMergedLayer]"
      },
      "GenericResponse_OutMultipartSnapshotUpload_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutMultipartSnapshotUpload"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutMultipartSnapshotUpload]"
      },
      "GenericResponse_OutMultipartUpload_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutMultipartUpload"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutMultipartUpload]"
      },
      "GenericResponse_OutNotificationSettings_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutNotificationSettings"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutNotificationSettings]"
      },
      "GenericResponse_OutNotification_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutNotification"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutNotification]"
      },
      "GenericResponse_OutOrder_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutOrder"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutOrder]"
      },
      "GenericResponse_OutOrganization_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutOrganization"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutOrganization]"
      },
      "GenericResponse_OutOrthophoto_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/src__v2__sodexcloud__projects__orthophotos__schemas__OutOrthophoto"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutOrthophoto]"
      },
      "GenericResponse_OutPaymentMethod_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPaymentMethod"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPaymentMethod]"
      },
      "GenericResponse_OutPendingJob_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPendingJob"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPendingJob]"
      },
      "GenericResponse_OutPhase_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPhase"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPhase]"
      },
      "GenericResponse_OutPileGeofence_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPileGeofence"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPileGeofence]"
      },
      "GenericResponse_OutPile_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPile"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPile]"
      },
      "GenericResponse_OutPinTagInfo_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPinTagInfo"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPinTagInfo]"
      },
      "GenericResponse_OutPin_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPin"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPin]"
      },
      "GenericResponse_OutPointLink_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPointLink"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPointLink]"
      },
      "GenericResponse_OutPotreePreview_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPotreePreview"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPotreePreview]"
      },
      "GenericResponse_OutPotree_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPotree"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPotree]"
      },
      "GenericResponse_OutProcessingFiles_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProcessingFiles"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProcessingFiles]"
      },
      "GenericResponse_OutProcessingJob_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProcessingJob"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProcessingJob]"
      },
      "GenericResponse_OutProduct_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProduct"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProduct]"
      },
      "GenericResponse_OutProfile_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProfile"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProfile]"
      },
      "GenericResponse_OutProjectFolder_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProjectFolder"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProjectFolder]"
      },
      "GenericResponse_OutProjectTag_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProjectTag"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProjectTag]"
      },
      "GenericResponse_OutProjectUserNotificationTypeSettings_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProjectUserNotificationTypeSettings"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProjectUserNotificationTypeSettings]"
      },
      "GenericResponse_OutProject_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutProject"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutProject]"
      },
      "GenericResponse_OutPutUrls_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutPutUrls"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutPutUrls]"
      },
      "GenericResponse_OutQuicktask_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutQuicktask"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutQuicktask]"
      },
      "GenericResponse_OutRelease_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutRelease"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutRelease]"
      },
      "GenericResponse_OutScanBlockArea_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutScanBlockArea"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutScanBlockArea]"
      },
      "GenericResponse_OutScanTask_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutScanTask"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutScanTask]"
      },
      "GenericResponse_OutSegment_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSegment"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSegment]"
      },
      "GenericResponse_OutSharing_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSharing"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSharing]"
      },
      "GenericResponse_OutSnapshotComparison_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSnapshotComparison"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSnapshotComparison]"
      },
      "GenericResponse_OutSnapshotData_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSnapshotData"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSnapshotData]"
      },
      "GenericResponse_OutSnapshotManipulation_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSnapshotManipulation"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSnapshotManipulation]"
      },
      "GenericResponse_OutSnapshotNote_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSnapshotNote"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSnapshotNote]"
      },
      "GenericResponse_OutSnapshotV2_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/src__v2__processdata__snapshotsv2__schemas__OutSnapshotV2"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSnapshotV2]"
      },
      "GenericResponse_OutSnapshot_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSnapshot"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSnapshot]"
      },
      "GenericResponse_OutSoil_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSoil"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSoil]"
      },
      "GenericResponse_OutState_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutState"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutState]"
      },
      "GenericResponse_OutStorageVolumes_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutStorageVolumes"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutStorageVolumes]"
      },
      "GenericResponse_OutStorage_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutStorage"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutStorage]"
      },
      "GenericResponse_OutStoredLine_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutStoredLine"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutStoredLine]"
      },
      "GenericResponse_OutStoredPoints_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutStoredPoints"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutStoredPoints]"
      },
      "GenericResponse_OutSubscription_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSubscription"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSubscription]"
      },
      "GenericResponse_OutSupportInfo_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSupportInfo"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSupportInfo]"
      },
      "GenericResponse_OutSystemEventGroup_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSystemEventGroup"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSystemEventGroup]"
      },
      "GenericResponse_OutSystemEvent_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSystemEvent"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSystemEvent]"
      },
      "GenericResponse_OutSystemMeta_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSystemMeta"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSystemMeta]"
      },
      "GenericResponse_OutSystemStatus_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSystemStatus"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSystemStatus]"
      },
      "GenericResponse_OutSystemSubscription_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSystemSubscription"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSystemSubscription]"
      },
      "GenericResponse_OutSystem_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutSystem"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutSystem]"
      },
      "GenericResponse_OutTable_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutTable"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutTable]"
      },
      "GenericResponse_OutTelekomSMAValid_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutTelekomSMAValid"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutTelekomSMAValid]"
      },
      "GenericResponse_OutTobeTerrain_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutTobeTerrain"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutTobeTerrain]"
      },
      "GenericResponse_OutTranslation_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutTranslation"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutTranslation]"
      },
      "GenericResponse_OutUhfConfiguration_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutUhfConfiguration"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutUhfConfiguration]"
      },
      "GenericResponse_OutUrlS3Key_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutUrlS3Key"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutUrlS3Key]"
      },
      "GenericResponse_OutUrl_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutUrl"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutUrl]"
      },
      "GenericResponse_OutUserHelpcenterInfo_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutUserHelpcenterInfo"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutUserHelpcenterInfo]"
      },
      "GenericResponse_OutUserSetting_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutUserSetting"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutUserSetting]"
      },
      "GenericResponse_OutUser_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutUser"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutUser]"
      },
      "GenericResponse_OutVisConfig_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutVisConfig"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutVisConfig]"
      },
      "GenericResponse_OutViscanScinUploadCredentials_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutViscanScinUploadCredentials"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[OutViscanScinUploadCredentials]"
      },
      "GenericResponse_ProcessingJob_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ProcessingJob"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[ProcessingJob]"
      },
      "GenericResponse_TokenInfo_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TokenInfo"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[TokenInfo]"
      },
      "GenericResponse_Union_OutAutostartGeofence__NoneType__": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutAutostartGeofence"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[Union[OutAutostartGeofence, NoneType]]"
      },
      "GenericResponse_bool_": {
        "properties": {
          "data": {
            "type": "boolean",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[bool]"
      },
      "GenericResponse_dict_": {
        "properties": {
          "data": {
            "type": "object",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[dict]"
      },
      "GenericResponse_float_": {
        "properties": {
          "data": {
            "type": "number",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[float]"
      },
      "GenericResponse_int_": {
        "properties": {
          "data": {
            "type": "integer",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[int]"
      },
      "GenericResponse_list_datetime.datetime__": {
        "properties": {
          "data": {
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[datetime.datetime]]"
      },
      "GenericResponse_list_src.core.schemas.OutUrl__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutUrl"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.core.schemas.OutUrl]]"
      },
      "GenericResponse_list_src.sdxstripe.subscription.subscription_model.SubscriptionModel__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SubscriptionModel"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.sdxstripe.subscription.subscription_model.SubscriptionModel]]"
      },
      "GenericResponse_list_src.v2.management.organizations.schemas.OutOrganization__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutOrganization"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.management.organizations.schemas.OutOrganization]]"
      },
      "GenericResponse_list_src.v2.management.users.schemas.OutUser__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutUser"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.management.users.schemas.OutUser]]"
      },
      "GenericResponse_list_src.v2.processdata.snapshots.schemas.OutVolume__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/src__v2__processdata__snapshots__schemas__OutVolume"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.processdata.snapshots.schemas.OutVolume]]"
      },
      "GenericResponse_list_src.v2.processing.schemas.OutProcessingJob__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutProcessingJob"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.processing.schemas.OutProcessingJob]]"
      },
      "GenericResponse_list_src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCablePoint"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.sodexcloud.cables.cablepoints.schemas.OutCablePoint]]"
      },
      "GenericResponse_list_src.v2.sodexcloud.gradients.schemas.OutGradient__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutGradient"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.sodexcloud.gradients.schemas.OutGradient]]"
      },
      "GenericResponse_list_src.v2.sodexcloud.projects.visconfigs.schemas.OutVisConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutVisConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.sodexcloud.projects.visconfigs.schemas.OutVisConfig]]"
      },
      "GenericResponse_list_src.v2.systemconfiguration.cameraconfigs.schemas.OutCameraConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutCameraConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.systemconfiguration.cameraconfigs.schemas.OutCameraConfig]]"
      },
      "GenericResponse_list_src.v2.systemconfiguration.lidarconfigs.schemas.OutLidarConfig__": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/OutLidarConfig"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[src.v2.systemconfiguration.lidarconfigs.schemas.OutLidarConfig]]"
      },
      "GenericResponse_list_str__": {
        "properties": {
          "data": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[list[str]]"
      },
      "GenericResponse_str_": {
        "properties": {
          "data": {
            "type": "string",
            "title": "Data"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "error_data": {
            "$ref": "#/components/schemas/ErrorData"
          },
          "skip": {
            "type": "integer",
            "title": "Skip"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          }
        },
        "type": "object",
        "title": "GenericResponse[str]"
      },
      "GeoJsonConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the GeoJson",
            "default": "Telekom Digitale Baubegleitung - Geojson"
          },
          "telekom_data": {
            "items": {
              "$ref": "#/components/schemas/TelekomData"
            },
            "type": "array",
            "title": "Telekom Data",
            "description": "List of Telekom Data",
            "default": []
          }
        },
        "type": "object",
        "title": "GeoJsonConfig"
      },
      "GeofenceDetectionType": {
        "type": "string",
        "enum": ["pile"],
        "title": "GeofenceDetectionType",
        "description": "An enumeration."
      },
      "GeotTifKey": {
        "type": "string",
        "enum": [
          "coordinatesystems/gcg2016.tif",
          "coordinatesystems/bev_austria.tif",
          "coordinatesystems/nlnsgi_nlgeo2018.tif"
        ],
        "title": "GeotTifKey",
        "description": "An enumeration."
      },
      "GigaPixelName": {
        "type": "string",
        "enum": ["GigaPixel"],
        "title": "GigaPixelName",
        "description": "An enumeration."
      },
      "GlobalDatum": {
        "type": "string",
        "enum": ["wgs84", "etrs"],
        "title": "GlobalDatum",
        "description": "An enumeration."
      },
      "GraphSetup": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "$ref": "#/components/schemas/ChartType"
          },
          "data_type": {
            "type": "string",
            "title": "Data Type"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "data_type",
          "start_date",
          "end_date"
        ],
        "title": "GraphSetup"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Header": {
        "properties": {
          "icon": {
            "type": "string",
            "title": "Icon",
            "description": "Icon of the header"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "value_type": {
            "type": "string",
            "title": "Value Type"
          },
          "disabled_on_mobile": {
            "type": "boolean",
            "title": "Disabled On Mobile"
          },
          "svg_icon": {
            "type": "boolean",
            "title": "Svg Icon"
          },
          "max_character_width": {
            "type": "number",
            "title": "Max Character Width"
          },
          "width": {
            "type": "integer",
            "title": "Width"
          },
          "copy_text": {
            "type": "boolean",
            "title": "Copy Text",
            "default": false
          }
        },
        "type": "object",
        "title": "Header"
      },
      "HeightCustomGeoidModel": {
        "properties": {
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File id"
          }
        },
        "type": "object",
        "required": ["file_id"],
        "title": "HeightCustomGeoidModel"
      },
      "HeightEllipsoid": {
        "properties": {
          "reference_ellipsoid": {
            "type": "string",
            "title": "Reference Ellipsoid"
          }
        },
        "type": "object",
        "required": ["reference_ellipsoid"],
        "title": "HeightEllipsoid"
      },
      "HeightGeoidModel": {
        "properties": {
          "reference_ellipsoid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceEllipsoiods"
              }
            ],
            "description": "Reference ellipsoid"
          },
          "geoid_model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CHGeoTifKey"
              },
              {
                "$ref": "#/components/schemas/GeotTifKey"
              }
            ],
            "title": "Geoid Model",
            "description": "s3 key to tiff file"
          }
        },
        "type": "object",
        "required": ["reference_ellipsoid", "geoid_model"],
        "title": "HeightGeoidModel"
      },
      "HeightOffset": {
        "properties": {
          "offset": {
            "type": "number",
            "title": "Offset"
          }
        },
        "type": "object",
        "required": ["offset"],
        "title": "HeightOffset"
      },
      "HeightSlope": {
        "properties": {
          "origin_easting": {
            "type": "number",
            "title": "Origin Easting"
          },
          "origin_northing": {
            "type": "number",
            "title": "Origin Northing"
          },
          "incline_easting": {
            "type": "number",
            "title": "Incline Easting"
          },
          "incline_northing": {
            "type": "number",
            "title": "Incline Northing"
          },
          "offset": {
            "type": "number",
            "title": "Offset"
          }
        },
        "type": "object",
        "required": [
          "origin_easting",
          "origin_northing",
          "incline_easting",
          "incline_northing",
          "offset"
        ],
        "title": "HeightSlope"
      },
      "HeightType": {
        "type": "string",
        "enum": [
          "offset",
          "geoid_model",
          "custom_geoid_model",
          "ellipsoid",
          "slope"
        ],
        "title": "HeightType",
        "description": "An enumeration."
      },
      "HelpcenterAccess": {
        "type": "string",
        "enum": ["allowed", "email_sent_signup_required", "signup_required"],
        "title": "HelpcenterAccess",
        "description": "An enumeration."
      },
      "HighResLayerColorizedOption": {
        "type": "string",
        "enum": [
          "colored_by_camera",
          "intensity_grayscale",
          "intensity_rgb",
          "height_gradient"
        ],
        "title": "HighResLayerColorizedOption",
        "description": "An enumeration."
      },
      "HighResLayerExportOptions": {
        "type": "string",
        "enum": ["all_points", "camera_points"],
        "title": "HighResLayerExportOptions",
        "description": "An enumeration."
      },
      "HorizontalOffsetType": {
        "type": "string",
        "enum": ["affine", "helmert_2d", "offset"],
        "title": "HorizontalOffsetType",
        "description": "An enumeration."
      },
      "ImageCaptureType": {
        "type": "string",
        "enum": ["areal", "perspective"],
        "title": "ImageCaptureType",
        "description": "An enumeration."
      },
      "ImageFilesOrigin": {
        "type": "string",
        "enum": ["pins", "explorer"],
        "title": "ImageFilesOrigin",
        "description": "An enumeration."
      },
      "ImperialSettings": {
        "type": "string",
        "enum": ["survey_feet", "international_feet"],
        "title": "ImperialSettings",
        "description": "An enumeration."
      },
      "ImportSoils": {
        "properties": {
          "ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Ids",
            "description": "Soils ids that should be imported",
            "example": ["5f9f9f9f9f9f9f9f9f9f9f9f"]
          }
        },
        "type": "object",
        "required": ["ids"],
        "title": "ImportSoils"
      },
      "InImageUploaded": {
        "properties": {
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the image"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the image"
          },
          "cam_pos": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              }
            ],
            "description": "Cam pos of the image"
          }
        },
        "type": "object",
        "required": ["s3_key", "bearing", "cam_pos"],
        "title": "InImageUploaded"
      },
      "InMeasurementConfig": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/InputMeasurePointAPI"
            },
            "type": "array",
            "title": "Points",
            "description": "Points to measure"
          },
          "reference_terrain_id": {
            "type": "string",
            "title": "Reference Terrain Id",
            "description": "Reference terrain id. Measurements where possible are done against the reference terrain."
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "line_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureConfigLine"
              }
            ],
            "title": "Line Config",
            "description": "Line config. If set the line is measured with the provided config. Only possible if at least 2 points are provided."
          },
          "area_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureConfigArea"
              }
            ],
            "title": "Area Config",
            "description": "Area config. If set the area is measured with the provided config. Only possible if at least 3 points are provided"
          },
          "volume_measurement_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureConfigVolume"
              }
            ],
            "title": "Volume Measurement Config",
            "description": "Volume measurement config. If set the volume is calculated based on the provided config. Only possible if at least 3 points are provided"
          },
          "cross_section_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureConfigCrossSection"
              }
            ],
            "title": "Cross Section Config",
            "description": "Cross section config. If set the cross section is measured with the provided config. Only possible if at least 2 points are provided"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "InMeasurementConfig"
      },
      "InPaidSignup": {
        "properties": {
          "reseller_token": {
            "type": "string",
            "title": "Reseller Token",
            "description": "Token of the reseller that the organization is assigned to"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaidUserSignup"
              }
            ],
            "title": "User",
            "description": "User information"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaidOrganizationSignup"
              }
            ],
            "title": "Organization",
            "description": "Organization information"
          }
        },
        "type": "object",
        "required": ["reseller_token", "user", "organization"],
        "title": "InPaidSignup"
      },
      "InSnapshotClusterUploadFinished": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/src__v2__processdata__snapshots__schemas__S3UploadPart"
            },
            "type": "array",
            "title": "Parts",
            "description": "Parts to upload"
          },
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "ID of the upload"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          }
        },
        "type": "object",
        "required": ["parts", "upload_id", "s3_key"],
        "title": "InSnapshotClusterUploadFinished"
      },
      "InTrialSignup": {
        "properties": {
          "reseller_token": {
            "type": "string",
            "title": "Reseller Token",
            "description": "Token of the reseller that the organization is assigned to"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrialUserSignup"
              }
            ],
            "title": "User",
            "description": "User information"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrialOrganizationSignup"
              }
            ],
            "title": "Organization",
            "description": "Organization information"
          }
        },
        "type": "object",
        "required": ["reseller_token", "user", "organization"],
        "title": "InTrialSignup"
      },
      "InUpdateSnapshot": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot",
            "nullable": true
          },
          "favorite": {
            "type": "boolean",
            "title": "Favorite",
            "description": "Favorite of the snapshot",
            "nullable": true
          }
        },
        "type": "object",
        "title": "InUpdateSnapshot"
      },
      "Industry": {
        "type": "string",
        "enum": [
          "land_surveying",
          "construction",
          "mining",
          "recycling",
          "pipeline_construction",
          "other",
          "earthwork",
          "road_construction",
          "railway_construction",
          "landscaping",
          "landfill",
          "gravel_works",
          "hydraulic_engineering"
        ],
        "title": "Industry",
        "description": "An enumeration."
      },
      "Input2DPlan": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Plans2DFiletype"
              }
            ],
            "description": "File type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File ID"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit",
            "default": "m"
          }
        },
        "type": "object",
        "required": ["filetype", "name", "file_id"],
        "title": "Input2DPlan"
      },
      "Input4DVisionSystem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the system"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the system"
          },
          "retrofit_at": {
            "type": "string",
            "format": "date-time",
            "title": "Retrofit At",
            "description": "Retrofit date of the system"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID  of the customer the system belongs to"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Sodex Serial number of the system"
          },
          "sensor_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SensorApi"
              }
            ],
            "description": "Assistance system of the system",
            "default": "sdx-4dvision-leica"
          },
          "invoice_date": {
            "type": "string",
            "format": "date-time",
            "title": "Invoice Date",
            "description": "Invoice date of the system"
          },
          "invoice_number": {
            "type": "string",
            "title": "Invoice Number",
            "description": "Invoice number of the system"
          },
          "release_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputReleaseConfig"
              }
            ],
            "title": "Release Config",
            "description": "Release configuration of the system"
          },
          "assembled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Assembled At",
            "description": "Production date of the system - when it got assembled"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemType"
              }
            ],
            "description": "Type of the system"
          },
          "allow_internet_overconsumption": {
            "type": "boolean",
            "title": "Allow Internet Overconsumption",
            "description": "If the system is allowed to consume more internet than the license allows. Allowed consumption defined in extension packs.",
            "default": false
          },
          "ipc_serial_number": {
            "type": "string",
            "title": "Ipc Serial Number",
            "description": "IPC serial number of the system"
          },
          "lidar_serial_number": {
            "type": "string",
            "title": "Lidar Serial Number",
            "description": "Lidar serial number of the system"
          },
          "cam_1_serial_number": {
            "type": "string",
            "title": "Cam 1 Serial Number",
            "description": "1st or Left camera serial number of the system"
          },
          "cam_2_serial_number": {
            "type": "string",
            "title": "Cam 2 Serial Number",
            "description": "2nd or Right camera serial number of the system"
          },
          "cam_3_serial_number": {
            "type": "string",
            "title": "Cam 3 Serial Number",
            "description": "3rd or Lidar camera serial number of the system"
          },
          "sodex_name": {
            "type": "string",
            "title": "Sodex Name",
            "description": "Sodex name of the system - only seen internally"
          },
          "cam_4_serial_number": {
            "type": "string",
            "title": "Cam 4 Serial Number",
            "description": "Camera 4 serial number of the system - only exists on 4dvision"
          }
        },
        "type": "object",
        "required": ["name", "description", "type"],
        "title": "Input4DVisionSystem"
      },
      "InputAddCustomCapacity": {
        "properties": {
          "extension_pack_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionPackName"
              }
            ],
            "description": "Name of the extension pack"
          },
          "capacity": {
            "type": "number",
            "minimum": 0,
            "title": "Capacity",
            "description": "Capacity of the extension pack which is predefined"
          }
        },
        "type": "object",
        "required": ["extension_pack_name", "capacity"],
        "title": "InputAddCustomCapacity"
      },
      "InputAddExtensionPack": {
        "properties": {
          "extension_pack_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionPackName"
              }
            ],
            "description": "Name of the extension pack"
          },
          "capacity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CAPACITIES_HIGH_RES"
              },
              {
                "$ref": "#/components/schemas/CAPACITIES_MODE_3D"
              }
            ],
            "title": "Capacity",
            "description": "Capacity of the extension pack which is predefined"
          }
        },
        "type": "object",
        "required": ["extension_pack_name", "capacity"],
        "title": "InputAddExtensionPack"
      },
      "InputAiData": {
        "properties": {},
        "type": "object",
        "title": "InputAiData"
      },
      "InputApiConfig": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model"
          },
          "framework_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Framework Api",
            "description": "Framework api"
          },
          "framework_manager_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Framework Manager Api",
            "description": "Framework manager api"
          },
          "mm_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Mm Api",
            "description": "MM api"
          },
          "is_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Is Api",
            "description": "IS api"
          },
          "cam_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Cam Api",
            "description": "CAM api"
          },
          "pd_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Pd Api",
            "description": "Pandar api"
          },
          "op_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Op Api",
            "description": "OP api"
          },
          "db_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Db Api",
            "description": "DB api"
          },
          "cs_3d_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Cs 3D Api",
            "description": "CS 3D api"
          }
        },
        "type": "object",
        "title": "InputApiConfig"
      },
      "InputApplications": {
        "properties": {
          "application": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Applications"
              }
            ],
            "description": "Application the applications status is set for"
          },
          "down": {
            "type": "boolean",
            "title": "Down",
            "description": "If the service is down",
            "default": false
          },
          "maintenance": {
            "type": "boolean",
            "title": "Maintenance",
            "description": "if the service is currently under applications",
            "default": false
          },
          "time_up_at": {
            "type": "string",
            "format": "date-time",
            "title": "Time Up At",
            "description": "When the application is back up - either from maintenance or downtime"
          },
          "latest_version": {
            "type": "string",
            "title": "Latest Version",
            "description": "Latest version of the application"
          },
          "min_version": {
            "type": "string",
            "title": "Min Version",
            "description": "Minimum version of the application required for functional user experience"
          }
        },
        "type": "object",
        "required": ["application"],
        "title": "InputApplications"
      },
      "InputAuthClient": {
        "properties": {
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret"
          },
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Redirect Uris",
            "description": "Redirect URIs"
          }
        },
        "type": "object",
        "required": ["client_secret", "redirect_uris"],
        "title": "InputAuthClient"
      },
      "InputAutostartGeofence": {
        "properties": {
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Geofence points"
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of System IDs"
          }
        },
        "type": "object",
        "title": "InputAutostartGeofence"
      },
      "InputBaseSystem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the system"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the system"
          },
          "retrofit_at": {
            "type": "string",
            "format": "date-time",
            "title": "Retrofit At",
            "description": "Retrofit date of the system"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID  of the customer the system belongs to"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Sodex Serial number of the system"
          },
          "sensor_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SensorApi"
              }
            ],
            "description": "Assistance system of the system"
          },
          "invoice_date": {
            "type": "string",
            "format": "date-time",
            "title": "Invoice Date",
            "description": "Invoice date of the system"
          },
          "invoice_number": {
            "type": "string",
            "title": "Invoice Number",
            "description": "Invoice number of the system"
          },
          "release_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputReleaseConfig"
              }
            ],
            "title": "Release Config",
            "description": "Release configuration of the system"
          },
          "assembled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Assembled At",
            "description": "Production date of the system - when it got assembled"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemType"
              }
            ],
            "description": "Type of the system"
          },
          "allow_internet_overconsumption": {
            "type": "boolean",
            "title": "Allow Internet Overconsumption",
            "description": "If the system is allowed to consume more internet than the license allows. Allowed consumption defined in extension packs.",
            "default": false
          },
          "ipc_serial_number": {
            "type": "string",
            "title": "Ipc Serial Number",
            "description": "IPC serial number of the system"
          },
          "lidar_serial_number": {
            "type": "string",
            "title": "Lidar Serial Number",
            "description": "Lidar serial number of the system"
          },
          "cam_1_serial_number": {
            "type": "string",
            "title": "Cam 1 Serial Number",
            "description": "1st or Left camera serial number of the system"
          },
          "cam_2_serial_number": {
            "type": "string",
            "title": "Cam 2 Serial Number",
            "description": "2nd or Right camera serial number of the system"
          },
          "cam_3_serial_number": {
            "type": "string",
            "title": "Cam 3 Serial Number",
            "description": "3rd or Lidar camera serial number of the system"
          },
          "sodex_name": {
            "type": "string",
            "title": "Sodex Name",
            "description": "Sodex name of the system - only seen internally"
          }
        },
        "type": "object",
        "required": ["name", "description", "sensor_api", "type"],
        "title": "InputBaseSystem"
      },
      "InputBucket": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Bucket name"
          },
          "width": {
            "type": "number",
            "title": "Width",
            "description": "Bucket width"
          },
          "length": {
            "type": "number",
            "title": "Length",
            "description": "Bucket length"
          },
          "angle_offset": {
            "type": "number",
            "title": "Angle Offset",
            "description": "Angle offset in radians",
            "default": 0
          },
          "inverted": {
            "type": "boolean",
            "title": "Inverted",
            "description": "Inverted bucket",
            "default": false
          },
          "extraction_threshold": {
            "type": "number",
            "title": "Extraction Threshold",
            "description": "Extraction threshold",
            "default": 0
          }
        },
        "type": "object",
        "required": ["name", "width", "length"],
        "title": "InputBucket"
      },
      "InputCable": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable type"
          },
          "cable_type_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Type Id",
            "description": "Cable type ID"
          }
        },
        "type": "object",
        "required": ["name", "cable_type_id"],
        "title": "InputCable"
      },
      "InputCableBlockArea": {
        "properties": {
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "List of points that define the area - coordinates in radians"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable block area"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the cable block area"
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "description": "If the cable block area is disabled",
            "default": false
          }
        },
        "type": "object",
        "required": ["points", "name"],
        "title": "InputCableBlockArea"
      },
      "InputCableLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the layer"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputCableLayer"
      },
      "InputCablePoint": {
        "properties": {
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "Captured date of the cable point"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Latitude of the cable point in radians"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Longitude of the cable point in radians"
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "Altitude of the cable point in cm",
            "default": 0
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable point"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the cable point"
          }
        },
        "type": "object",
        "required": ["latitude", "longitude"],
        "title": "InputCablePoint"
      },
      "InputCableType": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable type"
          },
          "cores": {
            "type": "integer",
            "title": "Cores",
            "description": "Number of cores of the cable type"
          },
          "diameter": {
            "type": "number",
            "title": "Diameter",
            "description": "Diameter of the cable type"
          },
          "price_per_meter": {
            "type": "number",
            "title": "Price Per Meter",
            "description": "Price per meter of the cable type"
          },
          "weight_per_meter": {
            "type": "number",
            "title": "Weight Per Meter",
            "description": "Weight per meter of the cable type"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the cable type"
          },
          "manufacturer": {
            "type": "string",
            "title": "Manufacturer",
            "description": "Manufacturer of the cable type"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputCableType"
      },
      "InputCalendar": {
        "properties": {},
        "type": "object",
        "title": "InputCalendar"
      },
      "InputCamConfig": {
        "properties": {
          "cam_id_snapshots": {
            "type": "integer",
            "title": "Cam Id Snapshots",
            "description": "camera to be used for snapshot creation"
          },
          "cam_id_ref_imgs": {
            "type": "integer",
            "title": "Cam Id Ref Imgs",
            "description": "camera to be used for reference image creation"
          },
          "cam_id_livestream": {
            "type": "integer",
            "title": "Cam Id Livestream",
            "description": "camera to be used for livestream creation"
          },
          "cam_id_op": {
            "type": "integer",
            "title": "Cam Id Op",
            "description": "camera to be used for orthophoto creation"
          }
        },
        "type": "object",
        "title": "InputCamConfig"
      },
      "InputCamera": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this cameras component document"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Camera name"
          },
          "cable_tracking": {
            "type": "boolean",
            "title": "Cable Tracking",
            "description": "Camera can be used for cable tracking",
            "default": false
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              }
            ],
            "description": "Camera position in the system"
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "description": "Camera is disabled",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "name", "position"],
        "title": "InputCamera"
      },
      "InputCameraConfig": {
        "properties": {
          "component_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Component Id",
            "description": "Id of the component the parameters belong to"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "description of the camera config so it can be more easily found"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamType"
              }
            ],
            "description": "type of the camera config"
          },
          "ts_offset": {
            "type": "number",
            "title": "Ts Offset",
            "description": "timestamp offset of the camera"
          },
          "rotate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rotate"
              }
            ],
            "description": "rotation of the camera which should be applied"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "source of the camera stream (only ark)"
          },
          "intrinsic": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Intrinsic",
            "description": "intrinsic matrix of the camera"
          },
          "distortion": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Distortion",
            "description": "distortion coefficients of the camera"
          },
          "s3_calibration_imgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Calibration Imgs",
            "description": "list of calibration images in s3 bucket"
          },
          "cam_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam Pos",
            "description": "position of the camera in the world",
            "default": [0, 0, 0]
          },
          "com_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Com Orient",
            "description": "orientation of the camera in the world",
            "default": [0, 0, 0]
          },
          "low_res_op": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectionConfig"
              }
            ],
            "title": "Low Res Op",
            "description": "low res operation of the camera"
          },
          "high_res_op": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectionConfig"
              }
            ],
            "title": "High Res Op",
            "description": "high res operation of the camera"
          }
        },
        "type": "object",
        "title": "InputCameraConfig"
      },
      "InputCheckpoint": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Checkpoint Points name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Checkpoint Points description"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Checkpoint Point latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Checkpoint Point longitude"
          },
          "target_height": {
            "type": "number",
            "title": "Target Height",
            "description": "Checkpoint Point target height"
          }
        },
        "type": "object",
        "required": ["name", "latitude", "longitude"],
        "title": "InputCheckpoint"
      },
      "InputCompactSystem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the system"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the system"
          },
          "retrofit_at": {
            "type": "string",
            "format": "date-time",
            "title": "Retrofit At",
            "description": "Retrofit date of the system"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID  of the customer the system belongs to"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Sodex Serial number of the system"
          },
          "sensor_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SensorApi"
              }
            ],
            "description": "Assistance system of the system",
            "default": "sdx-compact"
          },
          "invoice_date": {
            "type": "string",
            "format": "date-time",
            "title": "Invoice Date",
            "description": "Invoice date of the system"
          },
          "invoice_number": {
            "type": "string",
            "title": "Invoice Number",
            "description": "Invoice number of the system"
          },
          "release_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputReleaseConfig"
              }
            ],
            "title": "Release Config",
            "description": "Release configuration of the system"
          },
          "assembled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Assembled At",
            "description": "Production date of the system - when it got assembled"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemType"
              }
            ],
            "description": "Type of the system"
          },
          "allow_internet_overconsumption": {
            "type": "boolean",
            "title": "Allow Internet Overconsumption",
            "description": "If the system is allowed to consume more internet than the license allows. Allowed consumption defined in extension packs.",
            "default": false
          },
          "ipc_serial_number": {
            "type": "string",
            "title": "Ipc Serial Number",
            "description": "IPC serial number of the system"
          },
          "lidar_serial_number": {
            "type": "string",
            "title": "Lidar Serial Number",
            "description": "Lidar serial number of the system"
          },
          "cam_left_serial_number": {
            "type": "string",
            "title": "Cam Left Serial Number",
            "description": "1st or Left camera serial number of the system"
          },
          "cam_right_serial_number": {
            "type": "string",
            "title": "Cam Right Serial Number",
            "description": "2nd or Right camera serial number of the system"
          },
          "cam_lidar_serial_number": {
            "type": "string",
            "title": "Cam Lidar Serial Number",
            "description": "3rd or Lidar camera serial number of the system"
          },
          "sodex_name": {
            "type": "string",
            "title": "Sodex Name",
            "description": "Sodex name of the system - only seen internally"
          },
          "gnss_serial_number": {
            "type": "string",
            "title": "Gnss Serial Number",
            "description": "GNSS serial number of the system"
          },
          "antenna_left_serial_number": {
            "type": "string",
            "title": "Antenna Left Serial Number",
            "description": "Left antenna serial number of the system"
          },
          "antenna_right_serial_number": {
            "type": "string",
            "title": "Antenna Right Serial Number",
            "description": "Right antenna serial number of the system"
          }
        },
        "type": "object",
        "required": ["name", "description", "type"],
        "title": "InputCompactSystem"
      },
      "InputComponent": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the component"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "ID of the system the component belongs to"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "ID of the organization the component belongs to"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Serial number of the component"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ComponentTypes"
              }
            ],
            "description": "Type of the component"
          },
          "position": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              },
              {
                "$ref": "#/components/schemas/LidarPosition"
              },
              {
                "$ref": "#/components/schemas/GNSSPosition"
              }
            ],
            "title": "Position",
            "description": "position of the component on the system. Only used for cameras, lidars and GNSS"
          }
        },
        "type": "object",
        "required": ["name", "type"],
        "title": "InputComponent"
      },
      "InputConfig": {
        "properties": {
          "arm_rot": {
            "type": "boolean",
            "title": "Arm Rot",
            "description": "specifies if the arm can roatate left and right"
          },
          "arm_2": {
            "type": "boolean",
            "title": "Arm 2",
            "description": "specifies if the excavator has a 2nd arm"
          }
        },
        "type": "object",
        "title": "InputConfig"
      },
      "InputCoordinateSystem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of coordinate system"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Configuration"
              }
            ],
            "description": "Type of coordinate system configuration"
          },
          "configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CoordinateSystemCustom"
              },
              {
                "$ref": "#/components/schemas/CoordinateSystemCalibrationFile"
              },
              {
                "$ref": "#/components/schemas/CoordinateSystemControlPoints"
              },
              {
                "$ref": "#/components/schemas/MachineControl"
              }
            ],
            "title": "Configuration"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization id"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          }
        },
        "type": "object",
        "required": ["type", "configuration"],
        "title": "InputCoordinateSystem"
      },
      "InputCopy": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "File Ids",
            "description": "List of file IDs to copy",
            "default": []
          },
          "folder_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Folder Ids",
            "description": "List of folder IDs to copy",
            "default": []
          }
        },
        "type": "object",
        "title": "InputCopy"
      },
      "InputCorrectionservice": {
        "properties": {
          "ntrip_server": {
            "type": "string",
            "title": "Ntrip Server",
            "description": "NTRIP server address"
          },
          "ntrip_port": {
            "type": "integer",
            "title": "Ntrip Port",
            "description": "NTRIP server port",
            "default": 2101
          },
          "ntrip_mountpoint": {
            "type": "string",
            "title": "Ntrip Mountpoint",
            "description": "NTRIP mountpoint"
          },
          "ntrip_username": {
            "type": "string",
            "title": "Ntrip Username",
            "description": "NTRIP username"
          },
          "ntrip_password": {
            "type": "string",
            "title": "Ntrip Password",
            "description": "NTRIP password"
          },
          "correction_datum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalDatum"
              }
            ],
            "description": "Datum of the data to be corrected",
            "default": "wgs84"
          },
          "validated": {
            "type": "boolean",
            "title": "Validated",
            "description": "Whether the correctionservice has been validated",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "ntrip_server",
          "ntrip_mountpoint",
          "ntrip_username",
          "ntrip_password"
        ],
        "title": "InputCorrectionservice"
      },
      "InputCrossSection": {
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__crosssections__constants__CrossSectionType"
              }
            ],
            "description": "Type of the cross section to export"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "object of the snapshot or tobe_terrain"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the cross section points should be from manipulated snapshot version",
            "default": false
          }
        },
        "type": "object",
        "required": ["type", "object_id"],
        "title": "InputCrossSection"
      },
      "InputCrossSectionPointsExport": {
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__crosssections__constants__CrossSectionType"
              }
            ],
            "description": "Type of the cross section to export"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "object of the snapshot or tobe_terrain"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the cross section points should be from manipulated snapshot version",
            "default": false
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossSectionExportFileType"
              }
            ],
            "description": "Type of the file to export",
            "default": ".csv"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the cross section points of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["type", "object_id"],
        "title": "InputCrossSectionPointsExport"
      },
      "InputCrossSectionProject": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cross section project"
          },
          "point_1": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 1",
            "description": "Point 1 of the cross section in radiant"
          },
          "point_2": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 2",
            "description": "Point 2 of the cross section in radiant"
          },
          "cross_sections": {
            "items": {
              "$ref": "#/components/schemas/BaseCrossSection"
            },
            "type": "array",
            "title": "Cross Sections",
            "description": "Cross sections",
            "default": []
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the cross section"
          }
        },
        "type": "object",
        "required": ["name", "point_1", "point_2"],
        "title": "InputCrossSectionProject"
      },
      "InputCsMeta": {
        "properties": {
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Version of the csmeta",
            "default": 1
          },
          "coord_sys": {
            "type": "string",
            "title": "Coord Sys",
            "description": "Coordinate system type of the cs meta"
          },
          "global_origin_set": {
            "type": "boolean",
            "title": "Global Origin Set",
            "description": "Whether the global origin is set"
          },
          "ref_origin_set": {
            "type": "boolean",
            "title": "Ref Origin Set",
            "description": "Whether the reference origin is set"
          },
          "global_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Global Origin",
            "description": "Global origin location in radians and cm for altitude"
          },
          "ref_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Ref Origin",
            "description": "Reference origin location in radians and cm for altitude"
          },
          "chunk_voxel_size": {
            "type": "number",
            "title": "Chunk Voxel Size",
            "description": "Chunk voxel size in cm"
          },
          "n_params_float32": {
            "type": "integer",
            "title": "N Params Float32",
            "description": "Number of float32 parameters"
          },
          "n_params_uint16": {
            "type": "integer",
            "title": "N Params Uint16",
            "description": "Number of uint16 parameters"
          },
          "n_params_uint8": {
            "type": "integer",
            "title": "N Params Uint8",
            "description": "Number of uint8 parameters"
          },
          "created_ts": {
            "type": "number",
            "title": "Created Ts",
            "description": "Timestamp of creation"
          }
        },
        "type": "object",
        "required": [
          "coord_sys",
          "global_origin_set",
          "ref_origin_set",
          "global_origin",
          "ref_origin",
          "chunk_voxel_size",
          "n_params_float32",
          "n_params_uint16",
          "n_params_uint8",
          "created_ts"
        ],
        "title": "InputCsMeta"
      },
      "InputCsParam": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "description of the machine"
          },
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__csparams__schemas__InputGeneral"
              }
            ],
            "title": "General",
            "description": "general parameters of the machine"
          },
          "synced_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputSyncedData"
              }
            ],
            "title": "Synced Data",
            "description": "synced data parameters of the machine"
          },
          "cam_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputCamConfig"
              }
            ],
            "title": "Cam Config",
            "description": "camera configuration of the machine"
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputFilter"
              }
            ],
            "title": "Filter",
            "description": "filter parameters of the machine"
          },
          "orthophoto": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__csparams__schemas__InputOrthophoto"
              }
            ],
            "title": "Orthophoto",
            "description": "orthophoto parameters of the machine"
          },
          "img_capturing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputImgCapturing"
              }
            ],
            "title": "Img Capturing",
            "description": "image capturing parameters of the machine"
          }
        },
        "type": "object",
        "title": "InputCsParam"
      },
      "InputCustomerOrder": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/InputOrderItem"
            },
            "type": "array",
            "title": "Items",
            "description": "Items included in the order"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "InputCustomerOrder"
      },
      "InputCustomerOrganization": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the organization"
          },
          "org_admin_email": {
            "type": "string",
            "format": "email",
            "title": "Org Admin Email",
            "description": "Email address of the first organization admin"
          },
          "send_invite_email": {
            "type": "boolean",
            "title": "Send Invite Email",
            "description": "Whether to send an invite email to the org admin",
            "default": true
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputCustomerOrder"
              }
            ],
            "title": "Order",
            "description": "Order containing the products to purchase to the customer"
          },
          "running_meter_billed": {
            "type": "boolean",
            "title": "Running Meter Billed",
            "description": "If true, the organization is billed by running meter instead of pixels",
            "default": false
          },
          "years_billed": {
            "type": "integer",
            "minimum": 1,
            "title": "Years Billed",
            "description": "years the subscriptions are billed for and valid for",
            "default": 1
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputCustomerOrganization"
      },
      "InputDashboard": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Dashboard name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputDashboard"
      },
      "InputDataset": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the dataset"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataTypes"
              }
            ],
            "description": "Type of the dataset data",
            "default": "cut_fill"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__datasets__constants__DataSource"
              }
            ],
            "description": "Data source of the dataset"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id",
            "description": "Geofence ID, if set only the data inside the geofence will be processed"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id",
            "description": "Reference terrain ID - only set if datasource is 'reference_terrain'"
          }
        },
        "type": "object",
        "required": ["name", "source"],
        "title": "InputDataset"
      },
      "InputDjiDock": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Serial Number"
          },
          "create_snapshots": {
            "type": "boolean",
            "title": "Create Snapshots",
            "description": "If snapshots should be created automatically with images from this dock",
            "default": false
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "If pins should be created automatically with images from this dock",
            "default": false
          },
          "grid_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid Size in cm of snapshots created by this dock",
            "default": 5
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point Insertion Option for snapshots created by this dock",
            "default": "lowest_point"
          },
          "drone_sn": {
            "type": "string",
            "title": "Drone Sn",
            "description": "Drone Serial Number"
          }
        },
        "type": "object",
        "required": ["name", "serial_number"],
        "title": "InputDjiDock"
      },
      "InputDownload": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "File Ids",
            "description": "List of file IDs to download at root level of zip",
            "default": []
          },
          "folder_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Folder Ids",
            "description": "List of folder IDs to download at root level of zip",
            "default": []
          },
          "download_name": {
            "type": "string",
            "title": "Download Name",
            "description": "Name of the download folder & zip file",
            "default": "sdx-cloud_download"
          }
        },
        "type": "object",
        "title": "InputDownload"
      },
      "InputDownloadSnapshot": {
        "properties": {
          "filetype": {
            "type": "string",
            "title": "Filetype"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the snapshot to download in the corresponding unit"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id"
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "default": false
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "default": false
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At"
          },
          "colorized_option": {
            "$ref": "#/components/schemas/ColorizedOption"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "default": false
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the snapshot of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["filetype", "resolution"],
        "title": "InputDownloadSnapshot"
      },
      "InputExportCable": {
        "properties": {
          "cable_segment_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Cable Segment Ids",
            "description": "List of cable segment ids to export"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportCableFileType"
              }
            ],
            "description": "Filetype to export"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the cables of the export",
            "default": "m"
          }
        },
        "type": "object",
        "required": ["cable_segment_ids", "filetype"],
        "title": "InputExportCable"
      },
      "InputExportCableExplorer": {
        "properties": {
          "cable_segment_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Cable Segment Ids",
            "description": "List of cable segment ids to export"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportCableFileType"
              }
            ],
            "description": "Filetype to export"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the cables of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          }
        },
        "type": "object",
        "required": ["cable_segment_ids", "filetype", "file_name"],
        "title": "InputExportCableExplorer"
      },
      "InputExportHighResV2Layer": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype to export",
            "default": ".las"
          },
          "colorized_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerColorizedOption"
              }
            ],
            "description": "Colorized option",
            "default": "colored_by_camera"
          },
          "export_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerExportOptions"
              }
            ],
            "description": "Export option",
            "default": "all_points"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the snapshot of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "title": "InputExportHighResV2Layer"
      },
      "InputExportLayer3D": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          }
        },
        "type": "object",
        "required": ["filetype", "resolution"],
        "title": "InputExportLayer3D"
      },
      "InputExportLayer3DExplorer": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          }
        },
        "type": "object",
        "required": ["filetype", "resolution", "file_name"],
        "title": "InputExportLayer3DExplorer"
      },
      "InputExportLayerHighRes": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["filetype"],
        "title": "InputExportLayerHighRes"
      },
      "InputExportLayerHighResExplorer": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          }
        },
        "type": "object",
        "required": ["filetype", "file_name"],
        "title": "InputExportLayerHighResExplorer"
      },
      "InputExportLayerPhotoExplorer": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "Export local coordinates in csv",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "Export global coordinates in csv",
            "default": false
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          }
        },
        "type": "object",
        "required": ["file_name"],
        "title": "InputExportLayerPhotoExplorer"
      },
      "InputExportMergedLayer3D": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          }
        },
        "type": "object",
        "required": ["filetype", "resolution"],
        "title": "InputExportMergedLayer3D"
      },
      "InputExportMergedLayer3DExplorer": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "Name of the export as file"
          }
        },
        "type": "object",
        "required": ["filetype", "resolution", "file_name"],
        "title": "InputExportMergedLayer3DExplorer"
      },
      "InputExportMergedLayerHighRes": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["filetype"],
        "title": "InputExportMergedLayerHighRes"
      },
      "InputExportMergedLayerHighResExplorer": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "Name of the export as file"
          }
        },
        "type": "object",
        "required": ["filetype", "file_name"],
        "title": "InputExportMergedLayerHighResExplorer"
      },
      "InputExportMergedLayerPhoto": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "Export local coordinates in csv",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "Export global coordinates in csv",
            "default": false
          }
        },
        "type": "object",
        "title": "InputExportMergedLayerPhoto"
      },
      "InputExportMergedLayerPhotoExplorer": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "Export local coordinates in csv",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "Export global coordinates in csv",
            "default": false
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "Name of the export as file"
          }
        },
        "type": "object",
        "required": ["file_name"],
        "title": "InputExportMergedLayerPhotoExplorer"
      },
      "InputExportPhotoLayer": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "Export local coordinates in csv",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "Export global coordinates in csv",
            "default": false
          }
        },
        "type": "object",
        "title": "InputExportPhotoLayer"
      },
      "InputExportPileBase": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "List of coordinates"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "description": "Coordinate type, local must be in cm",
            "default": "global"
          },
          "height_limit": {
            "type": "integer",
            "title": "Height Limit",
            "description": "Height limit in cm - only for local coordinate type"
          },
          "height": {
            "type": "number",
            "title": "Height"
          },
          "reference_terrain_id": {
            "type": "string",
            "title": "Reference Terrain Id"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "default": false
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportPileBaseFileType"
              }
            ],
            "description": "Type of the file to export"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the snapshot of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["coords", "type", "filetype"],
        "title": "InputExportPileBase"
      },
      "InputExportPotreeMeasurements": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the measurements of the export",
            "default": "m"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportPotreeMeasurementsFileType"
              }
            ],
            "description": "Type of the file to export"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["filetype"],
        "title": "InputExportPotreeMeasurements"
      },
      "InputExportProjectXML": {
        "properties": {
          "date_from": {
            "type": "string",
            "format": "date-time",
            "title": "Date From",
            "description": "Date from which to export the project xml, uses latest snapshot of that date"
          },
          "grid_size": {
            "type": "integer",
            "maximum": 300,
            "minimum": 100,
            "title": "Grid Size",
            "description": "Grid size in cm",
            "default": 100
          }
        },
        "type": "object",
        "title": "InputExportProjectXML"
      },
      "InputExportSnapshotExplorer": {
        "properties": {
          "filetype": {
            "type": "string",
            "title": "Filetype"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the snapshot to download in the corresponding unit"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id"
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "default": false
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "default": false
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At"
          },
          "colorized_option": {
            "$ref": "#/components/schemas/ColorizedOption"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "default": false
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the snapshot of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          }
        },
        "type": "object",
        "required": ["filetype", "resolution", "file_name"],
        "title": "InputExportSnapshotExplorer"
      },
      "InputExportStoredLines": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoredLinesExportFileType"
              }
            ],
            "description": "Type of the file to export"
          },
          "stored_lines_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "minItems": 1,
            "title": "Stored Lines Ids",
            "description": "List of stored lines ids to export"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the stored lines of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["filetype", "stored_lines_ids", "project_id"],
        "title": "InputExportStoredLines"
      },
      "InputExportStoredPoints": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoredPointsExportFileType"
              }
            ],
            "description": "Type of the file to export"
          },
          "stored_points_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "minItems": 1,
            "title": "Stored Points Ids",
            "description": "List of stored points ids to export"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the stored points of the export",
            "default": "m"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          }
        },
        "type": "object",
        "required": ["filetype", "stored_points_ids", "project_id"],
        "title": "InputExportStoredPoints"
      },
      "InputExtensionPack": {
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionPackName"
              }
            ],
            "description": "Type of the extension pack"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionType"
              }
            ],
            "description": "Type of the extension pack (e.g. system)"
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionUnit"
              }
            ],
            "description": "Unit of the extension pack"
          },
          "capacity": {
            "type": "number",
            "title": "Capacity",
            "description": "Capacity of the extension pack e.g. 1000 (MB)"
          },
          "default_licenses": {
            "items": {
              "$ref": "#/components/schemas/LicenseTypes"
            },
            "type": "array",
            "description": "Default licenses for the extension pack"
          }
        },
        "type": "object",
        "required": ["name", "type", "unit", "capacity"],
        "title": "InputExtensionPack"
      },
      "InputExtraction": {
        "properties": {
          "disable_extraction": {
            "type": "boolean",
            "title": "Disable Extraction",
            "description": "disables the extraction of the machine"
          },
          "disable_extraction_cuboids": {
            "type": "boolean",
            "title": "Disable Extraction Cuboids",
            "description": "disables the extraction of the machine cuboids"
          },
          "point_4": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 4",
            "description": "point 4 of the extraction of the machine itself in cm"
          },
          "point_5": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 5",
            "description": "point 5 of the extraction of the machine itself in cm"
          },
          "point_6": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 6",
            "description": "point 6 of the extraction of the machine itself in cm"
          },
          "point_7": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 7",
            "description": "point 7 of the extraction of the machine itself in cm"
          },
          "point_8": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 8",
            "description": "point 8 of the extraction of the machine itself in cm"
          }
        },
        "type": "object",
        "title": "InputExtraction"
      },
      "InputFeature": {
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Feature"
              }
            ],
            "description": "Feature name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Feature description"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Feature enabled"
          }
        },
        "type": "object",
        "required": ["name", "enabled"],
        "title": "InputFeature"
      },
      "InputFiletype": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the filetype"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the filetype"
          },
          "snapshot_download": {
            "type": "boolean",
            "title": "Snapshot Download",
            "description": "Does the filetype have snapshot download",
            "default": false
          },
          "mesh": {
            "type": "boolean",
            "title": "Mesh",
            "description": "Does the filetype have mesh",
            "default": false
          },
          "resolution": {
            "type": "boolean",
            "title": "Resolution",
            "description": "Does the filetype have resolution",
            "default": false
          },
          "points": {
            "type": "boolean",
            "title": "Points",
            "description": "Does the filetype have points",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "type"],
        "title": "InputFiletype"
      },
      "InputFilter": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the filter is active"
          }
        },
        "type": "object",
        "title": "InputFilter"
      },
      "InputFolder": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the folder"
          },
          "parent_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Id",
            "description": "ID of the parent folder - required for user input folder"
          }
        },
        "type": "object",
        "required": ["name", "parent_id"],
        "title": "InputFolder"
      },
      "InputGcpSet": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the gcp_set"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the gcp_set"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date",
            "description": "Start date of the gcp_set"
          },
          "diagonal_length": {
            "type": "number",
            "title": "Diagonal Length",
            "description": "Diagonal length in mm"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__other_schemas__Gcp"
            },
            "type": "array",
            "title": "Points",
            "description": "List of GCPs"
          }
        },
        "type": "object",
        "required": ["name", "start_date", "diagonal_length", "points"],
        "title": "InputGcpSet"
      },
      "InputGeofence": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Geofence name"
          },
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Geofence coordinates"
          }
        },
        "type": "object",
        "required": ["name", "coords"],
        "title": "InputGeofence"
      },
      "InputGeofenceDetectionBox": {
        "properties": {
          "bounding_box": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Bounding Box",
            "description": "List of 4 coordinates representing the bounding box in global coordinates in radians (lat, lon)"
          },
          "detection_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeofenceDetectionType"
              }
            ],
            "description": "Type of the geofence detection to export",
            "default": "pile"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "min_points": {
            "type": "integer",
            "minimum": 3,
            "title": "Min Points",
            "description": "Minimum number of points in the detected geofence",
            "default": 3
          },
          "max_points": {
            "type": "integer",
            "minimum": 3,
            "title": "Max Points",
            "description": "Maximum number of points in the detected geofence",
            "default": 20
          }
        },
        "type": "object",
        "required": ["bounding_box"],
        "title": "InputGeofenceDetectionBox"
      },
      "InputGlobalPoint": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in degree"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in degree"
          }
        },
        "type": "object",
        "required": ["lat", "lon"],
        "title": "InputGlobalPoint"
      },
      "InputHistoryPoint": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat"
          },
          "lon": {
            "type": "number",
            "title": "Lon"
          },
          "start_calc_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start Calc At"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "default": false
          }
        },
        "type": "object",
        "required": ["lat", "lon", "start_calc_at"],
        "title": "InputHistoryPoint"
      },
      "InputImgCapturing": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the image capturing is active"
          },
          "frequency": {
            "type": "number",
            "title": "Frequency",
            "description": "frequency of the image capturing in seconds"
          }
        },
        "type": "object",
        "title": "InputImgCapturing"
      },
      "InputInfomapfilter": {
        "properties": {
          "time_filter": {
            "type": "boolean",
            "title": "Time Filter",
            "description": "If time filter is activated or not"
          },
          "time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputTimeConfig"
              }
            ],
            "title": "Time",
            "description": "Time config of the filter"
          },
          "geofence_filter": {
            "type": "boolean",
            "title": "Geofence Filter",
            "description": "If geofence filter is activated or not"
          },
          "geofence_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Geofence Ids",
            "description": "List of geofence IDs of the filter",
            "default": []
          },
          "system_filter": {
            "type": "boolean",
            "title": "System Filter",
            "description": "If system filter is activated or not"
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of system IDs of the filter",
            "default": []
          }
        },
        "type": "object",
        "required": ["time_filter", "geofence_filter", "system_filter"],
        "title": "InputInfomapfilter"
      },
      "InputIsParam": {
        "properties": {
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__isparams__schemas__InputGeneral"
              }
            ],
            "title": "General",
            "description": "General parameters"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the parameters"
          },
          "leica": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputLeica"
              }
            ],
            "title": "Leica",
            "description": "Leica parameters"
          },
          "mts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputMts"
              }
            ],
            "title": "Mts",
            "description": "MTS parameters"
          },
          "topcon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputTopcon"
              }
            ],
            "title": "Topcon",
            "description": "Topcon parameters"
          },
          "volvo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputVolvo"
              }
            ],
            "title": "Volvo",
            "description": "Volvo parameters"
          },
          "sp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputSeptentrio"
              }
            ],
            "title": "Sp",
            "description": "Septentrio parameters"
          },
          "trafo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Trafo"
              }
            ],
            "title": "Trafo",
            "description": "Trafo parameters"
          },
          "ai_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtificialintelligenceData"
              }
            ],
            "title": "Ai Data",
            "description": "AI data parameters"
          }
        },
        "type": "object",
        "title": "InputIsParam"
      },
      "InputLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the layer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerType"
              }
            ],
            "description": "Type of the layer",
            "default": "high_res"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputLayer"
      },
      "InputLayerData": {
        "properties": {
          "global_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Global Pos",
            "description": "Global position of the layer data in radians"
          },
          "local_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Local Pos",
            "description": "Local position of the layer data in cm. [easting, northing, height]"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the layer data in radians"
          },
          "mb_to_remove": {
            "type": "number",
            "title": "Mb To Remove",
            "description": "MB to remove from the extension pack layer data",
            "default": 0.001
          },
          "s3_url": {
            "type": "string",
            "title": "S3 Url",
            "description": "S3 key of the layer data"
          }
        },
        "type": "object",
        "required": ["s3_url"],
        "title": "InputLayerData"
      },
      "InputLeica": {
        "properties": {
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the udp-stream"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the udp-stream"
          },
          "udp_broke": {
            "type": "boolean",
            "title": "Udp Broke",
            "description": "if the udp-stream is broken or not"
          },
          "eth_interface": {
            "type": "string",
            "title": "Eth Interface",
            "description": "ethernet interface if raw socket is used"
          }
        },
        "type": "object",
        "title": "InputLeica"
      },
      "InputLicenseConfigs": {
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Features"
              }
            ],
            "description": "Feature key"
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureCategory"
              }
            ],
            "description": "Feature category"
          },
          "disabled_for": {
            "items": {
              "$ref": "#/components/schemas/LicenseTypes"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["key", "category"],
        "title": "InputLicenseConfigs"
      },
      "InputLidarConfig": {
        "properties": {
          "modelname": {
            "type": "string",
            "title": "Modelname",
            "description": "Name of the model"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model"
          },
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "IP address of the lidar"
          },
          "dest_ip_address": {
            "type": "string",
            "title": "Dest Ip Address",
            "description": "Destination ip of the udp stream"
          },
          "control_port": {
            "type": "integer",
            "title": "Control Port",
            "description": "port for the TCP socket of the lidar"
          },
          "stream_port": {
            "type": "integer",
            "title": "Stream Port",
            "description": "port for the UDP stream of the lidar"
          },
          "spin_rate": {
            "type": "integer",
            "title": "Spin Rate",
            "description": "spin rate of the lidar"
          },
          "return_mode": {
            "type": "integer",
            "title": "Return Mode",
            "description": "return mode of the lidar"
          },
          "start_angle": {
            "type": "integer",
            "title": "Start Angle",
            "description": "start angle of the lidar"
          },
          "end_angle": {
            "type": "integer",
            "title": "End Angle",
            "description": "end angle of the lidar"
          },
          "ptp": {
            "type": "boolean",
            "title": "Ptp",
            "description": "\tspecifies if ptp is used or not (ntp)"
          },
          "s3_lidar2imu": {
            "type": "string",
            "title": "S3 Lidar2Imu",
            "description": "S3 path to the lidar2imu calibration file"
          },
          "s3_lidar2cam": {
            "type": "string",
            "title": "S3 Lidar2Cam",
            "description": "S3 path to the lidar2cam calibration file"
          },
          "component_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Component Id",
            "description": "MongoDB unique ID of the component this lidar belongs to"
          }
        },
        "type": "object",
        "title": "InputLidarConfig"
      },
      "InputLine": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the line"
          },
          "height": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Height",
            "description": "list of height"
          },
          "distances": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Distances",
            "description": "list of distance"
          },
          "easting": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Easting",
            "description": "list of easting"
          },
          "northing": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Northing",
            "description": "list of northing"
          },
          "cross_section_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cross Section Project Id",
            "description": "Cross section project ID"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the line"
          }
        },
        "type": "object",
        "required": ["name", "height", "distances", "easting", "northing"],
        "title": "InputLine"
      },
      "InputLineDetectionBox": {
        "properties": {
          "bounding_box": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Bounding Box",
            "description": "List of 4 coordinates representing the bounding box in global coordinates in radians (lat, lon)"
          },
          "detection_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LineDetectionType"
              }
            ],
            "description": "Type of the line detection to export",
            "default": "cable"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "min_points": {
            "type": "integer",
            "minimum": 2,
            "title": "Min Points",
            "description": "Minimum number of points in the detected line",
            "default": 2
          },
          "max_points": {
            "type": "integer",
            "minimum": 2,
            "title": "Max Points",
            "description": "Maximum number of points in the detected line",
            "default": 20
          },
          "min_points_distance": {
            "type": "number",
            "minimum": 20,
            "title": "Min Points Distance",
            "description": "Minimum distance between points of the detected line in cm",
            "default": 100
          },
          "max_points_distance": {
            "type": "number",
            "minimum": 30,
            "title": "Max Points Distance",
            "description": "Maximum distance between points of the detected line in cm",
            "default": 200
          }
        },
        "type": "object",
        "required": ["bounding_box"],
        "title": "InputLineDetectionBox"
      },
      "InputLineExport": {
        "properties": {
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossSectionExportFileType"
              }
            ],
            "description": "Type of the file to export"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the line of the export",
            "default": "m"
          }
        },
        "type": "object",
        "required": ["filetype"],
        "title": "InputLineExport"
      },
      "InputLocalPoint": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting in m"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing in m"
          }
        },
        "type": "object",
        "required": ["easting", "northing"],
        "title": "InputLocalPoint"
      },
      "InputMachineConfig": {
        "properties": {
          "modelname": {
            "type": "string",
            "title": "Modelname",
            "description": "BaseModel name of the machine"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the machine"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputConfig"
              }
            ],
            "title": "Config",
            "description": "Config of the machine"
          },
          "measurements": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__machineconfigs__schemas__InputMeasurements"
              }
            ],
            "title": "Measurements",
            "description": "Measurements of the machine"
          },
          "extraction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputExtraction"
              }
            ],
            "title": "Extraction",
            "description": "Extraction of the machine"
          },
          "sensors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputSensors"
              }
            ],
            "title": "Sensors",
            "description": "Sensors of the machine"
          },
          "offsets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputOffsets"
              }
            ],
            "title": "Offsets",
            "description": "Offsets of the machine"
          }
        },
        "type": "object",
        "title": "InputMachineConfig"
      },
      "InputManagerConfig": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model"
          },
          "ka_max": {
            "type": "integer",
            "title": "Ka Max",
            "description": "max time without a keep alive signal to be alive in seconds"
          },
          "ka_check_interval": {
            "type": "integer",
            "title": "Ka Check Interval",
            "description": "interval to check for keep alive signals in seconds"
          },
          "pwr_interface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PowerInterface"
              }
            ],
            "description": "can or gpio for switching sensor power on/off"
          },
          "can_baudrate": {
            "type": "integer",
            "title": "Can Baudrate",
            "description": "baudrate of the can interface"
          },
          "can_module_fan": {
            "type": "integer",
            "title": "Can Module Fan",
            "description": "can module fan"
          },
          "can_module_sensor": {
            "type": "integer",
            "title": "Can Module Sensor",
            "description": "can module sensor"
          },
          "can_module_tablet": {
            "type": "integer",
            "title": "Can Module Tablet",
            "description": "can module tablet"
          }
        },
        "type": "object",
        "title": "InputManagerConfig"
      },
      "InputManipulation": {
        "properties": {
          "fitting_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FittingPoint"
              }
            ],
            "title": "Fitting Point",
            "description": "Fitting point of the manipulation"
          }
        },
        "type": "object",
        "title": "InputManipulation"
      },
      "InputMeasureArea": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "List of coordinates"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the area should be from manipulated snapshot version",
            "default": false
          }
        },
        "type": "object",
        "required": ["coords"],
        "title": "InputMeasureArea"
      },
      "InputMeasureLayerArea": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "List of coordinates"
          }
        },
        "type": "object",
        "required": ["coords"],
        "title": "InputMeasureLayerArea"
      },
      "InputMeasureLayerPile": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "List of coordinates"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "description": "Coordinate type, local must be in cm",
            "default": "global"
          },
          "height_limit": {
            "type": "integer",
            "title": "Height Limit",
            "description": "Height limit in cm - only for local coordinate type"
          },
          "height": {
            "type": "number",
            "title": "Height"
          }
        },
        "type": "object",
        "required": ["coords", "type"],
        "title": "InputMeasureLayerPile"
      },
      "InputMeasureLayerPoints": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/MetaMeasureRoverPoint"
            },
            "type": "array",
            "maxItems": 200,
            "minItems": 1,
            "title": "Points",
            "description": "Measure points"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "InputMeasureLayerPoints"
      },
      "InputMeasurePile": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "List of coordinates"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "description": "Coordinate type, local must be in cm",
            "default": "global"
          },
          "height_limit": {
            "type": "integer",
            "title": "Height Limit",
            "description": "Height limit in cm - only for local coordinate type"
          },
          "height": {
            "type": "number",
            "title": "Height"
          },
          "reference_terrain_id": {
            "type": "string",
            "title": "Reference Terrain Id"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "default": false
          }
        },
        "type": "object",
        "required": ["coords", "type"],
        "title": "InputMeasurePile"
      },
      "InputMeasurePoint": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat"
          },
          "lon": {
            "type": "number",
            "title": "Lon"
          },
          "tobe_terrain_id": {
            "type": "string",
            "title": "Tobe Terrain Id"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "default": false
          }
        },
        "type": "object",
        "required": ["lat", "lon"],
        "title": "InputMeasurePoint"
      },
      "InputMeasurePointAPI": {
        "properties": {
          "global_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputGlobalPoint"
              }
            ],
            "title": "Global Point",
            "description": "Global point to measure. Must be set if local_point is not set."
          },
          "local_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputLocalPoint"
              }
            ],
            "title": "Local Point",
            "description": "Local point to measure. Must be set if global_point is not set."
          }
        },
        "type": "object",
        "title": "InputMeasurePointAPI"
      },
      "InputMeasurePoints": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/MetaMeasureRoverPoint"
            },
            "type": "array",
            "maxItems": 200,
            "minItems": 1,
            "title": "Points",
            "description": "Measure points"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "reference_terrain_id": {
            "type": "string",
            "title": "Reference Terrain Id",
            "description": "Reference terrain id"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "InputMeasurePoints"
      },
      "InputMeasurement": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/MeasurementPoint"
            },
            "type": "array",
            "minItems": 1,
            "title": "Points",
            "description": "List of measurement points"
          },
          "measurement_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementType"
              }
            ],
            "description": "Measurement Type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "measurement_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Measurement Layer Id",
            "description": "Measurement Layer ID"
          },
          "telekom_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementTelekomData"
              }
            ],
            "title": "Telekom Data",
            "description": "Telekom Data"
          },
          "area_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementAreaData"
              }
            ],
            "title": "Area Data",
            "description": "Area Data. Only set if measurement type is AREA"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color"
          }
        },
        "type": "object",
        "required": ["points", "measurement_type", "measurement_layer_id"],
        "title": "InputMeasurement"
      },
      "InputMeasurementLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "high_res_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "High Res Layer Id",
            "description": "High Res Layer ID"
          },
          "parent_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Layer Id",
            "description": "Parent Layer ID"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementLayerType"
              }
            ],
            "description": "Type of the measurement layer",
            "default": "data_project_sodex_layer"
          },
          "telekom_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementTelekomData"
              }
            ],
            "title": "Telekom Data",
            "description": "Telekom Data"
          },
          "default_color": {
            "type": "string",
            "title": "Default Color",
            "description": "Default color"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputMeasurementLayer"
      },
      "InputMergedLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the merged_layer"
          },
          "layer_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "minItems": 2,
            "title": "Layer Ids",
            "description": "List of layer IDs"
          }
        },
        "type": "object",
        "required": ["name", "layer_ids"],
        "title": "InputMergedLayer"
      },
      "InputMove": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "File Ids",
            "description": "List of file IDs to move",
            "default": []
          },
          "folder_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Folder Ids",
            "description": "List of folder IDs to move",
            "default": []
          }
        },
        "type": "object",
        "title": "InputMove"
      },
      "InputMts": {
        "properties": {
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the MTS-System"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the MTS-System"
          }
        },
        "type": "object",
        "title": "InputMts"
      },
      "InputNotificationSettings": {
        "properties": {
          "cloud_notificiations_enabled": {
            "type": "boolean",
            "title": "Cloud Notificiations Enabled",
            "description": "Are cloud notifications enabled",
            "default": true
          },
          "email_notifications_enabled": {
            "type": "boolean",
            "title": "Email Notifications Enabled",
            "description": "Are email notifications enabled",
            "default": false
          },
          "enabled_cloud_notifications": {
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "array",
            "description": "List of enabled notifications"
          },
          "enabled_email_notifications": {
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "array",
            "description": "List of enabled notifications for email"
          }
        },
        "type": "object",
        "title": "InputNotificationSettings"
      },
      "InputOffsets": {
        "properties": {
          "boom_offset": {
            "type": "number",
            "title": "Boom Offset",
            "description": "boom offset of the machine"
          },
          "boom2_offset": {
            "type": "number",
            "title": "Boom2 Offset",
            "description": "boom 2 offset of the machine"
          },
          "stick_offset": {
            "type": "number",
            "title": "Stick Offset",
            "description": "stick offset of the machine"
          },
          "psi": {
            "type": "number",
            "title": "Psi",
            "description": "beate"
          },
          "beta": {
            "type": "number",
            "title": "Beta",
            "description": "beate"
          },
          "epsilon": {
            "type": "number",
            "title": "Epsilon",
            "description": "beate"
          },
          "zeta": {
            "type": "number",
            "title": "Zeta",
            "description": "beate"
          },
          "chi": {
            "type": "number",
            "title": "Chi",
            "description": "beate"
          },
          "omega": {
            "type": "number",
            "title": "Omega",
            "description": "beate"
          }
        },
        "type": "object",
        "title": "InputOffsets"
      },
      "InputOrder": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/InputOrderItem"
            },
            "type": "array",
            "title": "Items",
            "description": "Items included in the order"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "InputOrder"
      },
      "InputOrderItem": {
        "properties": {
          "product_name": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CloudLicenseName"
              },
              {
                "$ref": "#/components/schemas/DataVolumeName"
              },
              {
                "$ref": "#/components/schemas/RunningMeterName"
              },
              {
                "$ref": "#/components/schemas/SdxCloudPackageName"
              },
              {
                "$ref": "#/components/schemas/GigaPixelName"
              },
              {
                "$ref": "#/components/schemas/PhotogrammetryCreditName"
              },
              {
                "type": "string"
              }
            ],
            "title": "Product Name",
            "description": "Name of the product"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "title": "Quantity",
            "description": "Quantity",
            "default": 1
          }
        },
        "type": "object",
        "required": ["product_name"],
        "title": "InputOrderItem"
      },
      "InputOrganization": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the organization"
          },
          "street": {
            "type": "string",
            "title": "Street",
            "description": "Street and house number"
          },
          "city": {
            "type": "string",
            "title": "City",
            "description": "City of the organization headquarters"
          },
          "postal_code": {
            "type": "string",
            "title": "Postal Code",
            "description": "Postal code of the city"
          },
          "country_name": {
            "type": "string",
            "title": "Country Name",
            "description": "Country Name of the organization headquarters"
          },
          "country_code": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "title": "Country Code",
            "description": "Country Code of the organization headquarters"
          },
          "phone": {
            "type": "string",
            "title": "Phone",
            "description": "Phone number of the organization"
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "title": "Invoice Email",
            "description": "Email address for invoices"
          },
          "tax_id_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxIdType"
              }
            ],
            "description": "Type of the tax ID"
          },
          "tax_id_value": {
            "type": "string",
            "title": "Tax Id Value",
            "description": "Value of the tax ID. e.g VAT in austria"
          },
          "logo_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Logo Id",
            "description": "ID of the file that contains the logo of the organization"
          },
          "tilesets_self_served": {
            "type": "boolean",
            "title": "Tilesets Self Served",
            "description": "If true, the mapbox tilesets are self served",
            "default": false
          },
          "tilesets_direct_serve": {
            "type": "boolean",
            "title": "Tilesets Direct Serve",
            "description": "If true, the sodex tilesets are directly served via the sdxengine",
            "default": false
          },
          "reseller": {
            "type": "boolean",
            "title": "Reseller",
            "description": "If true, the organization is a reseller",
            "default": false
          },
          "is_cloud_only": {
            "type": "boolean",
            "title": "Is Cloud Only",
            "description": "Wether the organization is a cloud only organization or not",
            "default": false
          },
          "trial_end_at": {
            "type": "string",
            "format": "date-time",
            "title": "Trial End At",
            "description": "Set if the organization is in trial mode. Unset as soon as organization bought datavolume."
          },
          "trial_start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Trial Start At",
            "description": "Set if the organization is in trial mode. Unset as soon as organization bought datavolume."
          },
          "industry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Industry"
              }
            ],
            "description": "Industry of the organization",
            "default": "construction"
          },
          "invoice_email_confirmed": {
            "type": "boolean",
            "title": "Invoice Email Confirmed",
            "description": "If true, the invoice email is confirmed",
            "default": false
          },
          "reseller_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reseller Id",
            "description": "ID of the reseller organization"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Language"
              }
            ],
            "description": "Language of the organization",
            "default": "en-US"
          },
          "can_whitelabel": {
            "type": "boolean",
            "title": "Can Whitelabel",
            "description": "If true, the organization can whitelabel",
            "default": false
          },
          "use_whitelabel": {
            "type": "boolean",
            "title": "Use Whitelabel",
            "description": "If true, the organization uses whitelabel",
            "default": false
          },
          "telekom_api_key": {
            "type": "string",
            "title": "Telekom Api Key",
            "description": "API key for the telekom API"
          },
          "reseller_service_emails": {
            "items": {
              "type": "string",
              "format": "email"
            },
            "type": "array",
            "title": "Reseller Service Emails",
            "description": "Reseller service emails of the organization. Get notified if processing fails."
          },
          "sdx_photogrammetry_enabled": {
            "type": "boolean",
            "title": "Sdx Photogrammetry Enabled",
            "description": "If true, the organization can use sdx photogrammetry",
            "default": false
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputOrganization"
      },
      "InputPendingJob": {
        "properties": {},
        "type": "object",
        "title": "InputPendingJob"
      },
      "InputPhase": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the phase"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the phase",
            "default": ""
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the phase"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Due date of the phase"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputPhase"
      },
      "InputPile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the pile"
          },
          "tag_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tag Id",
            "description": "ID of the soil (deprecated name tag) associated to the pile"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputPile"
      },
      "InputPileGeofence": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Coordinates of the geofence corner points in radiant [lat, lon] - must be at least 3 points."
          },
          "reference_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceMode"
              }
            ],
            "description": "Reference mode of the geofence - how the volume should be calculated."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the geofence"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height of the geofence -  only used if reference mode is 'height'"
          },
          "volume_display": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeDisplay"
              }
            ],
            "description": "Default volume display of the geofence",
            "default": "both"
          },
          "tobe_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tobe Terrain Id",
            "description": "ID of the terrain the geofence should calculate tobe volume from - only used if reference mode is 'tobe'"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "ID of the file the geofence should calculate volume from - only used if reference mode is 'file'"
          }
        },
        "type": "object",
        "required": ["coords", "reference_mode"],
        "title": "InputPileGeofence"
      },
      "InputPointCloud": {
        "properties": {
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "MongoDB unique ID of this snapshot or file"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__potrees__constants__PotreePointCloudType"
              }
            ],
            "description": "Type of the point cloud"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the point cloud"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointCloudConfig"
              }
            ],
            "title": "Config",
            "description": "Config of the point cloud",
            "default": {}
          }
        },
        "type": "object",
        "required": ["object_id", "type", "name"],
        "title": "InputPointCloud"
      },
      "InputPointLink": {
        "properties": {
          "point_1_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Point 1 Id",
            "description": "MongoDB unique ID of the first point"
          },
          "point_2_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Point 2 Id",
            "description": "MongoDB unique ID of the second point"
          },
          "shared": {
            "type": "boolean",
            "title": "Shared",
            "description": "If the points location is shared - the exact same one",
            "default": false
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the point link"
          }
        },
        "type": "object",
        "required": ["point_1_id", "point_2_id"],
        "title": "InputPointLink"
      },
      "InputPotree": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the potree"
          },
          "measurements": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__potree__schemas__InputMeasurements"
            },
            "type": "array",
            "title": "Measurements",
            "description": "Measurements of the potree",
            "default": []
          },
          "manipulation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Manipulation"
              }
            ],
            "title": "Manipulation",
            "description": "Manipulations of the potree"
          },
          "block_edit": {
            "type": "boolean",
            "title": "Block Edit",
            "description": "Block editing of the potree",
            "default": false
          },
          "block_display": {
            "type": "boolean",
            "title": "Block Display",
            "description": "Block display of the potree",
            "default": false
          },
          "point_clouds": {
            "items": {
              "$ref": "#/components/schemas/InputPointCloud"
            },
            "type": "array",
            "title": "Point Clouds",
            "description": "Point clouds of the potree",
            "default": []
          },
          "manipulations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputManipulation"
              }
            ],
            "title": "Manipulations",
            "description": "Manipulations of the potree",
            "default": {}
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputPotree"
      },
      "InputPotreeSideProfile": {
        "properties": {
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "Points of the side profile"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit of the points of the side profile",
            "default": "m"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "InputPotreeSideProfile"
      },
      "InputProfile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Profile name"
          },
          "machine_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineType"
              }
            ],
            "description": "Machine type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Profile description"
          },
          "cameras": {
            "items": {
              "$ref": "#/components/schemas/InputCamera"
            },
            "type": "array",
            "title": "Cameras",
            "description": "List of cameras",
            "default": []
          },
          "bearing_offset": {
            "type": "number",
            "title": "Bearing Offset",
            "description": "Bearing offset"
          },
          "min_y": {
            "type": "number",
            "title": "Min Y",
            "description": "Minimum y coordinate of the extraction"
          },
          "max_y": {
            "type": "number",
            "title": "Max Y",
            "description": "Maximum y coordinate of the extraction"
          },
          "min_x": {
            "type": "number",
            "title": "Min X",
            "description": "Minimum x coordinate of the extraction"
          },
          "max_x": {
            "type": "number",
            "title": "Max X",
            "description": "Maximum x coordinate of the extraction"
          },
          "machine_color": {
            "type": "string",
            "title": "Machine Color",
            "description": "Machine color"
          },
          "inner_extraction_area": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtractionArea"
              }
            ],
            "title": "Inner Extraction Area",
            "description": "Inner extraction area"
          },
          "limit_thresholds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitThresholds"
              }
            ],
            "title": "Limit Thresholds",
            "description": "Limit thresholds"
          }
        },
        "type": "object",
        "required": [
          "name",
          "machine_type",
          "bearing_offset",
          "min_y",
          "max_y",
          "min_x",
          "max_x"
        ],
        "title": "InputProfile"
      },
      "InputProject": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Geo-Location of the project in degrees. Format: [latitude, longitude, altitude]"
          },
          "location_name": {
            "type": "string",
            "title": "Location Name",
            "description": "Name of the location of the project"
          },
          "snapshot_imgs": {
            "type": "integer",
            "title": "Snapshot Imgs",
            "description": "Number of images per snapshot",
            "default": 3
          },
          "snapshot_period": {
            "type": "integer",
            "exclusiveMinimum":  true,
            "title": "Snapshot Period",
            "description": "Period of the snapshots in seconds",
            "default": 600
          },
          "ref_img_frequency": {
            "type": "integer",
            "title": "Ref Img Frequency",
            "description": "Frequency of the reference images in seconds"
          },
          "ref_img_distance": {
            "type": "number",
            "title": "Ref Img Distance",
            "description": "Distance of the systems reference images in between them"
          },
          "admin_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "minItems": 1,
            "title": "Admin Ids",
            "description": "IDs of the admins of the project"
          },
          "coordinate_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Coordinate System Id",
            "description": "Coordinate system ID"
          },
          "export_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__projects__schemas__ExportSettings"
              }
            ],
            "title": "Export Settings",
            "description": "Export settings of the project"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the project"
          },
          "deadline_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deadline At",
            "description": "Deadline date of the project"
          },
          "grid_size": {
            "type": "number",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the project in cm",
            "default": 5
          },
          "group": {
            "type": "string",
            "title": "Group",
            "description": "Group of the project"
          },
          "project_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Folder Id",
            "description": "ID of the project folder"
          },
          "use_new_tile_system": {
            "type": "boolean",
            "title": "Use New Tile System",
            "description": "Wether the project uses the new tile system or not",
            "default": true
          },
          "use_tile_api": {
            "type": "boolean",
            "title": "Use Tile Api",
            "description": "Wether the project uses the tile API or not",
            "default": false
          },
          "coordinate_system_pipeline": {
            "type": "string",
            "title": "Coordinate System Pipeline",
            "description": "Pipeline of the coordinate system of the project. Required for sdx-cloud projects."
          },
          "project_currency": {
            "type": "string",
            "title": "Project Currency",
            "description": "Currency of the project",
            "default": "eur"
          },
          "snapshots_processing_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ViscanProcessingModeType"
              }
            ],
            "description": "Processing type of the snapshots. Required for sdx-cloud projects."
          },
          "telekom_sma": {
            "type": "string",
            "title": "Telekom Sma",
            "description": "Telekom SMA of the project. To use this the telekom_api_key must be set in the organization and telekom_transfer enabled."
          },
          "telekom_transfer": {
            "type": "boolean",
            "title": "Telekom Transfer",
            "description": "Wether the project is automatic telekom transfer enabled or not"
          },
          "telekom_project": {
            "type": "boolean",
            "title": "Telekom Project",
            "description": "Wether the project is a telekom project or not. If yes, telekom layers can be created and automatic measurements are created in the telekom layer.",
            "default": false
          },
          "create_scin_snapshots": {
            "type": "boolean",
            "title": "Create Scin Snapshots",
            "description": "Wether the project creates scin snapshots automatically or not. If disabled a pending job will be created instead.",
            "default": true
          },
          "automatic_telekom_pin_transfer": {
            "type": "boolean",
            "title": "Automatic Telekom Pin Transfer",
            "description": "Wether to automatically transfers the telekom pins to the telekom portal"
          },
          "photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry provider for the project"
          },
          "default_snapshot_sdx_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultSnapshotSdxProcessingSettings"
              }
            ],
            "title": "Default Snapshot Sdx Processing Settings",
            "description": "Default processing settings for the project"
          },
          "member_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Member Ids",
            "description": "IDs of the members of the project",
            "default": []
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "IDs of the systems of the project",
            "default": []
          },
          "is_cloud_only": {
            "type": "boolean",
            "title": "Is Cloud Only",
            "description": "Wether the project is cloud only or not",
            "default": true
          }
        },
        "type": "object",
        "required": ["name", "location", "admin_ids"],
        "title": "InputProject"
      },
      "InputProject3DTimelapseConfig": {
        "properties": {
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the timelapse"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the timelapse"
          },
          "fps": {
            "type": "number",
            "title": "Fps",
            "description": "Frames per second",
            "default": 30
          }
        },
        "type": "object",
        "title": "InputProject3DTimelapseConfig"
      },
      "InputProjectFolder": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Folder name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputProjectFolder"
      },
      "InputProjectTag": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project_tag"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project_tag"
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "Color",
            "description": "Color of the project_tag"
          },
          "user_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "User Ids",
            "description": "List of user IDs that have access to the project_tag",
            "default": []
          },
          "snapshot_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Snapshot Ids",
            "description": "List of snapshot IDs associated with the project_tag",
            "default": []
          },
          "orthophoto_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Orthophoto Ids",
            "description": "List of orthophoto IDs associated with the project_tag",
            "default": []
          },
          "snapshot_comparison_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Snapshot Comparison Ids",
            "description": "List of snapshot_comparison IDs associated with the project_tag",
            "default": []
          },
          "dji_dock_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Dji Dock Ids",
            "description": "List of DJI dock IDs associated with the project_tag",
            "default": []
          },
          "measurement_layer_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Measurement Layer Ids",
            "description": "List of measurement layer IDs associated with the project_tag",
            "default": []
          },
          "plan2d_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Plan2D Ids",
            "description": "List of Plan2D IDs associated with the project_tag",
            "default": []
          }
        },
        "type": "object",
        "required": ["name", "color"],
        "title": "InputProjectTag"
      },
      "InputPurchase": {
        "properties": {
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputOrder"
              }
            ],
            "title": "Order",
            "description": "Order to purchase"
          },
          "credit_to_org_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Credit To Org Id",
            "description": "Organization to purchase for"
          }
        },
        "type": "object",
        "required": ["order"],
        "title": "InputPurchase"
      },
      "InputReleaseConfig": {
        "properties": {
          "hmi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "HMI release",
            "default": "stable"
          },
          "manager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "Manager release",
            "default": "stable"
          },
          "framework": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "Framework release",
            "default": "stable"
          },
          "jetson_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "SDX Jetson API release",
            "default": "stable"
          },
          "framework_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "SDX Framework API release",
            "default": "stable"
          }
        },
        "type": "object",
        "title": "InputReleaseConfig"
      },
      "InputScanTask": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Scan task name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Scan task description"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Scan task due date"
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Scan task geofence"
          },
          "assigned_to_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Assigned To System Id",
            "description": "System id of the system that the scan task is assigned to"
          }
        },
        "type": "object",
        "required": ["name", "geofence"],
        "title": "InputScanTask"
      },
      "InputSdxCloudFileSnapshotV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "tag_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Tag Ids",
            "description": "Tag IDs of the snapshot"
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option",
            "default": "lowest_point"
          },
          "grid_size": {
            "type": "number",
            "maximum": 100,
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the snapshot in cm",
            "default": 5
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created - where it will be inserted in the timeline."
          },
          "snapshot_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot File Id",
            "description": "The file id of the snapshot"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit",
            "default": "m"
          },
          "snapshot_source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__ImportSnapshotSource"
              }
            ],
            "description": "Type of the snapshot."
          },
          "orthophoto_tiff_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Orthophoto Tiff File Id",
            "description": "The file id of the orthophoto tiff file"
          },
          "report_pdf_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Report Pdf File Id",
            "description": "The file id of the report pdf file"
          },
          "mesh_bundle_zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Mesh Bundle Zip File Id",
            "description": "The file id of the mesh bundle zip file"
          },
          "image_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Image File Ids",
            "description": "The file ids of the image files"
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "Whether to create pins for the snapshot",
            "default": true
          },
          "pg_viscan_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotViscanData"
              }
            ],
            "title": "Pg Viscan Data",
            "description": "Viscan data"
          }
        },
        "type": "object",
        "required": [
          "name",
          "created_at",
          "snapshot_file_id",
          "snapshot_source"
        ],
        "title": "InputSdxCloudFileSnapshotV2"
      },
      "InputSdxCloudSnapshot": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created - where it will be inserted in the timeline."
          },
          "snapshot_source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__ImportSnapshotSource"
              }
            ],
            "description": "Type of the snapshot."
          },
          "grid_size": {
            "type": "number",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the project in cm",
            "default": 5
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option. Only relevant for sdx-cloud snapshots.",
            "default": "lowest_point"
          },
          "snapshot_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot File Id",
            "description": "The snapshot as file. Only for imported snapshots. Currently only .las supported."
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit the file is in",
            "default": "m"
          }
        },
        "type": "object",
        "required": [
          "name",
          "created_at",
          "snapshot_source",
          "snapshot_file_id"
        ],
        "title": "InputSdxCloudSnapshot"
      },
      "InputSdxCloudSnapshotPhotogrammetryV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "tag_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Tag Ids",
            "description": "Tag IDs of the snapshot"
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option",
            "default": "lowest_point"
          },
          "grid_size": {
            "type": "number",
            "maximum": 100,
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the snapshot in cm",
            "default": 5
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created - where it will be inserted in the timeline."
          },
          "gcps": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__Gcp"
            },
            "type": "array",
            "minItems": 1,
            "title": "Gcps",
            "description": "List of GCPs"
          },
          "gcps_diag_size": {
            "type": "number",
            "exclusiveMinimum": false,
            "title": "Gcps Diag Size",
            "description": "Diagonal size of the GCPs in mm"
          },
          "pg_processing_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry processing provider"
          },
          "pg_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotSdxProcessingSettings"
              }
            ],
            "title": "Pg Processing Settings",
            "description": "Processing settings"
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "Whether to create pins for the snapshot",
            "default": true
          },
          "creation_date_selection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDateSelection"
              }
            ],
            "description": "Date selection",
            "default": "image-capture-date"
          },
          "pg_img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "minItems": 1,
            "title": "Pg Img File Ids",
            "description": "List of file ids the snapshot belongs to. Needed for photogrammetry snapshots that get processed to las file."
          }
        },
        "type": "object",
        "required": ["name", "created_at", "pg_img_file_ids"],
        "title": "InputSdxCloudSnapshotPhotogrammetryV2"
      },
      "InputSdxCloudSnapshotPhotogrammetryZip": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created - where it will be inserted in the timeline."
          },
          "snapshot_source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__ImportSnapshotSource"
              }
            ],
            "description": "Type of the snapshot."
          },
          "grid_size": {
            "type": "number",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the project in cm",
            "default": 5
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option. Only relevant for sdx-cloud snapshots.",
            "default": "lowest_point"
          },
          "gcps": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__other_schemas__Gcp"
            },
            "type": "array",
            "minItems": 1,
            "title": "Gcps",
            "description": "List of GCPs"
          },
          "gcps_diag_size": {
            "type": "number",
            "exclusiveMinimum": false,
            "title": "Gcps Diag Size",
            "description": "Diagonal size of the GCPs in mm"
          },
          "pg_processing_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry processing provider",
            "default": "pix4dcloud"
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "Create pins from the images.",
            "default": true
          },
          "pg_processing_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ViscanProcessingModeType"
              }
            ],
            "description": "If None is set -> auto detection"
          },
          "telekom_data": {
            "items": {
              "$ref": "#/components/schemas/TelekomData"
            },
            "type": "array",
            "title": "Telekom Data",
            "description": "Telekom Data for telekom transfer jobs"
          },
          "zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Zip File Id",
            "description": "The zip file containing the images and the gcp file."
          }
        },
        "type": "object",
        "required": ["name", "created_at", "snapshot_source", "zip_file_id"],
        "title": "InputSdxCloudSnapshotPhotogrammetryZip"
      },
      "InputSdxCloudSnapshotPhotogrammetryZipV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "tag_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Tag Ids",
            "description": "Tag IDs of the snapshot"
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option",
            "default": "lowest_point"
          },
          "grid_size": {
            "type": "number",
            "maximum": 100,
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the snapshot in cm",
            "default": 5
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created - where it will be inserted in the timeline."
          },
          "gcps": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__Gcp"
            },
            "type": "array",
            "minItems": 1,
            "title": "Gcps",
            "description": "List of GCPs"
          },
          "gcps_diag_size": {
            "type": "number",
            "exclusiveMinimum": false,
            "title": "Gcps Diag Size",
            "description": "Diagonal size of the GCPs in mm"
          },
          "pg_processing_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry processing provider"
          },
          "pg_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotSdxProcessingSettings"
              }
            ],
            "title": "Pg Processing Settings",
            "description": "Processing settings"
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "Whether to create pins for the snapshot",
            "default": true
          },
          "creation_date_selection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDateSelection"
              }
            ],
            "description": "Date selection",
            "default": "image-capture-date"
          },
          "pg_imgs_zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Imgs Zip File Id",
            "description": "The zip file containing the images for photogrammetry processing."
          }
        },
        "type": "object",
        "required": ["name", "created_at", "pg_imgs_zip_file_id"],
        "title": "InputSdxCloudSnapshotPhotogrammetryZipV2"
      },
      "InputSegment": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the segment"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the segment"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the segment"
          }
        },
        "type": "object",
        "required": ["start_at"],
        "title": "InputSegment"
      },
      "InputSensors": {
        "properties": {
          "mount_config": {
            "type": "string",
            "title": "Mount Config",
            "description": "mount configuration of the lidar"
          },
          "lidar1_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lidar1 Loc",
            "description": "location of the lidar 1 in cm"
          },
          "cam1_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam1 Loc",
            "description": "location of the camera 1 in cm"
          },
          "cam2_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam2 Loc",
            "description": "location of the camera 2 in cm"
          },
          "gps_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Gps Loc",
            "description": "location of the gps in cm"
          },
          "lidar1_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lidar1 Orient",
            "description": "orientation of the lidar 1 in cm"
          },
          "cam1_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam1 Orient",
            "description": "orientation of the camera 1 in cm"
          },
          "cam2_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam2 Orient",
            "description": "orientation of the camera 2 in cm"
          }
        },
        "type": "object",
        "title": "InputSensors"
      },
      "InputSeptentrio": {
        "properties": {
          "lever_arm": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lever Arm",
            "description": "lever arm of the septentrio"
          },
          "heading_offset": {
            "type": "number",
            "title": "Heading Offset",
            "description": "heading offset of the septentrio"
          },
          "pitch_offset": {
            "type": "number",
            "title": "Pitch Offset",
            "description": "pitch offset of the septentrio"
          },
          "s3_log": {
            "type": "string",
            "title": "S3 Log",
            "description": "s3 key of the septentrio log"
          },
          "imu_orientation": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Imu Orientation",
            "description": "orientation of the imu"
          },
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the septentrio"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the septentrio"
          }
        },
        "type": "object",
        "title": "InputSeptentrio"
      },
      "InputSharing": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the shared resource"
          },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "URL which is shared",
            "default": "https://sodex.cloud:20072/"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Encrypted password for the shared resource"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputSharing"
      },
      "InputSnapshot": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created"
          },
          "snapshot_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputSnapshotInfo"
              }
            ],
            "title": "Snapshot Info",
            "description": "Snapshot info"
          },
          "snapshot_source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__ImportSnapshotSource"
              },
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__AutomaticSnapshotSource"
              }
            ],
            "title": "Snapshot Source",
            "description": "Type of the snapshot.",
            "default": "sodex"
          },
          "snapshot_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot File Id",
            "description": "The snapshot as file. Only for imported snapshots. Currently only .las supported."
          },
          "pg_img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Pg Img File Ids",
            "description": "List of file ids the snapshot belongs to. Needed for photogrammetry snapshots that get processed to las file."
          },
          "pg_imgs_zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Imgs Zip File Id",
            "description": "Zip file id of the photogrammetry images"
          },
          "snapshot_potree": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__schemas__SnapshotPotree"
              }
            ],
            "title": "Snapshot Potree",
            "description": "Potree data of the snapshot"
          },
          "grid_size": {
            "type": "number",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the project in cm"
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option. Only relevant for sdx-cloud snapshots.",
            "default": "lowest_point"
          }
        },
        "type": "object",
        "title": "InputSnapshot"
      },
      "InputSnapshotComparison": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot_comparison"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot_comparison"
          },
          "ref_snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Ref Snapshot Id",
            "description": "Reference snapshot ID"
          },
          "compare_snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Compare Snapshot Id",
            "description": "Compare snapshot ID"
          },
          "include_geofences": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Include Geofences",
            "description": "List of geofences to include in the comparison",
            "default": []
          },
          "exclude_geofences": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Exclude Geofences",
            "description": "List of geofences to exclude in the comparison",
            "default": []
          },
          "gradient": {
            "items": {
              "$ref": "#/components/schemas/SnapshotComparisonGradientStage"
            },
            "type": "array",
            "title": "Gradient",
            "description": "List of gradient parts to apply to the comparison",
            "default": []
          }
        },
        "type": "object",
        "required": ["name", "ref_snapshot_id", "compare_snapshot_id"],
        "title": "InputSnapshotComparison"
      },
      "InputSnapshotInfo": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Snapshot id"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Snapshot version",
            "default": 5
          },
          "changed_chunks": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Changed Chunks",
            "description": "List of changed chunk snapshot int ids"
          },
          "total_n_changed_elements": {
            "type": "integer",
            "title": "Total N Changed Elements",
            "description": "Total number of changed elements"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the snapshot"
          },
          "n_imgs": {
            "type": "integer",
            "title": "N Imgs",
            "description": "Number of images in the snapshot"
          },
          "img_bearings": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Img Bearings",
            "description": "List of image bearings"
          },
          "img_cam_positions": {
            "items": {
              "$ref": "#/components/schemas/CamPosition"
            },
            "type": "array",
            "description": "List of image camera positions in same order as img_bearings for imgs"
          },
          "bucket_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Bucket Id",
            "description": "Bucket id the snapshot belongs to"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "Phase id the snapshot belongs to"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "Soil id the snapshot belongs to"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the snapshot"
          },
          "system_profile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Profile Id",
            "description": "System profile id the snapshot had set when taking the snapshot"
          },
          "cs_global_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cs Global Origin",
            "description": "Global origin of the snapshot"
          },
          "cs_ref_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cs Ref Origin",
            "description": "Reference origin of the snapshot"
          },
          "cs_created_ts": {
            "type": "number",
            "title": "Cs Created Ts",
            "description": "Timestamp of the snapshot creation"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__SnapshotFileType"
              }
            ],
            "description": "Filetype of the snapshot",
            "default": ".sodex"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id that created the snapshot"
          },
          "optimal_zoom_level": {
            "type": "integer",
            "title": "Optimal Zoom Level",
            "description": "Optimal zoom level of the snapshot",
            "default": 18
          }
        },
        "type": "object",
        "title": "InputSnapshotInfo"
      },
      "InputSnapshotManipulation": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Manipulation name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Manipulation description"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ManipulationType"
              }
            ],
            "description": "Manipulation type"
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Geofence that marks the area of the manipulation. Coordinates in rad."
          },
          "polylines": {
            "items": {
              "$ref": "#/components/schemas/Polyline"
            },
            "type": "array",
            "title": "Polylines",
            "description": "List of polylines that define the area to delete"
          },
          "continuous": {
            "type": "boolean",
            "title": "Continuous",
            "description": "If the manipulation is continuous or just for this snapshot"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the manipulation only if continuous. If continuous is true and end_at is None,             the manipulation will be continuous until the end of the project"
          },
          "time_threshold": {
            "type": "number",
            "exclusiveMinimum": false,
            "title": "Time Threshold",
            "description": "Time threshold for delete interpolate time manipulations.            Points older than this threshold will be deleted. In hours."
          }
        },
        "type": "object",
        "required": ["name", "type", "continuous"],
        "title": "InputSnapshotManipulation"
      },
      "InputSnapshotNote": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the note"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Content of the note"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputSnapshotNote"
      },
      "InputSnapshotTelekomImage": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the image"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description/comment of the image"
          },
          "classification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomFileClassification"
              }
            ],
            "description": "Classification of the image"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the uploaded file on the bucket"
          }
        },
        "type": "object",
        "required": ["name", "classification", "s3_key"],
        "title": "InputSnapshotTelekomImage"
      },
      "InputSnapshotTelekomImages": {
        "properties": {
          "images": {
            "items": {
              "$ref": "#/components/schemas/InputSnapshotTelekomImage"
            },
            "type": "array",
            "title": "Images",
            "description": "List of images"
          }
        },
        "type": "object",
        "required": ["images"],
        "title": "InputSnapshotTelekomImages"
      },
      "InputSoil": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the soil",
            "example": "Soil 1"
          },
          "cost": {
            "type": "number",
            "title": "Cost",
            "description": "Cost of the soil",
            "default": 0,
            "example": 100
          },
          "remove": {
            "type": "boolean",
            "title": "Remove",
            "description": "Soil is being removed",
            "default": true,
            "example": true
          },
          "loosening_factor": {
            "type": "number",
            "title": "Loosening Factor",
            "description": "Loosening factor",
            "example": 0.5
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density",
            "example": 1.5
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputSoil"
      },
      "InputState": {
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__states__constants__State"
              }
            ],
            "description": "Name of the state"
          },
          "default": {
            "type": "boolean",
            "title": "Default",
            "description": "Default state of the project",
            "default": true
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputState"
      },
      "InputStorage": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the storage"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the storage in degree - [lat, lon]"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputStorage"
      },
      "InputStoredLine": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredLine name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredLine description"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/Point"
            },
            "type": "array",
            "title": "Points",
            "description": "StoredLine points",
            "default": []
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputStoredLine"
      },
      "InputStoredPoints": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredPoints name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredPoints description"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/StoredPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "StoredPoints points",
            "default": []
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputStoredPoints"
      },
      "InputSyncedData": {
        "properties": {
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "length of a synced data pkg in ms"
          },
          "points_per_lidar_data": {
            "type": "integer",
            "title": "Points Per Lidar Data",
            "description": "number of points per lidar data pkg"
          }
        },
        "type": "object",
        "title": "InputSyncedData"
      },
      "InputSystemLicense": {
        "properties": {
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__management__licenses__constants__SystemLicenseTypes"
              }
            ],
            "description": "System license type"
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "InputSystemLicense"
      },
      "InputSystemMeta": {
        "properties": {
          "escpp_config": {
            "type": "object",
            "title": "Escpp Config",
            "description": "configuration of es cpp"
          },
          "hdcpp_config": {
            "type": "object",
            "title": "Hdcpp Config",
            "description": "configuration of hd cpp"
          },
          "iscpp_config": {
            "type": "object",
            "title": "Iscpp Config",
            "description": "configuration of is cpp"
          },
          "sdx_chain_config": {
            "type": "object",
            "title": "Sdx Chain Config",
            "description": "SDX Chain configuration"
          },
          "camcpp_config": {
            "type": "object",
            "title": "Camcpp Config",
            "description": "configuration of cam cpp"
          },
          "campy_config": {
            "type": "object",
            "title": "Campy Config",
            "description": "configuration of cam py"
          },
          "transformer_config": {
            "type": "object",
            "title": "Transformer Config",
            "description": "configuration of transformer"
          },
          "api_config": {
            "type": "object",
            "title": "Api Config",
            "description": "configuration of api"
          },
          "hub_config": {
            "type": "object",
            "title": "Hub Config",
            "description": "configuration of hub"
          },
          "ispy_config": {
            "type": "object",
            "title": "Ispy Config",
            "description": "configuration of is py"
          },
          "framework_config": {
            "type": "object",
            "title": "Framework Config",
            "description": "configuration of framework"
          }
        },
        "type": "object",
        "title": "InputSystemMeta"
      },
      "InputSystemSubscription": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Amount",
            "description": "Amount of the subscription"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the subscription"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the subscription"
          }
        },
        "type": "object",
        "title": "InputSystemSubscription"
      },
      "InputTelekomTransfer": {
        "properties": {
          "pin_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Pin Ids",
            "description": "List of pin ids to transfer"
          }
        },
        "type": "object",
        "required": ["pin_ids"],
        "title": "InputTelekomTransfer"
      },
      "InputTimeConfig": {
        "properties": {
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start time of the filter"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End time of the filter"
          }
        },
        "type": "object",
        "required": ["start_at", "end_at"],
        "title": "InputTimeConfig"
      },
      "InputTimelapseConfig": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date"
          },
          "fps": {
            "type": "number",
            "title": "Fps"
          },
          "duration": {
            "type": "integer",
            "title": "Duration"
          }
        },
        "type": "object",
        "required": ["start_date", "end_date"],
        "title": "InputTimelapseConfig"
      },
      "InputTobeTerrain": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the terrain"
          },
          "calc_negative": {
            "type": "boolean",
            "title": "Calc Negative",
            "description": "If the terrain should calculate negative volume",
            "default": false
          },
          "gradient": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__referenceterrains__schemas__InputGradient"
            },
            "type": "array",
            "title": "Gradient",
            "description": "Gradient of the terrain",
            "default": []
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit the terrain is in.",
            "default": "m"
          }
        },
        "type": "object",
        "title": "InputTobeTerrain"
      },
      "InputTopcon": {
        "properties": {
          "portname": {
            "type": "string",
            "title": "Portname",
            "description": "name of the serial port the topcon data is received"
          },
          "baudrate": {
            "type": "integer",
            "title": "Baudrate",
            "description": "baudrate of the serial interface"
          }
        },
        "type": "object",
        "title": "InputTopcon"
      },
      "InputTransferSnapshot": {
        "properties": {
          "target_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Target Project Id",
            "description": "Project ID to transfer the snapshot to. Must be sdx cloud (data) project."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot in the target project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot in the target project"
          },
          "insert_at": {
            "type": "string",
            "format": "date-time",
            "title": "Insert At",
            "description": "Date to insert the snapshot at in the target project. Default is time of source snapshot creation."
          },
          "grid_size": {
            "type": "number",
            "title": "Grid Size",
            "description": "Grid size of the snapshot in the target project in cm. Default is resolution of source snapshot."
          },
          "tag_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tag Ids",
            "description": "List of tag IDs to assign to the snapshot in the target project"
          },
          "geofence_id": {
            "type": "string",
            "title": "Geofence Id",
            "description": "Geofence ID to assign to the snapshot in the target project"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be transferred",
            "default": false
          }
        },
        "type": "object",
        "required": ["target_project_id", "name", "insert_at", "grid_size"],
        "title": "InputTransferSnapshot"
      },
      "InputUhfConfiguration": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "frequency_band": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfFrequencyBands"
              }
            ],
            "description": "Frequency band"
          },
          "frequency": {
            "type": "number",
            "maximum": 928,
            "minimum": 403,
            "title": "Frequency",
            "description": "Frequency in MHz"
          },
          "channel_spacing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfChannelSpacing"
              }
            ],
            "description": "Channel spacing in kHz"
          },
          "communication_protocol": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfCommunicationProtocol"
              }
            ],
            "description": "Communication protocol"
          },
          "fcs": {
            "type": "string",
            "title": "Fcs",
            "description": "FCS",
            "default": "OFF"
          }
        },
        "type": "object",
        "required": [
          "frequency_band",
          "frequency",
          "channel_spacing",
          "communication_protocol"
        ],
        "title": "InputUhfConfiguration"
      },
      "InputUser": {
        "properties": {
          "credentials": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InputUserCredentials"
              }
            ],
            "title": "Credentials",
            "description": "Credentials of the user"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID of the user"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username of the user",
            "default": ""
          },
          "disable_project_map": {
            "type": "boolean",
            "title": "Disable Project Map",
            "description": "If the user has the project map disabled",
            "default": false
          },
          "organization_admin": {
            "type": "boolean",
            "title": "Organization Admin",
            "description": "If the user is an organization admin",
            "default": false
          },
          "system_admin": {
            "type": "boolean",
            "title": "System Admin",
            "description": "If the user is a system admin",
            "default": true
          },
          "processing_admin": {
            "type": "boolean",
            "title": "Processing Admin",
            "description": "If the user is a processing admin and can purchase processing packages.",
            "default": false
          },
          "email_confirmed": {
            "type": "boolean",
            "title": "Email Confirmed",
            "description": "If the email of the user is confirmed",
            "default": false
          },
          "plain_password": {
            "type": "string",
            "maxLength": 225,
            "minLength": 4,
            "title": "Plain Password",
            "description": "Plain password of the user"
          },
          "send_mail": {
            "type": "boolean",
            "title": "Send Mail",
            "description": "If the user should receive an email with the login credentials",
            "default": false
          },
          "license_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLicenseTypes"
              }
            ],
            "description": "License of the user",
            "default": "cloud_base"
          }
        },
        "type": "object",
        "required": ["credentials", "plain_password"],
        "title": "InputUser"
      },
      "InputUserCredentials": {
        "properties": {
          "firstname": {
            "type": "string",
            "title": "Firstname",
            "description": "Legal first name of the user",
            "default": ""
          },
          "lastname": {
            "type": "string",
            "title": "Lastname",
            "description": "Legal last name of the user",
            "default": ""
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email address of the user"
          },
          "phone_number": {
            "type": "string",
            "maxLength": 50,
            "title": "Phone Number",
            "description": "Phone number of the user",
            "default": ""
          }
        },
        "type": "object",
        "required": ["email"],
        "title": "InputUserCredentials"
      },
      "InputUserLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the layer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerType"
              }
            ],
            "description": "Type of the layer",
            "default": "high_res"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID of the layer"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputUserLayer"
      },
      "InputUserSegment": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the segment"
          },
          "data_source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataSourceUser"
              }
            ],
            "description": "Data source of the segment"
          },
          "data_source_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Data Source Id",
            "description": "Data source ID of the segment"
          }
        },
        "type": "object",
        "title": "InputUserSegment"
      },
      "InputVidocSnapshot": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          }
        },
        "type": "object",
        "title": "InputVidocSnapshot"
      },
      "InputVisConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the visualization"
          },
          "visible": {
            "type": "boolean",
            "title": "Visible",
            "description": "Is this visualization visible",
            "default": true
          },
          "meshed": {
            "type": "boolean",
            "title": "Meshed",
            "description": "Is this visualization meshed"
          },
          "origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VisOrigin"
              }
            ],
            "description": "Origin of the visualization",
            "default": "snapshot"
          },
          "gradient": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Gradient",
            "description": "Gradient of the visualization"
          },
          "offset": {
            "type": "number",
            "title": "Offset",
            "description": "Offset of the visualization",
            "default": 0
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Object id of the linked visualizaiton elemen (e.g. snapshot id)"
          }
        },
        "type": "object",
        "required": ["name", "meshed", "object_id"],
        "title": "InputVisConfig"
      },
      "InputVolvo": {
        "properties": {
          "can_interface": {
            "type": "string",
            "title": "Can Interface",
            "description": "can interface"
          },
          "baudrate": {
            "type": "integer",
            "title": "Baudrate",
            "description": "baudrate of the can interface"
          }
        },
        "type": "object",
        "title": "InputVolvo"
      },
      "InviteCloudUser": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email of the user to invite"
          },
          "license_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLicenseTypes"
              }
            ],
            "description": "License of the user assigned during invitation",
            "default": "inactive"
          }
        },
        "type": "object",
        "required": ["email"],
        "title": "InviteCloudUser"
      },
      "InviteCloudUsers": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/InviteCloudUser"
            },
            "type": "array",
            "title": "Users",
            "description": "Users to invite"
          }
        },
        "type": "object",
        "required": ["users"],
        "title": "InviteCloudUsers"
      },
      "InviteViscanScinUser": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email of the user to invite"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password of the user to invite"
          }
        },
        "type": "object",
        "required": ["email", "password"],
        "title": "InviteViscanScinUser"
      },
      "InviteViscanScinUsers": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/InviteViscanScinUser"
            },
            "type": "array",
            "title": "Users",
            "description": "Users to invite"
          }
        },
        "type": "object",
        "required": ["users"],
        "title": "InviteViscanScinUsers"
      },
      "InvoiceItem": {
        "properties": {
          "product": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Product"
              },
              {
                "type": "object"
              }
            ],
            "title": "Product",
            "description": "Product"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Quantity"
          },
          "discount": {
            "type": "number",
            "title": "Discount",
            "description": "Discount in percent of the product price. Between 0-1",
            "default": 0
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ],
            "title": "Price",
            "description": "Product invoice price"
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "title": "Valid From",
            "description": "Valid from date"
          },
          "valid_to": {
            "type": "string",
            "format": "date-time",
            "title": "Valid To",
            "description": "Valid to date"
          },
          "years_billed": {
            "type": "integer",
            "title": "Years Billed",
            "description": "Years the product is billed for"
          }
        },
        "type": "object",
        "required": ["product", "quantity", "price"],
        "title": "InvoiceItem"
      },
      "InvoiceModel": {
        "properties": {
          "collection_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__CollectionMethod"
              }
            ],
            "description": "The collection method"
          },
          "paid": {
            "type": "boolean",
            "title": "Paid",
            "description": "Whether the invoice is paid"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceStatus"
              }
            ],
            "description": "The invoice status"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/ProductModel"
            },
            "type": "array",
            "title": "Products",
            "description": "The products in the invoice",
            "default": []
          },
          "hosted_invoice_url": {
            "type": "string",
            "title": "Hosted Invoice Url",
            "description": "The hosted invoice URL"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "title": "Due Date",
            "description": "The due date of the invoice. Null if collection_method is charge_automatically"
          },
          "amount_due": {
            "type": "integer",
            "title": "Amount Due",
            "description": "The amount due"
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency"
          }
        },
        "type": "object",
        "required": [
          "collection_method",
          "paid",
          "status",
          "amount_due",
          "currency"
        ],
        "title": "InvoiceModel"
      },
      "InvoiceNumberPrefix": {
        "type": "string",
        "enum": ["CS"],
        "title": "InvoiceNumberPrefix",
        "description": "An enumeration."
      },
      "InvoiceStatus": {
        "type": "string",
        "enum": ["draft", "open", "paid", "void", "uncollectible"],
        "title": "InvoiceStatus",
        "description": "An enumeration."
      },
      "InvoiceType": {
        "type": "string",
        "enum": ["SDX_CLOUD_INVOICE"],
        "title": "InvoiceType",
        "description": "An enumeration."
      },
      "JobType": {
        "type": "string",
        "enum": [
          "process_snapshot_created",
          "process_orthophoto",
          "process_cable_file",
          "process_pile_geofence",
          "delete_pile_geofence",
          "process_reference_terrain",
          "process_image_layer",
          "process_layer_data",
          "process_dataset",
          "process_timelapse",
          "process_snapshot_download",
          "process_snapshot_export_explorer",
          "process_measure_point",
          "process_measure_layer_point",
          "process_layer_export",
          "process_point_history",
          "process_measure_pile",
          "process_export_pile_base",
          "process_measure_layer__pile",
          "process_control_points_matrix",
          "process_potree",
          "process_potree_export",
          "process_potree_cross_section_export",
          "process_high_res_layer_export",
          "process_high_res_layer_export_explorer",
          "process_photo_layer_export",
          "process_photo_layer_export_explorer",
          "process_3d_layer_export",
          "process_3d_layer_export_explorer",
          "process_high_res_merged_layer_export",
          "process_high_res_merged_layer_export_explorer",
          "process_3D_merged_layer_export",
          "process_3D_merged_layer_export_explorer",
          "process_photo_merged_layer_export",
          "process_photo_merged_layer_export_explorer",
          "process_cross_section_points",
          "process_cross_section_points_export",
          "process_line_export",
          "process_project_xml_export",
          "process_dxf_file_coordinates",
          "process_cable_export",
          "process_cable_export_explorer",
          "process_snapshot_manipulation",
          "process_snapshot_manipulation_deleted",
          "process_project_3d_timelapse",
          "process_cable_import",
          "process_high_res_v2_layer_export",
          "process_stored_points_export",
          "process_stored_lines_export",
          "process_sdx_cloud_snapshot",
          "delete_sdx_cloud_snapshot",
          "process_zip_download",
          "process_snapshot_comparison",
          "process_pg_sdx_cloud_snapshot",
          "process_sdx_cloud_snapshot_moved",
          "process_snapshot_transfer",
          "process_image_files",
          "process_dji_webhook_images",
          "process_project_migration",
          "process_zip_images",
          "process_potree_measurements_export",
          "process_telekom_transfer",
          "process_autostart_update_check",
          "process_autostart_system_add_check",
          "process_layer",
          "convert_coord_global_local",
          "convert_coord_local_global",
          "process_measurements_export",
          "process_measurements_to_telekom",
          "process_automatic_measurements",
          "process_viscan_scin_webhook_images",
          "process_viscan_scin_webhook",
          "process_viscan_scin_snapshot",
          "process_dji_webhook",
          "process_dji_flight_detection",
          "process_dji_unprocessed_images",
          "process_invoice",
          "process_2d_plan",
          "process_sodex_to_viscan_transfer",
          "process_viscan_to_sodex_transfer",
          "process_measure_area",
          "process_measure_points",
          "process_measure_layer_points",
          "process_measure_layer_area",
          "process_vidoc_images",
          "process_snapshot_zip",
          "delete_project",
          "process_snapshot_files_to_telekom",
          "process_vidoc_images_v2",
          "process_telekom_pins_to_telekom",
          "process_geofence_detection_box",
          "process_line_detection_box",
          "process_sodex_to_photogrammetry",
          "process_photogrammetry_to_sodex",
          "process_organization_csv_export",
          "process_lok_file_validation"
        ],
        "title": "JobType",
        "description": "An enumeration."
      },
      "Language": {
        "type": "string",
        "enum": [
          "ar-AR",
          "da-DK",
          "de-DE",
          "en-US",
          "es-ES",
          "es-419",
          "fi-FI",
          "fr-FR",
          "he-IL",
          "it-IT",
          "ja-JP",
          "nl-NL",
          "pt-BR",
          "no-NO",
          "sv-SE"
        ],
        "title": "Language",
        "description": "An enumeration."
      },
      "LayerType": {
        "type": "string",
        "enum": ["high_res", "3d_mode", "photo_mode", "high_res_v2"],
        "title": "LayerType",
        "description": "An enumeration."
      },
      "LicenseSource": {
        "type": "string",
        "enum": ["system", "cloud_paid", "cloud_free", "trial", "not_set"],
        "title": "LicenseSource",
        "description": "An enumeration."
      },
      "LicenseTypes": {
        "type": "string",
        "enum": [
          "machine_license_base",
          "machine_license_plus",
          "machine_license_ultimate",
          "machine_kteg_base",
          "linevis",
          "demo",
          "cloud_base",
          "guest",
          "vidoc",
          "inactive"
        ],
        "title": "LicenseTypes",
        "description": "An enumeration."
      },
      "LidarPosition": {
        "type": "string",
        "enum": ["1", "2"],
        "title": "LidarPosition",
        "description": "An enumeration."
      },
      "LimitThresholds": {
        "properties": {
          "speed_limit": {
            "type": "number",
            "maximum": 999,
            "minimum": 1,
            "title": "Speed Limit",
            "description": "Speed limit in meters per minute",
            "default": 40
          },
          "speed_acc_limit": {
            "type": "number",
            "maximum": 999,
            "minimum": 1,
            "title": "Speed Acc Limit",
            "description": "Speed acceleration limit in km per hour squared",
            "default": 20
          },
          "rotation_limit": {
            "type": "number",
            "maximum": 999,
            "minimum": 1,
            "title": "Rotation Limit",
            "description": "Rotation limit in degrees per minute",
            "default": 25
          },
          "rotation_acc_limit": {
            "type": "number",
            "maximum": 999,
            "minimum": 1,
            "title": "Rotation Acc Limit",
            "description": "Rotation acceleration limit in degrees per minute squared",
            "default": 5
          },
          "gnss_lat_accuracy_limit": {
            "type": "number",
            "maximum": 999,
            "minimum": 0.01,
            "title": "Gnss Lat Accuracy Limit",
            "description": "GNSS latitude accuracy limit in meters",
            "default": 5
          },
          "gnss_lon_accuracy_limit": {
            "type": "number",
            "maximum": 999,
            "minimum": 0.01,
            "title": "Gnss Lon Accuracy Limit",
            "description": "GNSS longitude accuracy limit in meters",
            "default": 5
          },
          "gnss_alt_accuracy_limit": {
            "type": "number",
            "maximum": 999,
            "minimum": 0.01,
            "title": "Gnss Alt Accuracy Limit",
            "description": "GNSS altitude accuracy limit in meters",
            "default": 5
          }
        },
        "type": "object",
        "title": "LimitThresholds"
      },
      "LineDetectionType": {
        "type": "string",
        "enum": ["cable"],
        "title": "LineDetectionType",
        "description": "An enumeration."
      },
      "LineObjectMaterials": {
        "type": "string",
        "enum": [
          "RO_AA",
          "RO_AC",
          "RO_AH",
          "RO_AI",
          "RO_AJ",
          "RO_AK",
          "RO_AL",
          "RO_ALA",
          "RO_ALB",
          "RO_ALC",
          "RO_ALD",
          "RO_AW",
          "RO_AX",
          "RO_AY",
          "RO_AZ",
          "RO_BA",
          "RO_BB",
          "RO_BC",
          "RO_BD",
          "RO_BE",
          "RO_BF",
          "RO_BG",
          "RO_BH",
          "RO_BI",
          "RO_BJ",
          "RO_BK",
          "RO_BL",
          "RO_BM",
          "RO_BN",
          "RO_BO",
          "RO_BP",
          "RO_BQ",
          "RO_BR",
          "RO_BS",
          "RO_BT",
          "RO_BU",
          "RO_BV",
          "RO_BW",
          "RO_BX",
          "RO_BY",
          "RO_CB",
          "RO_CC",
          "RO_CD",
          "RO_CE",
          "RO_CF",
          "RO_CG",
          "RO_CH",
          "RO_CI",
          "RO_CJ",
          "RO_CK",
          "RO_CL",
          "RO_CM",
          "RO_CN",
          "RO_CO",
          "RO_CP",
          "RO_CQ",
          "RO_DA",
          "RO_DF",
          "RO_DJ",
          "RO_DN",
          "RO_DV",
          "RO_EB",
          "RO_EC",
          "RO_ED",
          "RO_EE",
          "RO_EF",
          "RO_EG",
          "RO_EH",
          "RO_EI",
          "RO_FA",
          "RO_FB",
          "RO_FC",
          "RO_FD",
          "RO_FE",
          "RO_FF",
          "RO_FG",
          "RO_FH",
          "RO_GA",
          "RO_SRVA",
          "RO_SRVB",
          "RO_XA",
          "RO_XB",
          "RO_XC",
          "RO_XD",
          "RO_XE",
          "RO_XF",
          "RO_XG",
          "RO_XH",
          "RO_XI",
          "RO_XJ",
          "RO_XK",
          "RO_XL",
          "RO_XM",
          "RO_XN",
          "RO_XO",
          "RO_XP",
          "RO_XQ",
          "RO_XR",
          "RO_XS",
          "RO_XT",
          "RO_XU",
          "RO_XV",
          "RO_XW",
          "RO_XX"
        ],
        "title": "LineObjectMaterials",
        "description": "Line object materials enum."
      },
      "LocalPoint": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting in m"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing in m"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height in m"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "LocalPoint"
      },
      "LoopsEmailListSettings": {
        "properties": {
          "email_marketing": {
            "type": "boolean",
            "title": "Email Marketing",
            "description": "If the user wants to receive email marketing",
            "default": false
          },
          "product_updates": {
            "type": "boolean",
            "title": "Product Updates",
            "description": "If the user wants to receive product updates",
            "default": false
          }
        },
        "type": "object",
        "title": "LoopsEmailListSettings"
      },
      "MachineControl": {
        "properties": {
          "machine_control_name": {
            "type": "string",
            "title": "Machine Control Name",
            "description": "Name of machine control"
          }
        },
        "type": "object",
        "required": ["machine_control_name"],
        "title": "MachineControl"
      },
      "MachineType": {
        "type": "string",
        "enum": [
          "excavator",
          "dozer",
          "dumper",
          "wheel_loader",
          "truck",
          "car"
        ],
        "title": "MachineType",
        "description": "An enumeration."
      },
      "Manipulation": {
        "properties": {
          "fitting_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FittingPoint"
              }
            ],
            "title": "Fitting Point",
            "description": "Fitting point of the manipulation"
          }
        },
        "type": "object",
        "title": "Manipulation"
      },
      "ManipulationType": {
        "type": "string",
        "enum": [
          "deletion",
          "interpolation",
          "deletion_interpolation",
          "scan_blocking",
          "delete_interpolate_time",
          "polyline_delete",
          "complete_cleaning"
        ],
        "title": "ManipulationType",
        "description": "An enumeration."
      },
      "MeasureConfigArea": {
        "properties": {
          "measure_3d_area": {
            "type": "boolean",
            "title": "Measure 3D Area",
            "description": "If the area should be measured with the provided points. Only possible if at least 3 points are provided.",
            "default": false
          },
          "measure_2d_area": {
            "type": "boolean",
            "title": "Measure 2D Area",
            "description": "If the area should be measured with the provided points. Only possible if at least 3 points are provided.",
            "default": true
          }
        },
        "type": "object",
        "title": "MeasureConfigArea"
      },
      "MeasureConfigCrossSection": {
        "properties": {
          "measure_cross_section": {
            "type": "boolean",
            "title": "Measure Cross Section",
            "description": "If the cross section should be measured with the provided points. Only possible if at least 2 points are provided.",
            "default": false
          }
        },
        "type": "object",
        "title": "MeasureConfigCrossSection"
      },
      "MeasureConfigLine": {
        "properties": {
          "measure_3d_line": {
            "type": "boolean",
            "title": "Measure 3D Line",
            "description": "If the line should be measured with the provided points. Only possible if at least 2 points are provided.",
            "default": false
          },
          "measure_2d_line": {
            "type": "boolean",
            "title": "Measure 2D Line",
            "description": "If the line should be measured with the provided points. Only possible if at least 2 points are provided.",
            "default": true
          }
        },
        "type": "object",
        "title": "MeasureConfigLine"
      },
      "MeasureConfigVolume": {
        "properties": {
          "calculation_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeCalculationOption"
              }
            ],
            "description": "Calculation option for the volume measurement",
            "default": "default"
          },
          "reference_height": {
            "type": "number",
            "title": "Reference Height",
            "description": "Height reference for the volume measurement. Must be provided if calculation_option is HEIGHT."
          },
          "positive_height_limit": {
            "type": "number",
            "title": "Positive Height Limit",
            "description": "Height limit for the volume measurement. Positive volume is only measured to this height."
          },
          "negative_height_limit": {
            "type": "number",
            "title": "Negative Height Limit",
            "description": "Height limit for the volume measurement. Negative volume is only measured to this height."
          }
        },
        "type": "object",
        "title": "MeasureConfigVolume"
      },
      "MeasureResultArea": {
        "properties": {
          "area_3d": {
            "type": "number",
            "minimum": 0,
            "title": "Area 3D",
            "description": "Area of the measured area in m2"
          },
          "area_2d": {
            "type": "number",
            "minimum": 0,
            "title": "Area 2D",
            "description": "Area of the measured area in m2"
          }
        },
        "type": "object",
        "title": "MeasureResultArea"
      },
      "MeasureResultCrossSection": {
        "properties": {
          "cross_section_points": {
            "items": {
              "$ref": "#/components/schemas/OutMeasurePointAPI"
            },
            "type": "array",
            "minItems": 2,
            "title": "Cross Section Points",
            "description": "Cross section points of the cross section. If reference terrain is set, the difference to the reference terrain is also included and the reference terrain height calculated with it."
          },
          "start_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutMeasurePointAPI"
              }
            ],
            "title": "Start Point",
            "description": "Start point of the cross section. If reference terrain is set, the difference to the reference terrain is also included and the reference terrain height calculated with it."
          },
          "end_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutMeasurePointAPI"
              }
            ],
            "title": "End Point",
            "description": "End point of the cross section. If reference terrain is set, the difference to the reference terrain is also included and the reference terrain height calculated with it."
          }
        },
        "type": "object",
        "required": ["cross_section_points", "start_point", "end_point"],
        "title": "MeasureResultCrossSection"
      },
      "MeasureResultCrossSections": {
        "properties": {
          "cross_sections": {
            "items": {
              "$ref": "#/components/schemas/MeasureResultCrossSection"
            },
            "type": "array",
            "minItems": 1,
            "title": "Cross Sections",
            "description": "Cross sections of the cross section. If reference terrain is set, the difference to the reference terrain is also included and the reference terrain height calculated with it."
          }
        },
        "type": "object",
        "required": ["cross_sections"],
        "title": "MeasureResultCrossSections"
      },
      "MeasureResultLine": {
        "properties": {
          "length_3d": {
            "type": "number",
            "minimum": 0,
            "title": "Length 3D",
            "description": "Length of the measured line in m"
          },
          "length_2d": {
            "type": "number",
            "minimum": 0,
            "title": "Length 2D",
            "description": "Length of the measured line in m"
          }
        },
        "type": "object",
        "title": "MeasureResultLine"
      },
      "MeasureResultVolume": {
        "properties": {
          "volume_positive": {
            "type": "number",
            "minimum": 0,
            "title": "Volume Positive",
            "description": "Absolute positive volume of the measured volume in m3"
          },
          "volume_negative": {
            "type": "number",
            "minimum": 0,
            "title": "Volume Negative",
            "description": "Absolute negative volume of the measured volume in m3"
          },
          "reference_terrain_positive_diff": {
            "type": "number",
            "title": "Reference Terrain Positive Diff",
            "description": "Positive difference to the reference terrain in m. Only populated if reference terrain id is provided and reference terrain is available for the given points."
          },
          "reference_terrain_negative_diff": {
            "type": "number",
            "title": "Reference Terrain Negative Diff",
            "description": "Negative difference to the reference terrain in m. Only populated if reference terrain id is provided and reference terrain is available for the given points."
          }
        },
        "type": "object",
        "required": ["volume_positive", "volume_negative"],
        "title": "MeasureResultVolume"
      },
      "MeasurementApiError": {
        "type": "string",
        "enum": ["UNDEFINED", "RAM_OVERFLOW", "POINT_OUT_OF_BOUNDS"],
        "title": "MeasurementApiError",
        "description": "An enumeration."
      },
      "MeasurementAreaData": {
        "properties": {
          "area_3d": {
            "type": "number",
            "title": "Area 3D",
            "description": "3D Area"
          },
          "area_2d": {
            "type": "number",
            "title": "Area 2D",
            "description": "2D Area"
          }
        },
        "type": "object",
        "required": ["area_3d", "area_2d"],
        "title": "MeasurementAreaData"
      },
      "MeasurementLayerType": {
        "type": "string",
        "enum": [
          "system_project_sodex_layer",
          "data_project_sodex_layer",
          "system_project_cable_layer",
          "data_project_cable_layer",
          "data_project_telekom_layer",
          "data_project_high_res_layer",
          "system_project_high_res_layer"
        ],
        "title": "MeasurementLayerType",
        "description": "An enumeration."
      },
      "MeasurementPoint": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude"
          },
          "alt": {
            "type": "number",
            "title": "Alt",
            "description": "Altitude"
          },
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "UTC ISO Datetime when the point was scanned/captured"
          }
        },
        "type": "object",
        "required": ["lat", "lon", "alt", "easting", "northing", "height"],
        "title": "MeasurementPoint"
      },
      "MeasurementRole": {
        "type": "string",
        "enum": ["AUTOMATIC_GCP", "AUTOMATIC_VISCAN_ROUTE"],
        "title": "MeasurementRole",
        "description": "Measurement role enum."
      },
      "MeasurementTelekomData": {
        "properties": {
          "object_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomDataObjectId"
              }
            ],
            "description": "Unique object id"
          },
          "civil_engineering_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomDataCivilEngineeringMethod"
              }
            ],
            "description": "Tiefbaumethoden (string). Nur bei \"Längstrasse\" & \"Hausanschlussleitung\" benötigt!\". Der Wert \"Unbekannt\" darf nur bei Rohdaten (postProcessingPending =true) übermittelt werden. Andernfalls muss immer einer der Werte übermittelt werden."
          },
          "ditch_width": {
            "type": "number",
            "title": "Ditch Width",
            "description": "Breite der Gräben/Grube in Meter (float)"
          },
          "installation_depth": {
            "type": "number",
            "title": "Installation Depth",
            "description": "Tiefe der Gräben/Grube in Meter (float)"
          },
          "length": {
            "type": "number",
            "title": "Length",
            "description": "Länge der Grube in Meter (float)"
          },
          "material": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PointObjectMaterials"
              },
              {
                "$ref": "#/components/schemas/LineObjectMaterials"
              }
            ],
            "title": "Material",
            "description": "Material"
          },
          "materials": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PointObjectMaterials"
                },
                {
                  "$ref": "#/components/schemas/LineObjectMaterials"
                }
              ]
            },
            "type": "array",
            "title": "Materials",
            "description": "Materials"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "UTC ISO Datetime when the point was captured"
          },
          "surface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomSurfaceType"
              }
            ],
            "description": "Oberflächentypen (string). Wird bei Linienobjekten mit constructionType \"Klassischer Tiefbau\", \"Mindertiefe\", \"Pflügen\" & \"Trenching\" sowie bei Punktobjekten mit der objectId \"Grube\" benötigt!\" Das Attribut darf nur bei Rohdaten (postProcessingPending = true) fehlen."
          },
          "comment": {
            "type": "string",
            "title": "Comment",
            "description": "Ergänzender Kommentar zum Objekt mit einer Maximallänge von 255 Zeichen."
          },
          "label": {
            "type": "string",
            "title": "Label",
            "description": "Bezeichnung des Punktobjektes (String) z.B. NVt = Bezeichnung des NVts (51V2041--> ASB V Nummer) oder Muffe = Bezeichnung der Muffe nach Plandaten (z.B. M10 (51R/101))"
          },
          "post_processing_pending": {
            "type": "boolean",
            "title": "Post Processing Pending",
            "description": "Post processing pending",
            "default": false
          }
        },
        "type": "object",
        "title": "MeasurementTelekomData"
      },
      "MeasurementType": {
        "type": "string",
        "enum": ["point", "line", "area", "volume", "cross_section"],
        "title": "MeasurementType",
        "description": "Measurement type enum."
      },
      "MeasurementUnit": {
        "type": "string",
        "enum": ["m", "ft", "sft"],
        "title": "MeasurementUnit",
        "description": "An enumeration."
      },
      "MetaConvertCoordsGlobalLocal": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__other_schemas__GlobalPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "Coordinates"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "MetaConvertCoordsGlobalLocal"
      },
      "MetaConvertCoordsLocalGlobal": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/LocalPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "Coordinates"
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "MetaConvertCoordsLocalGlobal"
      },
      "MetaDeletePileGeofence": {
        "properties": {
          "pile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pile Id",
            "description": "Pile ID"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "start_calc_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start Calc At",
            "description": "Start calculation at"
          }
        },
        "type": "object",
        "required": ["pile_id", "snapshot_id", "start_calc_at"],
        "title": "MetaDeletePileGeofence"
      },
      "MetaDeleteProject": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "MetaDeleteProject"
      },
      "MetaDeleteSdxCloudSnapshot": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "delete_files": {
            "type": "boolean",
            "title": "Delete Files",
            "description": "If files should be deleted from the snapshot",
            "default": false
          },
          "delete_pins": {
            "type": "boolean",
            "title": "Delete Pins",
            "description": "If pins should be deleted from the snapshot",
            "default": false
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "MetaDeleteSdxCloudSnapshot"
      },
      "MetaDjiSnapshotEvent": {
        "properties": {
          "photogrammetry_image_count": {
            "type": "integer",
            "title": "Photogrammetry Image Count",
            "description": "Number of photogrammetry images taken"
          },
          "pins_count": {
            "type": "integer",
            "title": "Pins Count",
            "description": "Number of pins taken"
          }
        },
        "type": "object",
        "title": "MetaDjiSnapshotEvent"
      },
      "MetaInvoice": {
        "properties": {
          "vendor": {
            "$ref": "#/components/schemas/MetaInvoiceVendor"
          },
          "customer": {
            "$ref": "#/components/schemas/MetaInvoiceCustomer"
          },
          "invoice_meta": {
            "$ref": "#/components/schemas/MetaInvoiceMeta"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/MetaInvoiceItem"
            },
            "type": "array",
            "title": "Items",
            "default": []
          }
        },
        "type": "object",
        "required": ["vendor", "customer", "invoice_meta"],
        "title": "MetaInvoice"
      },
      "MetaInvoiceCustomer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "address_line_1": {
            "type": "string",
            "title": "Address Line 1",
            "description": "Address line 1"
          },
          "address_line_2": {
            "type": "string",
            "title": "Address Line 2",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "title": "City",
            "description": "City"
          },
          "zip_code": {
            "type": "string",
            "title": "Zip Code",
            "description": "Zip code"
          },
          "country": {
            "type": "string",
            "title": "Country",
            "description": "Country"
          },
          "vat_id": {
            "type": "string",
            "title": "Vat Id",
            "description": "VAT ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "address_line_1",
          "city",
          "zip_code",
          "country",
          "vat_id"
        ],
        "title": "MetaInvoiceCustomer"
      },
      "MetaInvoiceItem": {
        "properties": {
          "item_number": {
            "type": "string",
            "title": "Item Number",
            "description": "Item number in xentral"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Product name or service this item represents"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the item"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Quantity of the item"
          },
          "discount": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Discount",
            "description": "Discount in percent relative to 1",
            "default": 0
          },
          "unit_price": {
            "type": "number",
            "title": "Unit Price",
            "description": "Unit price of the item. Price of the item in EUR (only EUR supported currently here)"
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "title": "Valid From",
            "description": "Valid from date"
          },
          "valid_to": {
            "type": "string",
            "format": "date-time",
            "title": "Valid To",
            "description": "Valid to date"
          }
        },
        "type": "object",
        "required": ["item_number", "name", "quantity", "unit_price"],
        "title": "MetaInvoiceItem"
      },
      "MetaInvoiceMeta": {
        "properties": {
          "editor": {
            "type": "string",
            "title": "Editor",
            "description": "Editor of the invoice",
            "default": "Raphael Ott"
          },
          "invoice_number": {
            "type": "string",
            "title": "Invoice Number",
            "description": "Invoice number"
          },
          "vat_rate": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Vat Rate",
            "description": "VAT rate in percent relative to 1. E.g. 20% = 0.2",
            "default": 0
          },
          "customer_number": {
            "type": "string",
            "title": "Customer Number",
            "description": "Customer number in Xentral"
          },
          "order": {
            "type": "string",
            "title": "Order",
            "description": "Order number"
          },
          "delivery_note": {
            "type": "string",
            "title": "Delivery Note",
            "description": "Delivery note"
          },
          "delivery_date": {
            "type": "string",
            "format": "date-time",
            "title": "Delivery Date",
            "description": "Delivery date"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date",
            "description": "Date"
          },
          "days_to_pay": {
            "type": "integer",
            "title": "Days To Pay",
            "description": "Days to pay",
            "default": 14
          },
          "creator_email": {
            "type": "string",
            "format": "email",
            "title": "Creator Email",
            "description": "Email of the creator"
          },
          "created_org": {
            "type": "string",
            "title": "Created Org",
            "description": "Organization that created the invoice"
          },
          "tgt_region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaInvoiceTargetRegions"
              }
            ],
            "description": "Target region",
            "default": "EU"
          },
          "tgt_country_code": {
            "type": "string",
            "title": "Tgt Country Code",
            "description": "Target country code"
          }
        },
        "type": "object",
        "required": [
          "invoice_number",
          "customer_number",
          "creator_email",
          "created_org",
          "tgt_country_code"
        ],
        "title": "MetaInvoiceMeta"
      },
      "MetaInvoiceTargetRegions": {
        "type": "string",
        "enum": ["AT", "EU", "WORLD"],
        "title": "MetaInvoiceTargetRegions",
        "description": "An enumeration."
      },
      "MetaInvoiceVendor": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "default": "Sodex Innovations GmbH"
          },
          "address_line_1": {
            "type": "string",
            "title": "Address Line 1",
            "default": "Lorüns 20"
          },
          "address_line_2": {
            "type": "string",
            "title": "Address Line 2",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "title": "City",
            "default": "Lorüns"
          },
          "zip_code": {
            "type": "string",
            "title": "Zip Code",
            "default": "6700"
          },
          "country": {
            "type": "string",
            "title": "Country",
            "default": "Österreich"
          },
          "vat_id": {
            "type": "string",
            "title": "Vat Id",
            "default": "ATU77288123"
          },
          "phone": {
            "type": "string",
            "title": "Phone",
            "default": "+43 664 110 4345"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "default": "info@sodex.at"
          },
          "website": {
            "type": "string",
            "title": "Website",
            "default": "sodex-innovations.com"
          },
          "bank_name": {
            "type": "string",
            "title": "Bank Name",
            "default": "Sparkasse der Stadt Feldkirch"
          },
          "bank_account_number": {
            "type": "string",
            "title": "Bank Account Number",
            "default": "03102857533"
          },
          "bank_routing_number": {
            "type": "string",
            "title": "Bank Routing Number",
            "default": "20604"
          },
          "account_iban": {
            "type": "string",
            "title": "Account Iban",
            "default": "AT77 2060 4031 0285 7533"
          },
          "account_bic": {
            "type": "string",
            "title": "Account Bic",
            "default": "SPFKAT2BXXX"
          },
          "managing_director": {
            "type": "string",
            "title": "Managing Director",
            "default": "Ralf Pfefferkorn"
          },
          "company_number": {
            "type": "string",
            "title": "Company Number",
            "default": "564575h"
          },
          "local_court": {
            "type": "string",
            "title": "Local Court",
            "default": "Feldkirch"
          }
        },
        "type": "object",
        "title": "MetaInvoiceVendor"
      },
      "MetaMeasureRoverPoint": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in rad"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in rad"
          }
        },
        "type": "object",
        "required": ["lat", "lon"],
        "title": "MetaMeasureRoverPoint"
      },
      "MetaPotreeConfig": {
        "properties": {
          "resolution": {
            "type": "integer",
            "title": "Resolution",
            "description": "Resolution of the potree pointcloud",
            "default": 5
          },
          "soil_id": {
            "type": "string",
            "title": "Soil Id",
            "description": "Soil ID of the potree pointcloud"
          },
          "phase_id": {
            "type": "string",
            "title": "Phase Id",
            "description": "Phase ID of the potree pointcloud"
          },
          "geofence_id": {
            "type": "string",
            "title": "Geofence Id",
            "description": "Geofence ID of the potree pointcloud"
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "description": "Min point of the potree pointcloud",
            "default": false
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "description": "Max point of the potree pointcloud",
            "default": false
          },
          "colorized_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColorizedOption"
              }
            ],
            "description": "Colorized option of the potree pointcloud"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the potree pointcloud"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the potree pointcloud"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "Manipulated of the potree pointcloud",
            "default": false
          },
          "export_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerExportOptions"
              }
            ],
            "description": "Export option of the potree pointcloud"
          }
        },
        "type": "object",
        "title": "MetaPotreeConfig"
      },
      "MetaProcess2DPlan": {
        "properties": {
          "plan_2d_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Plan 2D Id",
            "description": "2D Plan ID"
          }
        },
        "type": "object",
        "required": ["plan_2d_id"],
        "title": "MetaProcess2DPlan"
      },
      "MetaProcess3DLayerExport": {
        "properties": {
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          }
        },
        "type": "object",
        "required": ["layer_id", "filetype", "resolution"],
        "title": "MetaProcess3DLayerExport"
      },
      "MetaProcess3DLayerExportExplorer": {
        "properties": {
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype to export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the 3d layer export is named in the explorer"
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the 3d layer export is stored in the explorer"
          }
        },
        "type": "object",
        "required": [
          "layer_id",
          "filetype",
          "resolution",
          "file_name",
          "folder_id"
        ],
        "title": "MetaProcess3DLayerExportExplorer"
      },
      "MetaProcess3DMergedLayerExport": {
        "properties": {
          "merged_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Merged Layer Id",
            "description": "Merged layer ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          }
        },
        "type": "object",
        "required": ["merged_layer_id", "filetype", "resolution"],
        "title": "MetaProcess3DMergedLayerExport"
      },
      "MetaProcess3DMergedLayerExportExplorer": {
        "properties": {
          "merged_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Merged Layer Id",
            "description": "Merged layer ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Export3DModeFiletype"
              }
            ],
            "description": "Filetype"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export in cm"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the 3d merged layer export is named in the explorer"
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the 3d merged layer export is stored in the explorer"
          }
        },
        "type": "object",
        "required": [
          "merged_layer_id",
          "filetype",
          "resolution",
          "file_name",
          "folder_id"
        ],
        "title": "MetaProcess3DMergedLayerExportExplorer"
      },
      "MetaProcessAutomaticMeasurements": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          }
        },
        "type": "object",
        "title": "MetaProcessAutomaticMeasurements"
      },
      "MetaProcessAutostartSystemAddCheck": {
        "properties": {
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID"
          }
        },
        "type": "object",
        "required": ["system_id"],
        "title": "MetaProcessAutostartSystemAddCheck"
      },
      "MetaProcessAutostartUpdateCheck": {
        "properties": {
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "List of geofence points of which the autostart geofence consists of",
            "default": []
          }
        },
        "type": "object",
        "title": "MetaProcessAutostartUpdateCheck"
      },
      "MetaProcessCableExport": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "cable_segment_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Cable Segment Ids",
            "description": "Cable segment IDs to export"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportCableFileType"
              }
            ],
            "description": "Filetype to export"
          }
        },
        "type": "object",
        "required": ["cable_segment_ids", "filetype"],
        "title": "MetaProcessCableExport"
      },
      "MetaProcessCableExportExplorer": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "cable_segment_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Cable Segment Ids",
            "description": "Cable segment IDs to export"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportCableFileType"
              }
            ],
            "description": "Filetype to export"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the cable export is named in the explorer"
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the cable export is stored in the explorer"
          }
        },
        "type": "object",
        "required": ["cable_segment_ids", "filetype", "file_name", "folder_id"],
        "title": "MetaProcessCableExportExplorer"
      },
      "MetaProcessCableImport": {
        "properties": {
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "Cable file ID to import that is uploaded to the file explorer"
          },
          "cable_segment_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Segment Id",
            "description": "Cable segment ID to import the cable to"
          },
          "cable_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Id",
            "description": "Cable ID to import the cable to"
          }
        },
        "type": "object",
        "required": ["file_id", "cable_segment_id", "cable_id"],
        "title": "MetaProcessCableImport"
      },
      "MetaProcessControlPointsMatrix": {
        "properties": {
          "epsg_code": {
            "type": "integer",
            "title": "Epsg Code",
            "description": "EPSG code"
          },
          "global_datum": {
            "type": "string",
            "title": "Global Datum",
            "description": "Global datum"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "Points"
          },
          "coordinate_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Coordinate System Id",
            "description": "Coordinate system ID"
          }
        },
        "type": "object",
        "required": [
          "epsg_code",
          "global_datum",
          "points",
          "coordinate_system_id"
        ],
        "title": "MetaProcessControlPointsMatrix"
      },
      "MetaProcessCrossSectionPoints": {
        "properties": {
          "point_1": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Point 1",
            "description": "Start point of cross section"
          },
          "point_2": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Point 2",
            "description": "second point of cross section"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__constants__CrossSectionType"
              }
            ],
            "description": "Type of the cross section element - snapshot or tobe_terrain"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Objectid of either the snapshot or tobe_terrain"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          }
        },
        "type": "object",
        "required": ["point_1", "point_2", "type", "object_id"],
        "title": "MetaProcessCrossSectionPoints"
      },
      "MetaProcessCrossSectionPointsExport": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "point_1": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Point 1",
            "description": "Start point of cross section"
          },
          "point_2": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Point 2",
            "description": "second point of cross section"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__constants__CrossSectionType"
              }
            ],
            "description": "Type of the cross section element - snapshot or tobe_terrain"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Objectid of either the snapshot or tobe_terrain"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossSectionExportFileType"
              }
            ],
            "description": "Filetype"
          }
        },
        "type": "object",
        "required": ["point_1", "point_2", "type", "object_id", "filetype"],
        "title": "MetaProcessCrossSectionPointsExport"
      },
      "MetaProcessDataset": {
        "properties": {
          "dataset_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dataset Id",
            "description": "Dataset ID"
          }
        },
        "type": "object",
        "required": ["dataset_id"],
        "title": "MetaProcessDataset"
      },
      "MetaProcessDjiFlightDetection": {
        "properties": {},
        "type": "object",
        "title": "MetaProcessDjiFlightDetection"
      },
      "MetaProcessDjiUnprocessedImages": {
        "properties": {},
        "type": "object",
        "title": "MetaProcessDjiUnprocessedImages"
      },
      "MetaProcessDjiWebhook": {
        "properties": {
          "dji_webhook_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Webhook Id",
            "description": "DJI webhook ID"
          }
        },
        "type": "object",
        "required": ["dji_webhook_id"],
        "title": "MetaProcessDjiWebhook"
      },
      "MetaProcessDjiWebhookImages": {
        "properties": {
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "Dji Dock ID"
          },
          "dji_project_name": {
            "type": "string",
            "title": "Dji Project Name",
            "description": "Dji Project Name"
          },
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "minItems": 2,
            "title": "File Ids",
            "description": "List of image file IDs to process"
          }
        },
        "type": "object",
        "required": ["dji_dock_id", "dji_project_name", "file_ids"],
        "title": "MetaProcessDjiWebhookImages"
      },
      "MetaProcessDxfFileCoordinates": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "id of the project to export"
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "MetaProcessDxfFileCoordinates"
      },
      "MetaProcessExportPileBase": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Coordinates"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the measurement"
          },
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "default": "global"
          },
          "height_limit": {
            "type": "integer",
            "title": "Height Limit",
            "description": "Height limit in cm - only for local coordinate type"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height which should be used for the measurement"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportPileBaseFileType"
              }
            ],
            "description": "Filetype to export the pile base",
            "default": ".las"
          }
        },
        "type": "object",
        "required": ["coords", "type", "snapshot_id"],
        "title": "MetaProcessExportPileBase"
      },
      "MetaProcessGeofenceDetectionBox": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "bounding_box": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Bounding Box",
            "description": "Bounding box in global coordinates in radians (lat, lon)"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "detection_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeofenceDetectionType"
              }
            ],
            "description": "Type of the geofence detection to export",
            "default": "pile"
          },
          "min_points": {
            "type": "integer",
            "maximum": 30,
            "minimum": 3,
            "title": "Min Points",
            "description": "Minimum number of points in the detected geofence"
          },
          "max_points": {
            "type": "integer",
            "maximum": 30,
            "minimum": 3,
            "title": "Max Points",
            "description": "Maximum number of points in the detected geofence"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "bounding_box"],
        "title": "MetaProcessGeofenceDetectionBox"
      },
      "MetaProcessHighResLayerExport": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer id"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype"
          }
        },
        "type": "object",
        "required": ["layer_id", "filetype"],
        "title": "MetaProcessHighResLayerExport"
      },
      "MetaProcessHighResLayerExportExplorer": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the high res layer export is named in the explorer"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer id"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype"
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the high res layer export is stored in the explorer"
          }
        },
        "type": "object",
        "required": ["file_name", "layer_id", "filetype", "folder_id"],
        "title": "MetaProcessHighResLayerExportExplorer"
      },
      "MetaProcessHighResMergedLayerExport": {
        "properties": {
          "merged_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Merged Layer Id",
            "description": "Merged layer ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype"
          }
        },
        "type": "object",
        "required": ["merged_layer_id", "filetype"],
        "title": "MetaProcessHighResMergedLayerExport"
      },
      "MetaProcessHighResMergedLayerExportExplorer": {
        "properties": {
          "merged_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Merged Layer Id",
            "description": "Merged layer ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the high res merged layer export is named in the explorer"
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the high res merged layer export is stored in the explorer"
          }
        },
        "type": "object",
        "required": ["merged_layer_id", "filetype", "file_name", "folder_id"],
        "title": "MetaProcessHighResMergedLayerExportExplorer"
      },
      "MetaProcessHighResV2LayerExport": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer id"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportHighResFiletype"
              }
            ],
            "description": "Filetype"
          },
          "export_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerExportOptions"
              }
            ],
            "description": "Export option of the high res layer",
            "default": "all_points"
          },
          "colorized_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerColorizedOption"
              }
            ],
            "description": "Colorized option of the high res layer",
            "default": "colored_by_camera"
          }
        },
        "type": "object",
        "required": ["layer_id", "filetype"],
        "title": "MetaProcessHighResV2LayerExport"
      },
      "MetaProcessImageFiles": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of image file IDs to process"
          },
          "files_origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageFilesOrigin"
              }
            ],
            "description": "Origin of the image files. Points to actions taken after processing the images.",
            "default": "explorer"
          }
        },
        "type": "object",
        "required": ["file_ids"],
        "title": "MetaProcessImageFiles"
      },
      "MetaProcessImageLayer": {
        "properties": {
          "img_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Img Id",
            "description": "Image ID"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          }
        },
        "type": "object",
        "required": ["img_id", "layer_id"],
        "title": "MetaProcessImageLayer"
      },
      "MetaProcessInvoice": {
        "properties": {
          "invoice_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Invoice Id",
            "description": "Invoice ID"
          },
          "invoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaInvoice"
              }
            ],
            "title": "Invoice",
            "description": "Invoice"
          }
        },
        "type": "object",
        "required": ["invoice_id", "invoice"],
        "title": "MetaProcessInvoice"
      },
      "MetaProcessLayer": {
        "properties": {
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          }
        },
        "type": "object",
        "required": ["layer_id"],
        "title": "MetaProcessLayer"
      },
      "MetaProcessLayerData": {
        "properties": {
          "layer_data_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Data Id",
            "description": "Layer data ID"
          }
        },
        "type": "object",
        "required": ["layer_data_id"],
        "title": "MetaProcessLayerData"
      },
      "MetaProcessLineDetectionBox": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "bounding_box": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Bounding Box",
            "description": "Bounding box in global coordinates in radians (lat, lon)"
          },
          "detection_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LineDetectionType"
              }
            ],
            "description": "Type of the line detection to export",
            "default": "cable"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "min_points": {
            "type": "integer",
            "maximum": 30,
            "minimum": 2,
            "title": "Min Points",
            "description": "Minimum number of points in the detected line"
          },
          "max_points": {
            "type": "integer",
            "maximum": 30,
            "minimum": 2,
            "title": "Max Points",
            "description": "Maximum number of points in the detected line"
          },
          "min_points_distance": {
            "type": "number",
            "maximum": 1000,
            "minimum": 20,
            "title": "Min Points Distance",
            "description": "Minimum distance between points of the detected line in cm"
          },
          "max_points_distance": {
            "type": "number",
            "minimum": 30,
            "title": "Max Points Distance",
            "description": "Maximum distance between points of the detected line in cm"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "bounding_box"],
        "title": "MetaProcessLineDetectionBox"
      },
      "MetaProcessLineExport": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossSectionExportFileType"
              }
            ],
            "description": "Filetype"
          },
          "line_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Line Id",
            "description": "Cross section line ID"
          }
        },
        "type": "object",
        "required": ["filetype", "line_id"],
        "title": "MetaProcessLineExport"
      },
      "MetaProcessLokFileValidation": {
        "properties": {
          "lok_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Lok File Id",
            "description": "Lok file ID"
          },
          "grd_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Grd File Id",
            "description": "Grd file ID"
          },
          "lcg_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Lcg File Id",
            "description": "Lcg file ID"
          }
        },
        "type": "object",
        "required": ["lok_file_id"],
        "title": "MetaProcessLokFileValidation"
      },
      "MetaProcessMeasureArea": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Coordinates"
          },
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "default": "global"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          }
        },
        "type": "object",
        "required": ["coords", "snapshot_id"],
        "title": "MetaProcessMeasureArea"
      },
      "MetaProcessMeasureLayerArea": {
        "properties": {
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          },
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Coordinates"
          },
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "default": "global"
          }
        },
        "type": "object",
        "required": ["layer_id", "coords"],
        "title": "MetaProcessMeasureLayerArea"
      },
      "MetaProcessMeasureLayerPile": {
        "properties": {
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "default": "local"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          }
        },
        "type": "object",
        "required": ["layer_id"],
        "title": "MetaProcessMeasureLayerPile"
      },
      "MetaProcessMeasureLayerPoint": {
        "properties": {
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          },
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in rad"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in rad"
          }
        },
        "type": "object",
        "required": ["layer_id", "lat", "lon"],
        "title": "MetaProcessMeasureLayerPoint"
      },
      "MetaProcessMeasureLayerPoints": {
        "properties": {
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/MetaMeasureRoverPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "Measure points"
          }
        },
        "type": "object",
        "required": ["layer_id", "points"],
        "title": "MetaProcessMeasureLayerPoints"
      },
      "MetaProcessMeasurePile": {
        "properties": {
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Coordinates"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the measurement"
          },
          "coord_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateType"
              }
            ],
            "default": "global"
          },
          "height_limit": {
            "type": "integer",
            "title": "Height Limit",
            "description": "Height limit in cm - only for local coordinate type"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height which should be used for the measurement"
          }
        },
        "type": "object",
        "required": ["coords", "type", "snapshot_id"],
        "title": "MetaProcessMeasurePile"
      },
      "MetaProcessMeasurePoint": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in rad"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in rad"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "lat", "lon"],
        "title": "MetaProcessMeasurePoint"
      },
      "MetaProcessMeasurePoints": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/MetaMeasureRoverPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "Measure points"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "points"],
        "title": "MetaProcessMeasurePoints"
      },
      "MetaProcessMeasurementsExport": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "measurement_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Measurement Ids",
            "description": "Measurement IDs"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportPotreeMeasurementsFileType"
              }
            ],
            "description": "Type of the file to export",
            "default": ".dxf"
          }
        },
        "type": "object",
        "required": ["measurement_ids"],
        "title": "MetaProcessMeasurementsExport"
      },
      "MetaProcessMeasurementsToTelekom": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "MetaProcessMeasurementsToTelekom"
      },
      "MetaProcessOrganizationCSVExport": {
        "properties": {
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "delimiter": {
            "type": "string",
            "title": "Delimiter",
            "description": "Delimiter to use for the CSV file",
            "default": ";"
          }
        },
        "type": "object",
        "required": ["organization_id"],
        "title": "MetaProcessOrganizationCSVExport"
      },
      "MetaProcessOrthophoto": {
        "properties": {
          "orthophoto_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Orthophoto Id",
            "description": "Orthophoto ID"
          },
          "pg_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Job Id",
            "description": "Pg job id"
          },
          "standalone_processing": {
            "type": "boolean",
            "title": "Standalone Processing",
            "description": "If the orthophoto is processed standalone",
            "default": false
          },
          "process_snapshot_standalone": {
            "type": "boolean",
            "title": "Process Snapshot Standalone",
            "description": "If the snapshot is processed standalone",
            "default": false
          }
        },
        "type": "object",
        "required": ["orthophoto_id"],
        "title": "MetaProcessOrthophoto"
      },
      "MetaProcessPgSdxCloudSnapshot": {
        "properties": {
          "uuid": {
            "type": "string",
            "title": "Uuid",
            "description": "UUID of the job - required for viscan"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Img File Ids",
            "description": "List of image file IDs"
          },
          "imgs_copied_to_viscan": {
            "type": "boolean",
            "title": "Imgs Copied To Viscan",
            "description": "If images are uploaded to azure blob storage of viscan",
            "default": false
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "If pins should be created for the snapshot if finished.",
            "default": false
          },
          "pixel_count": {
            "type": "integer",
            "title": "Pixel Count",
            "description": "Total number of images in the images.",
            "default": 0
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "description": "Webhook URL for viscan"
          },
          "viscan_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ViscanProcessingStatus"
              }
            ],
            "description": "Status of the viscan job"
          },
          "viscan_uuid": {
            "type": "string",
            "title": "Viscan Uuid",
            "description": "UUID of the viscan job"
          },
          "gcps": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__other_schemas__Gcp"
            },
            "type": "array",
            "title": "Gcps",
            "description": "List of GCPs for the snapshot"
          },
          "gcps_diag_size": {
            "type": "number",
            "title": "Gcps Diag Size",
            "description": "Diagonal size of the GCPs"
          },
          "processing_provider": {
            "type": "string",
            "title": "Processing Provider",
            "description": "Processing provider"
          },
          "processing_type": {
            "type": "string",
            "title": "Processing Type",
            "description": "Processing type of the job. None is auto"
          },
          "upload_url": {
            "type": "string",
            "title": "Upload Url",
            "description": "Upload URL"
          },
          "upload_token": {
            "type": "string",
            "title": "Upload Token",
            "description": "Upload token"
          },
          "download_url": {
            "type": "string",
            "title": "Download Url",
            "description": "Download URL"
          },
          "download_token": {
            "type": "string",
            "title": "Download Token",
            "description": "Download token"
          },
          "error_type": {
            "type": "number",
            "title": "Error Type",
            "description": "Error type"
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message"
          },
          "error_description": {
            "type": "string",
            "title": "Error Description",
            "description": "Error description"
          },
          "best_gnss_position": {
            "type": "number",
            "title": "Best Gnss Position",
            "description": "Best GNSS position",
            "default": 0
          },
          "center_latitude": {
            "type": "number",
            "title": "Center Latitude",
            "description": "Latitude of center of the snapshot calculated by viscan",
            "default": 0
          },
          "center_longitude": {
            "type": "number",
            "title": "Center Longitude",
            "description": "Longitude of center of the snapshot calculated by viscan",
            "default": 0
          },
          "center_altitude": {
            "type": "number",
            "title": "Center Altitude",
            "description": "Altitude calculated by viscan",
            "default": 0
          },
          "routes_captured": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Routes Captured",
            "description": "The list of routes captured"
          }
        },
        "type": "object",
        "required": ["uuid", "snapshot_id", "img_file_ids"],
        "title": "MetaProcessPgSdxCloudSnapshot"
      },
      "MetaProcessPhotoLayerExport": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "CSV file of the local coordinates",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "CSV file of the global coordinates",
            "default": false
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          }
        },
        "type": "object",
        "required": ["layer_id"],
        "title": "MetaProcessPhotoLayerExport"
      },
      "MetaProcessPhotoLayerExportExplorer": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "CSV file of the local coordinates",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "CSV file of the global coordinates",
            "default": false
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer ID"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the photo layer export is named in the explorer"
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the photo layer export is stored in the explorer"
          }
        },
        "type": "object",
        "required": ["layer_id", "file_name", "folder_id"],
        "title": "MetaProcessPhotoLayerExportExplorer"
      },
      "MetaProcessPhotoMergedLayerExport": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "CSV file of the local coordinates",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "CSV file of the global coordinates",
            "default": false
          },
          "merged_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Merged Layer Id",
            "description": "Merged layer ID"
          }
        },
        "type": "object",
        "required": ["merged_layer_id"],
        "title": "MetaProcessPhotoMergedLayerExport"
      },
      "MetaProcessPhotoMergedLayerExportExplorer": {
        "properties": {
          "local_coord_csv": {
            "type": "boolean",
            "title": "Local Coord Csv",
            "description": "CSV file of the local coordinates",
            "default": false
          },
          "global_coord_csv": {
            "type": "boolean",
            "title": "Global Coord Csv",
            "description": "CSV file of the global coordinates",
            "default": false
          },
          "merged_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Merged Layer Id",
            "description": "Merged layer ID"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the photo merged layer export is named in the explorer"
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the photo merged layer export is stored in the explorer"
          }
        },
        "type": "object",
        "required": ["merged_layer_id", "file_name", "folder_id"],
        "title": "MetaProcessPhotoMergedLayerExportExplorer"
      },
      "MetaProcessPhotogrammetryToSodex": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID. Job id is in the snapshot defined"
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "MetaProcessPhotogrammetryToSodex"
      },
      "MetaProcessPileGeofence": {
        "properties": {
          "pile_geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pile Geofence Id",
            "description": "Pile geofence ID"
          }
        },
        "type": "object",
        "required": ["pile_geofence_id"],
        "title": "MetaProcessPileGeofence"
      },
      "MetaProcessPointHistory": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in rad"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in rad"
          },
          "start_calc_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start Calc At",
            "description": "Start calculation at"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "lat", "lon", "start_calc_at"],
        "title": "MetaProcessPointHistory"
      },
      "MetaProcessPotreeCrossSectionExport": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "List of points of the side profile in the potree"
          },
          "potree_id": {
            "type": "string",
            "title": "Potree Id",
            "description": "UUID of the potree project"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the point cloud - either file or snapshot"
          },
          "object_id": {
            "type": "string",
            "title": "Object Id",
            "description": "ObjectId of the file or snapshot "
          }
        },
        "type": "object",
        "required": ["points", "potree_id", "type", "object_id"],
        "title": "MetaProcessPotreeCrossSectionExport"
      },
      "MetaProcessPotreeExport": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "pointcloud_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pointcloud Id",
            "description": "Id of the pointcloud to export of the potree project"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the potree pointcloud"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaPotreeConfig"
              }
            ],
            "title": "Config",
            "description": "Configuration of the potree pointcloud"
          },
          "filetype": {
            "type": "string",
            "title": "Filetype",
            "description": "Filetype"
          },
          "potree_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Id",
            "description": "Potree id"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Object id"
          }
        },
        "type": "object",
        "required": [
          "pointcloud_id",
          "type",
          "project_id",
          "filetype",
          "potree_id",
          "object_id"
        ],
        "title": "MetaProcessPotreeExport"
      },
      "MetaProcessPotreeMeasurementsExport": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "potree_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Id",
            "description": "Potree ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportPotreeMeasurementsFileType"
              }
            ],
            "description": "Filetype to export",
            "default": ".dxf"
          }
        },
        "type": "object",
        "required": ["potree_id"],
        "title": "MetaProcessPotreeMeasurementsExport"
      },
      "MetaProcessPotreePointcloudUrls": {
        "properties": {
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Pointcloud object id of e.g. the snapshot the pointcloud got created of"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__constants__PotreePointCloudType"
              }
            ],
            "description": "Type of the potree pointcloud"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "potree_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Id",
            "description": "Potree id the pointcloud belongs to"
          },
          "pointcloud_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pointcloud Id",
            "description": "Id of the pointcloud the urls belong to"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaPotreeConfig"
              }
            ],
            "title": "Config",
            "description": "Configuration of the potree pointcloud"
          }
        },
        "type": "object",
        "required": [
          "object_id",
          "type",
          "project_id",
          "potree_id",
          "pointcloud_id"
        ],
        "title": "MetaProcessPotreePointcloudUrls"
      },
      "MetaProcessProject3DTimelapse": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the timelapse"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the timelapse"
          },
          "fps": {
            "type": "number",
            "title": "Fps",
            "description": "Frames per second",
            "default": 30
          },
          "user_utc_offset": {
            "type": "integer",
            "title": "User Utc Offset",
            "description": "User UTC offset",
            "default": 0
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "MetaProcessProject3DTimelapse"
      },
      "MetaProcessProjectMigration": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          }
        },
        "type": "object",
        "required": ["project_id"],
        "title": "MetaProcessProjectMigration"
      },
      "MetaProcessProjectXmlExport": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "id of the project to export"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date",
            "description": "Date of the xml export"
          },
          "grid_size": {
            "type": "number",
            "title": "Grid Size",
            "description": "Grid size of the xml export in cm",
            "default": 100
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the xml export"
          }
        },
        "type": "object",
        "required": ["project_id", "date", "s3_key"],
        "title": "MetaProcessProjectXmlExport"
      },
      "MetaProcessReferenceTerrain": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id",
            "description": "Reference Terrain ID"
          }
        },
        "type": "object",
        "required": ["reference_terrain_id"],
        "title": "MetaProcessReferenceTerrain"
      },
      "MetaProcessSdxCloudSnapshot": {
        "properties": {
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "transfer_job_id": {
            "type": "string",
            "title": "Transfer Job Id",
            "description": "ID of the snapshot transfer job the snapshot processing job is part of"
          },
          "standalone_processing": {
            "type": "boolean",
            "title": "Standalone Processing",
            "description": "If the snapshot processing job is standalone. This means no after processing steps are executed. E.g. grid size change",
            "default": false
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "MetaProcessSdxCloudSnapshot"
      },
      "MetaProcessSdxCloudSnapshotMoved": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "original_date": {
            "type": "string",
            "format": "date-time",
            "title": "Original Date",
            "description": "Original date of the snapshot"
          },
          "new_date": {
            "type": "string",
            "format": "date-time",
            "title": "New Date",
            "description": "New date of the snapshot"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "original_date", "new_date"],
        "title": "MetaProcessSdxCloudSnapshotMoved"
      },
      "MetaProcessSnapshot": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "MetaProcessSnapshot"
      },
      "MetaProcessSnapshotComparison": {
        "properties": {
          "snapshot_comparison_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Comparison Id",
            "description": "Snapshot comparison ID"
          }
        },
        "type": "object",
        "required": ["snapshot_comparison_id"],
        "title": "MetaProcessSnapshotComparison"
      },
      "MetaProcessSnapshotDownload": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "filetype": {
            "type": "string",
            "title": "Filetype",
            "description": "Filetype"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id"
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "default": false
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "default": false
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At"
          },
          "colorized_option": {
            "$ref": "#/components/schemas/ColorizedOption"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "transfer_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Transfer Job Id",
            "description": "Set if the download is part of a snapshot transfer job."
          },
          "explorer_export_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Explorer Export Job Id",
            "description": "Set if the download is part of an explorer export job."
          }
        },
        "type": "object",
        "required": ["snapshot_id", "filetype", "resolution"],
        "title": "MetaProcessSnapshotDownload"
      },
      "MetaProcessSnapshotExportExplorer": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name how the snapshot export is named in the explorer"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "filetype": {
            "type": "string",
            "title": "Filetype",
            "description": "Filetype"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id"
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "default": false
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "default": false
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At"
          },
          "colorized_option": {
            "$ref": "#/components/schemas/ColorizedOption"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be used",
            "default": false
          },
          "transfer_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Transfer Job Id",
            "description": "Set if the download is part of a snapshot transfer job."
          },
          "explorer_export_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Explorer Export Job Id",
            "description": "Set if the download is part of an explorer export job."
          },
          "folder_id": {
            "type": "string",
            "title": "Folder Id",
            "description": "Folder ID where the snapshot export is stored in the explorer"
          },
          "download_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Download Job Id"
          }
        },
        "type": "object",
        "required": [
          "file_name",
          "snapshot_id",
          "filetype",
          "resolution",
          "folder_id"
        ],
        "title": "MetaProcessSnapshotExportExplorer"
      },
      "MetaProcessSnapshotFilesToTelekom": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of file IDs to transfer"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "file_ids"],
        "title": "MetaProcessSnapshotFilesToTelekom"
      },
      "MetaProcessSnapshotManipulation": {
        "properties": {
          "snapshot_manipulation_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Manipulation Id",
            "description": "Snapshot manipulation ID"
          }
        },
        "type": "object",
        "required": ["snapshot_manipulation_id"],
        "title": "MetaProcessSnapshotManipulation"
      },
      "MetaProcessSnapshotManipulationDeleted": {
        "properties": {
          "snapshot_manipulation_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Manipulation Id",
            "description": "Snapshot manipulation ID"
          }
        },
        "type": "object",
        "required": ["snapshot_manipulation_id"],
        "title": "MetaProcessSnapshotManipulationDeleted"
      },
      "MetaProcessSnapshotTransfer": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "target_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Target Project Id",
            "description": "Project ID to transfer the snapshot to. Must be sdx cloud (data) project."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot in the target project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot in the target project"
          },
          "insert_at": {
            "type": "string",
            "format": "date-time",
            "title": "Insert At",
            "description": "Date to insert the snapshot at in the target project. Default is time of source snapshot creation."
          },
          "grid_size": {
            "type": "number",
            "title": "Grid Size",
            "description": "Grid size of the snapshot in the target project in cm. Default is resolution of source snapshot."
          },
          "tag_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tag Ids",
            "description": "List of tag IDs to assign to the snapshot in the target project"
          },
          "geofence_id": {
            "type": "string",
            "title": "Geofence Id",
            "description": "Geofence ID to assign to the snapshot in the target project"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "If the manipulated version of the snapshot should be transferred",
            "default": false
          },
          "snapshot_download_job_id": {
            "type": "string",
            "title": "Snapshot Download Job Id",
            "description": "ID of the snapshot download job that is part of this transfer job"
          },
          "snapshot_processing_job_id": {
            "type": "string",
            "title": "Snapshot Processing Job Id",
            "description": "ID of the snapshot processing job that is part of this transfer job"
          }
        },
        "type": "object",
        "required": [
          "snapshot_id",
          "target_project_id",
          "name",
          "insert_at",
          "grid_size"
        ],
        "title": "MetaProcessSnapshotTransfer"
      },
      "MetaProcessSnapshotZip": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "MetaProcessSnapshotZip"
      },
      "MetaProcessSodexToPhotogrammetry": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          }
        },
        "type": "object",
        "title": "MetaProcessSodexToPhotogrammetry"
      },
      "MetaProcessSodexToViscanTransfer": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          }
        },
        "type": "object",
        "title": "MetaProcessSodexToViscanTransfer"
      },
      "MetaProcessStoredLinesExport": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "stored_lines_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Stored Lines Ids",
            "description": "Stored lines ID"
          },
          "timezone_offset": {
            "type": "integer",
            "title": "Timezone Offset",
            "description": "Timezone offset in hours from UTC to the local timezone of user that makes the export"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoredLinesExportFileType"
              }
            ],
            "description": "Filetype to export"
          }
        },
        "type": "object",
        "required": ["stored_lines_ids", "timezone_offset", "filetype"],
        "title": "MetaProcessStoredLinesExport"
      },
      "MetaProcessStoredPointsExport": {
        "properties": {
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "File name"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Unit of the import/export data",
            "default": "m"
          },
          "stored_points_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Stored Points Ids",
            "description": "Stored points ID"
          },
          "timezone_offset": {
            "type": "integer",
            "title": "Timezone Offset",
            "description": "Timezone offset in hours from UTC to the local timezone of user that makes the export"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StoredPointsExportFileType"
              }
            ],
            "description": "Filetype to export"
          }
        },
        "type": "object",
        "required": ["stored_points_ids", "timezone_offset", "filetype"],
        "title": "MetaProcessStoredPointsExport"
      },
      "MetaProcessTelekomPinsToTelekom": {
        "properties": {
          "pin_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pin Ids",
            "description": "List of pin IDs"
          }
        },
        "type": "object",
        "required": ["pin_ids"],
        "title": "MetaProcessTelekomPinsToTelekom"
      },
      "MetaProcessTelekomTransfer": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID the files belong to"
          },
          "file_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "File Ids",
            "description": "List of file IDs to transfer"
          },
          "scan_name": {
            "type": "string",
            "title": "Scan Name",
            "description": "Scan name"
          },
          "telekom_api_key": {
            "type": "string",
            "title": "Telekom Api Key",
            "description": "Telekom API key"
          },
          "telekom_sma": {
            "type": "string",
            "title": "Telekom Sma",
            "description": "Telekom SMA"
          },
          "best_gnss_position": {
            "type": "number",
            "title": "Best Gnss Position",
            "description": "Best GNSS position calculated by viscan",
            "default": 0
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Latitude of center of the snapshot calculated by viscan",
            "default": 0
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Longitude of center of the snapshot calculated by viscan",
            "default": 0
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "Altitude calculated by viscan",
            "default": 0
          },
          "geojson_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoJsonConfig"
              }
            ],
            "title": "Geojson Config",
            "description": "Geojson config of the geojson file that is created for the transfer"
          },
          "result_folder_id": {
            "type": "string",
            "title": "Result Folder Id",
            "description": "Folder ID where the result files are stored"
          }
        },
        "type": "object",
        "required": [
          "snapshot_id",
          "file_ids",
          "scan_name",
          "telekom_api_key",
          "telekom_sma",
          "geojson_config",
          "result_folder_id"
        ],
        "title": "MetaProcessTelekomTransfer"
      },
      "MetaProcessTimelapse": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of images included in the timelapse"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of images included in the timelapse"
          },
          "fps": {
            "type": "number",
            "title": "Fps",
            "description": "Frames per second"
          },
          "duration": {
            "type": "integer",
            "title": "Duration",
            "description": "Duration"
          },
          "user_utc_offset": {
            "type": "integer",
            "title": "User Utc Offset",
            "description": "User UTC offset",
            "default": 0
          }
        },
        "type": "object",
        "required": ["project_id", "start_at", "end_at"],
        "title": "MetaProcessTimelapse"
      },
      "MetaProcessVidocImages": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "s3_keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Keys",
            "description": "S3 keys"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "s3_keys"],
        "title": "MetaProcessVidocImages"
      },
      "MetaProcessVidocImagesV2": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "photogrammetry_processing": {
            "type": "boolean",
            "title": "Photogrammetry Processing",
            "description": "If photogrammetry processing should be done for this snapshot with the vidoc images",
            "default": false
          },
          "telekom_pin_creation": {
            "type": "boolean",
            "title": "Telekom Pin Creation",
            "description": "If telekom pins should be created for this snapshot with the vidoc images",
            "default": false
          },
          "vidoc_images": {
            "items": {
              "$ref": "#/components/schemas/ProcessingInputVidocImage"
            },
            "type": "array",
            "title": "Vidoc Images",
            "description": "List of vidoc images"
          }
        },
        "type": "object",
        "required": ["snapshot_id", "vidoc_images"],
        "title": "MetaProcessVidocImagesV2"
      },
      "MetaProcessViscanScinSnapshot": {
        "properties": {
          "processing_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SodexScinSnapshotProcessingStatus"
              }
            ],
            "description": "Status of the sodex scin snapshot job",
            "default": "created"
          },
          "snapshot_name": {
            "type": "string",
            "title": "Snapshot Name",
            "description": "Name of the snapshot"
          }
        },
        "type": "object",
        "title": "MetaProcessViscanScinSnapshot"
      },
      "MetaProcessViscanScinWebhook": {
        "properties": {
          "webhook_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Webhook Id",
            "description": "Scin webhook ID"
          }
        },
        "type": "object",
        "required": ["webhook_id"],
        "title": "MetaProcessViscanScinWebhook"
      },
      "MetaProcessViscanScinWebhookImages": {
        "properties": {
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of image file IDs to process"
          },
          "create_snapshot": {
            "type": "boolean",
            "title": "Create Snapshot",
            "description": "If a snapshot should be created",
            "default": true
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "If pins should be created",
            "default": true
          },
          "scin_snapshot_job_id": {
            "type": "string",
            "title": "Scin Snapshot Job Id",
            "description": "ID of the scin snapshot processing job"
          },
          "snapshot_name": {
            "type": "string",
            "title": "Snapshot Name",
            "description": "Name of the snapshot"
          }
        },
        "type": "object",
        "required": ["file_ids", "scin_snapshot_job_id"],
        "title": "MetaProcessViscanScinWebhookImages"
      },
      "MetaProcessViscanToSodexTransfer": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          }
        },
        "type": "object",
        "required": ["snapshot_id"],
        "title": "MetaProcessViscanToSodexTransfer"
      },
      "MetaProcessZipDownload": {
        "properties": {
          "files": {
            "items": {
              "$ref": "#/components/schemas/ZipFile"
            },
            "type": "array",
            "title": "Files",
            "description": "List of files to download and zip"
          },
          "zip_name": {
            "type": "string",
            "title": "Zip Name",
            "description": "Name of the zip file",
            "default": "sdx-cloud_download"
          }
        },
        "type": "object",
        "required": ["files"],
        "title": "MetaProcessZipDownload"
      },
      "MetaProcessZipImages": {
        "properties": {
          "zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Zip File Id",
            "description": "Zip file ID"
          },
          "files_to_folder_id": {
            "type": "string",
            "title": "Files To Folder Id",
            "description": "Folder ID where the images should be uploaded to"
          },
          "pg_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Job Id",
            "description": "Photogrammetry job ID to create pins for the images"
          }
        },
        "type": "object",
        "required": ["zip_file_id", "files_to_folder_id"],
        "title": "MetaProcessZipImages"
      },
      "MetaScanEvent": {
        "properties": {
          "snapshots_count": {
            "type": "integer",
            "title": "Snapshots Count",
            "description": "Number of snapshots taken while scanning"
          },
          "images_count": {
            "type": "integer",
            "title": "Images Count",
            "description": "Number of images taken while scanning"
          }
        },
        "type": "object",
        "required": ["snapshots_count", "images_count"],
        "title": "MetaScanEvent"
      },
      "MetaUserSnapshotEvent": {
        "properties": {
          "photogrammetry_image_count": {
            "type": "integer",
            "title": "Photogrammetry Image Count",
            "description": "Number of photogrammetry images taken"
          },
          "pins_count": {
            "type": "integer",
            "title": "Pins Count",
            "description": "Number of pins taken"
          }
        },
        "type": "object",
        "title": "MetaUserSnapshotEvent"
      },
      "NotificationScope": {
        "type": "string",
        "enum": ["user", "project", "organization"],
        "title": "NotificationScope",
        "description": "An enumeration."
      },
      "NotificationType": {
        "type": "string",
        "enum": [
          "process_snapshot_created",
          "process_pile_geofence",
          "process_orthophoto",
          "process_reference_terrain",
          "process_image_layer",
          "process_layer_data",
          "process_dataset",
          "process_potree",
          "process_snapshot_manipulation",
          "system_comes_online",
          "system_goes_offline",
          "system_starts_scanning",
          "system_stops_scanning",
          "system_internet_90_percent_used",
          "system_internet_100_percent_used",
          "system_high_res_90_percent_used",
          "system_high_res_100_percent_used",
          "data_snapshot_processed"
        ],
        "title": "NotificationType",
        "description": "An enumeration."
      },
      "NumberFormat": {
        "type": "string",
        "enum": ["international", "us", "EU", "middle_east"],
        "title": "NumberFormat",
        "description": "An enumeration."
      },
      "OAuthScope": {
        "type": "string",
        "enum": ["scin", "sdxapi"],
        "title": "OAuthScope",
        "description": "An enumeration."
      },
      "OldUserLicenseTypes": {
        "type": "string",
        "enum": [
          "cloud_base",
          "guest",
          "cloud_pro",
          "cloud_unlimited",
          "linevis_base",
          "linevis_pro",
          "linevis_unlimited"
        ],
        "title": "OldUserLicenseTypes",
        "description": "An enumeration."
      },
      "OrderItem": {
        "properties": {
          "product": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Product"
              },
              {
                "type": "object"
              }
            ],
            "title": "Product",
            "description": "Product"
          },
          "product_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Product Id",
            "description": "Product ID. Only set if the product is a subscription product"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Quantity"
          },
          "discount": {
            "type": "number",
            "title": "Discount",
            "description": "Discount in percent of the product price",
            "default": 0
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "title": "Valid From",
            "description": "Valid from date"
          },
          "valid_to": {
            "type": "string",
            "format": "date-time",
            "title": "Valid To",
            "description": "Valid to date"
          },
          "years_billed": {
            "type": "integer",
            "minimum": 1,
            "title": "Years Billed",
            "description": "years the subscriptions are billed for and valid for"
          }
        },
        "type": "object",
        "required": ["product", "quantity"],
        "title": "OrderItem"
      },
      "OrganizationTrialHistory": {
        "properties": {
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the trial"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the trial"
          },
          "used_pix4d_pixels": {
            "type": "integer",
            "title": "Used Pix4D Pixels",
            "description": "Used pix4d pixels of the trial",
            "default": 0
          },
          "free_pix4d_pixels": {
            "type": "integer",
            "title": "Free Pix4D Pixels",
            "description": "Free Received pix4d pixels of the trial",
            "default": 0
          },
          "used_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Used Sdx Photogrammetry Credits",
            "description": "Used sdx photogrammetry pixels of the trial",
            "default": 0
          },
          "free_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Free Sdx Photogrammetry Credits",
            "description": "Free Received sdx photogrammetry pixels of the trial",
            "default": 0
          },
          "free_data_volume": {
            "type": "integer",
            "title": "Free Data Volume",
            "description": "Free Received data volume of the trial",
            "default": 0
          },
          "free_viscan_scin_licenses": {
            "type": "integer",
            "title": "Free Viscan Scin Licenses",
            "description": "Free Received viscanscin licenses of the trial",
            "default": 0
          },
          "free_base_licenses": {
            "type": "integer",
            "title": "Free Base Licenses",
            "description": "Free Received base licenses of the trial",
            "default": 0
          },
          "free_guest_licenses": {
            "type": "integer",
            "title": "Free Guest Licenses",
            "description": "Free Received guest licenses of the trial",
            "default": 0
          },
          "lockdown_after_trial": {
            "type": "boolean",
            "title": "Lockdown After Trial",
            "description": "If true, the organization should go into lockdown after the trial",
            "default": false
          }
        },
        "type": "object",
        "title": "OrganizationTrialHistory"
      },
      "OrthophotoError": {
        "properties": {
          "error_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrthophotoErrorType"
              }
            ],
            "description": "error type if job failed",
            "default": "undefined"
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message",
            "default": "Orthophoto processing failed."
          },
          "error_description": {
            "type": "string",
            "title": "Error Description",
            "description": "Error description",
            "default": "Orthophoto processing failed. Please contact support."
          },
          "error_traceback": {
            "type": "string",
            "title": "Error Traceback",
            "description": "Error traceback if the job failed"
          }
        },
        "type": "object",
        "title": "OrthophotoError"
      },
      "OrthophotoErrorType": {
        "type": "string",
        "enum": ["undefined", "coordinate-system-mismatch"],
        "title": "OrthophotoErrorType",
        "description": "An enumeration."
      },
      "OrthophotoStatus": {
        "type": "string",
        "enum": ["created", "processing", "finished", "failed"],
        "title": "OrthophotoStatus",
        "description": "An enumeration."
      },
      "OrthophotoStatusHistory": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrthophotoStatus"
              }
            ],
            "description": "Status",
            "default": "finished"
          },
          "processing_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Processing Job Id",
            "description": "Processing job id"
          }
        },
        "type": "object",
        "title": "OrthophotoStatusHistory"
      },
      "OrthophotoType": {
        "type": "string",
        "enum": ["tif"],
        "title": "OrthophotoType",
        "description": "An enumeration."
      },
      "Out2DPlan": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Plans2DFiletype"
              }
            ],
            "description": "File type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File ID"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "geojson_s3_key": {
            "type": "string",
            "title": "Geojson S3 Key",
            "description": "GeoJSON S3 key"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Processed",
            "default": false
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "processing_data_volume": {
            "type": "number",
            "title": "Processing Data Volume",
            "description": "Processing data volume in mb"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit",
            "default": "m"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Plans2DStatus"
              }
            ],
            "description": "Status",
            "default": "finished"
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Plans2DError"
              }
            ],
            "title": "Error",
            "description": "Error"
          },
          "status_history": {
            "items": {
              "$ref": "#/components/schemas/Plans2DStatusHistory"
            },
            "type": "array",
            "title": "Status History",
            "description": "Status history",
            "default": []
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes used for processing and storage. Reducted from available datavolume in organization."
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "snapshot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__OutSnapshotV2"
              }
            ],
            "title": "Snapshot"
          },
          "file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
              }
            ],
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "organization_id",
          "filetype",
          "name",
          "file_id",
          "id"
        ],
        "title": "Out2DPlan"
      },
      "OutAiData": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the aidata"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the aidata"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "s3_npy": {
            "type": "string",
            "title": "S3 Npy",
            "description": "S3 path to the numpy file"
          },
          "s3_tar": {
            "type": "string",
            "title": "S3 Tar",
            "description": "S3 path to the tar file"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the aidata"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the aidata"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "system_id", "s3_npy", "s3_tar"],
        "title": "OutAiData"
      },
      "OutApiConfig": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model"
          },
          "framework_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Framework Api",
            "description": "Framework api"
          },
          "framework_manager_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Framework Manager Api",
            "description": "Framework manager api"
          },
          "mm_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Mm Api",
            "description": "MM api"
          },
          "is_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Is Api",
            "description": "IS api"
          },
          "cam_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Cam Api",
            "description": "CAM api"
          },
          "pd_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Pd Api",
            "description": "Pandar api"
          },
          "op_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Op Api",
            "description": "OP api"
          },
          "db_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Db Api",
            "description": "DB api"
          },
          "cs_3d_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Cs 3D Api",
            "description": "CS 3D api"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          }
        },
        "type": "object",
        "required": ["id", "system_id"],
        "title": "OutApiConfig"
      },
      "OutApplications": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "application": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Applications"
              }
            ],
            "description": "Application the applications status is set for"
          },
          "down": {
            "type": "boolean",
            "title": "Down",
            "description": "If the service is down",
            "default": false
          },
          "maintenance": {
            "type": "boolean",
            "title": "Maintenance",
            "description": "if the service is currently under applications",
            "default": false
          },
          "time_up_at": {
            "type": "string",
            "format": "date-time",
            "title": "Time Up At",
            "description": "When the application is back up - either from maintenance or downtime"
          },
          "latest_version": {
            "type": "string",
            "title": "Latest Version",
            "description": "Latest version of the application"
          },
          "min_version": {
            "type": "string",
            "title": "Min Version",
            "description": "Minimum version of the application required for functional user experience"
          }
        },
        "type": "object",
        "required": ["id", "application"],
        "title": "OutApplications"
      },
      "OutAuthClient": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Client name"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret"
          },
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Redirect Uris",
            "description": "Redirect URIs"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Organization",
            "description": "Organization"
          }
        },
        "type": "object",
        "required": [
          "name",
          "client_secret",
          "redirect_uris",
          "organization_id",
          "id"
        ],
        "title": "OutAuthClient"
      },
      "OutAutostartGeofence": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of System IDs"
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Geofence points"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          }
        },
        "type": "object",
        "required": ["project_id", "organization_id", "id"],
        "title": "OutAutostartGeofence"
      },
      "OutBearingMap": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the bearing_map"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the bearing_map"
          },
          "offset_map": {
            "type": "object",
            "title": "Offset Map",
            "description": "Bearing Offset Map, 0 level key: x positions, level 1 of the x position dict are y positions and the corresponding bearing offset",
            "default": {}
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "system_id"],
        "title": "OutBearingMap"
      },
      "OutBucket": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the bucket"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the bucket"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Bucket name"
          },
          "width": {
            "type": "number",
            "title": "Width",
            "description": "Bucket width"
          },
          "length": {
            "type": "number",
            "title": "Length",
            "description": "Bucket length"
          },
          "angle_offset": {
            "type": "number",
            "title": "Angle Offset",
            "description": "Angle offset in radians",
            "default": 0
          },
          "inverted": {
            "type": "boolean",
            "title": "Inverted",
            "description": "Inverted bucket",
            "default": false
          },
          "extraction_threshold": {
            "type": "number",
            "title": "Extraction Threshold",
            "description": "Extraction threshold",
            "default": 0
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "width",
          "length",
          "system_id"
        ],
        "title": "OutBucket"
      },
      "OutCable": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable type"
          },
          "cable_type_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Type Id",
            "description": "Cable type ID"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "cable_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Layer Id",
            "description": "MongoDB unique ID of the cable layer"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "cable_type_id", "project_id"],
        "title": "OutCable"
      },
      "OutCableBlockArea": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "List of points that define the area - coordinates in radians"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable block area"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the cable block area"
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "description": "If the cable block area is disabled",
            "default": false
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "points", "name", "project_id"],
        "title": "OutCableBlockArea"
      },
      "OutCableLayer": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Dashboard creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Dashboard last update date"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the layer"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id"],
        "title": "OutCableLayer"
      },
      "OutCablePoint": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "Captured date of the cable point"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Latitude of the cable point in radians"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Longitude of the cable point in radians"
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "Altitude of the cable point in cm",
            "default": 0
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable point"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the cable point"
          },
          "cable_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Id",
            "description": "MongoDB unique ID of the cable"
          },
          "cable_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Layer Id",
            "description": "MongoDB unique ID of the layer"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "cable_segment_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Segment Id",
            "description": "MongoDB unique ID of the segment"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "MongoDB unique ID of the user"
          },
          "is_linked": {
            "type": "boolean",
            "title": "Is Linked",
            "description": "If the point has links to other points",
            "default": false
          },
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "Index of the cable point",
            "default": 0
          },
          "files": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Files",
            "description": "List of file IDs",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "latitude",
          "longitude",
          "cable_id",
          "cable_layer_id",
          "project_id",
          "cable_segment_id"
        ],
        "title": "OutCablePoint"
      },
      "OutCableType": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable type"
          },
          "cores": {
            "type": "integer",
            "title": "Cores",
            "description": "Number of cores of the cable type"
          },
          "diameter": {
            "type": "number",
            "title": "Diameter",
            "description": "Diameter of the cable type"
          },
          "price_per_meter": {
            "type": "number",
            "title": "Price Per Meter",
            "description": "Price per meter of the cable type"
          },
          "weight_per_meter": {
            "type": "number",
            "title": "Weight Per Meter",
            "description": "Weight per meter of the cable type"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the cable type"
          },
          "manufacturer": {
            "type": "string",
            "title": "Manufacturer",
            "description": "Manufacturer of the cable type"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "has_data": {
            "type": "boolean",
            "title": "Has Data",
            "description": "If the cable type has cable data",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "organization_id"],
        "title": "OutCableType"
      },
      "OutCalendar": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this calendar"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the calendar"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the calendar"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the calendar"
          },
          "owner_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Owner Id",
            "description": "Owner ID"
          },
          "owner_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OwnerType"
              }
            ],
            "description": "Owner type"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "project_id",
          "name",
          "owner_id",
          "owner_type"
        ],
        "title": "OutCalendar"
      },
      "OutCalendarEvent": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this calendar_event"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the calendar_event"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the calendar_event"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the event"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the event"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the event"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the event"
          },
          "day_event": {
            "type": "boolean",
            "title": "Day Event",
            "description": "Is it an event that takes the whole day",
            "default": false
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "calendar_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Calendar Id",
            "description": "Calendar ID"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "type": "array",
            "title": "Files",
            "description": "List of files associated with the calendar event - only user events can have files"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MetaScanEvent"
              },
              {
                "$ref": "#/components/schemas/MetaUserSnapshotEvent"
              },
              {
                "$ref": "#/components/schemas/MetaDjiSnapshotEvent"
              }
            ],
            "title": "Meta",
            "description": "Meta data of the scan event - only system events can have meta data"
          },
          "event_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ],
            "description": "Event type"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "start_at",
          "project_id",
          "calendar_id",
          "event_type"
        ],
        "title": "OutCalendarEvent"
      },
      "OutCalendarSetting": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this calendar_setting"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the calendar_setting"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the calendar_setting"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User ID"
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "Color",
            "description": "Color of the calendar",
            "default": "#009FE3"
          },
          "visible": {
            "type": "boolean",
            "title": "Visible",
            "description": "Visibility of the calendar",
            "default": true
          }
        },
        "type": "object",
        "required": ["id", "created_at", "project_id", "user_id"],
        "title": "OutCalendarSetting"
      },
      "OutCalendarSettingWithCalendar": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this calendar_setting"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the calendar_setting"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the calendar_setting"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User ID"
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "Color",
            "description": "Color of the calendar",
            "default": "#009FE3"
          },
          "visible": {
            "type": "boolean",
            "title": "Visible",
            "description": "Visibility of the calendar",
            "default": true
          }
        },
        "type": "object",
        "required": ["id", "created_at", "project_id", "user_id"],
        "title": "OutCalendarSettingWithCalendar"
      },
      "OutCalendarWithSettings": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the calendar"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the calendar"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the calendar"
          },
          "owner_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Owner Id",
            "description": "Owner ID"
          },
          "owner_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OwnerType"
              }
            ],
            "description": "Owner type"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutCalendarSettingWithCalendar"
              }
            ],
            "title": "Settings",
            "description": "Calendar settings specific to the calendar and requesting user"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "project_id",
          "name",
          "owner_id",
          "owner_type",
          "settings"
        ],
        "title": "OutCalendarWithSettings"
      },
      "OutCamConfig": {
        "properties": {
          "cam_id_snapshots": {
            "type": "integer",
            "title": "Cam Id Snapshots",
            "description": "camera to be used for snapshot creation"
          },
          "cam_id_ref_imgs": {
            "type": "integer",
            "title": "Cam Id Ref Imgs",
            "description": "camera to be used for reference image creation"
          },
          "cam_id_livestream": {
            "type": "integer",
            "title": "Cam Id Livestream",
            "description": "camera to be used for livestream creation"
          },
          "cam_id_op": {
            "type": "integer",
            "title": "Cam Id Op",
            "description": "camera to be used for orthophoto creation"
          }
        },
        "type": "object",
        "title": "OutCamConfig"
      },
      "OutCamera": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Camera name"
          },
          "cable_tracking": {
            "type": "boolean",
            "title": "Cable Tracking",
            "description": "Camera can be used for cable tracking",
            "default": false
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              }
            ],
            "description": "Camera position in the system"
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "description": "Camera is disabled",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "name", "position"],
        "title": "OutCamera"
      },
      "OutCameraConfig": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "date and time when the config was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "date and time when the config was last updated"
          },
          "component_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Component Id",
            "description": "Id of the component the parameters belong to"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "description of the camera config so it can be more easily found"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamType"
              }
            ],
            "description": "type of the camera config"
          },
          "ts_offset": {
            "type": "number",
            "title": "Ts Offset",
            "description": "timestamp offset of the camera"
          },
          "rotate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rotate"
              }
            ],
            "description": "rotation of the camera which should be applied"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "source of the camera stream (only ark)"
          },
          "intrinsic": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Intrinsic",
            "description": "intrinsic matrix of the camera"
          },
          "distortion": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Distortion",
            "description": "distortion coefficients of the camera"
          },
          "s3_calibration_imgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Calibration Imgs",
            "description": "list of calibration images in s3 bucket"
          },
          "cam_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam Pos",
            "description": "position of the camera in the world",
            "default": [0, 0, 0]
          },
          "com_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Com Orient",
            "description": "orientation of the camera in the world",
            "default": [0, 0, 0]
          },
          "low_res_op": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectionConfig"
              }
            ],
            "title": "Low Res Op",
            "description": "low res operation of the camera"
          },
          "high_res_op": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectionConfig"
              }
            ],
            "title": "High Res Op",
            "description": "high res operation of the camera"
          },
          "position": {
            "type": "string",
            "title": "Position",
            "description": "position of the camera"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "Id of the system the parameters belong to"
          }
        },
        "type": "object",
        "required": ["id", "system_id"],
        "title": "OutCameraConfig"
      },
      "OutCheckpoint": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the checkpoint"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the checkpoint"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Checkpoint Points name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Checkpoint Points description"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Checkpoint Point latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Checkpoint Point longitude"
          },
          "target_height": {
            "type": "number",
            "title": "Target Height",
            "description": "Checkpoint Point target height"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "files": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Files",
            "description": "Point files",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "latitude",
          "longitude",
          "project_id"
        ],
        "title": "OutCheckpoint"
      },
      "OutComponent": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this component"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the component"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the component"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the component"
          },
          "system_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "System Id",
            "description": "ID of the system the component belongs to"
          },
          "organization_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Organization Id",
            "description": "ID of the organization the component belongs to"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Serial number of the component"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ComponentTypes"
              }
            ],
            "description": "Type of the component"
          },
          "position": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              },
              {
                "$ref": "#/components/schemas/LidarPosition"
              },
              {
                "$ref": "#/components/schemas/GNSSPosition"
              }
            ],
            "title": "Position",
            "description": "position of the component on the system. Only used for cameras, lidars and GNSS"
          }
        },
        "type": "object",
        "required": ["id", "name", "type"],
        "title": "OutComponent"
      },
      "OutConfig": {
        "properties": {
          "arm_rot": {
            "type": "boolean",
            "title": "Arm Rot",
            "description": "specifies if the arm can roatate left and right"
          },
          "arm_2": {
            "type": "boolean",
            "title": "Arm 2",
            "description": "specifies if the excavator has a 2nd arm"
          }
        },
        "type": "object",
        "title": "OutConfig"
      },
      "OutCoordinateSystem": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "Id of coordinate system"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Created at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Updated at"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of coordinate system"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Configuration"
              }
            ],
            "description": "Type of coordinate system configuration"
          },
          "configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CoordinateSystemCustom"
              },
              {
                "$ref": "#/components/schemas/ParserCoordinateSystemCalibrationFile"
              },
              {
                "$ref": "#/components/schemas/CoordinateSystemControlPoints"
              },
              {
                "$ref": "#/components/schemas/MachineControl"
              }
            ],
            "title": "Configuration"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization id"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          }
        },
        "type": "object",
        "required": ["id", "type", "configuration"],
        "title": "OutCoordinateSystem"
      },
      "OutCorrectionservice": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date"
          },
          "ntrip_server": {
            "type": "string",
            "title": "Ntrip Server",
            "description": "NTRIP server address"
          },
          "ntrip_port": {
            "type": "integer",
            "title": "Ntrip Port",
            "description": "NTRIP server port",
            "default": 2101
          },
          "ntrip_mountpoint": {
            "type": "string",
            "title": "Ntrip Mountpoint",
            "description": "NTRIP mountpoint"
          },
          "ntrip_username": {
            "type": "string",
            "title": "Ntrip Username",
            "description": "NTRIP username"
          },
          "ntrip_password": {
            "type": "string",
            "title": "Ntrip Password",
            "description": "NTRIP password"
          },
          "correction_datum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalDatum"
              }
            ],
            "description": "Datum of the data to be corrected",
            "default": "wgs84"
          },
          "validated": {
            "type": "boolean",
            "title": "Validated",
            "description": "Whether the correctionservice has been validated",
            "default": false
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID the correction service belongs to"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID the correction service belongs to"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID the correction service belongs to"
          }
        },
        "type": "object",
        "required": [
          "id",
          "ntrip_server",
          "ntrip_mountpoint",
          "ntrip_username",
          "ntrip_password",
          "system_id"
        ],
        "title": "OutCorrectionservice"
      },
      "OutCorrectionserviceValidate": {
        "properties": {
          "caster_reachable": {
            "type": "boolean",
            "title": "Caster Reachable",
            "description": "Whether the caster is reachable"
          },
          "mountpoint_exists": {
            "type": "boolean",
            "title": "Mountpoint Exists",
            "description": "Whether the mountpoint exists"
          },
          "credentials_correct": {
            "type": "boolean",
            "title": "Credentials Correct",
            "description": "Whether the credentials are correct"
          }
        },
        "type": "object",
        "required": [
          "caster_reachable",
          "mountpoint_exists",
          "credentials_correct"
        ],
        "title": "OutCorrectionserviceValidate"
      },
      "OutCountry": {
        "properties": {
          "country_code_alpha_2": {
            "type": "string",
            "title": "Country Code Alpha 2"
          },
          "country_name": {
            "type": "string",
            "title": "Country Name"
          }
        },
        "type": "object",
        "required": ["country_code_alpha_2", "country_name"],
        "title": "OutCountry"
      },
      "OutCrossSection": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cross section"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__crosssections__constants__CrossSectionType"
              }
            ],
            "description": "Type of the cross section"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Object ID of either the snapshot or tobe terrain"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the cross section"
          }
        },
        "type": "object",
        "required": ["name", "type"],
        "title": "OutCrossSection"
      },
      "OutCrossSectionProject": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cross section project"
          },
          "point_1": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 1",
            "description": "Point 1 of the cross section in radiant"
          },
          "point_2": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 2",
            "description": "Point 2 of the cross section in radiant"
          },
          "cross_sections": {
            "items": {
              "$ref": "#/components/schemas/OutCrossSection"
            },
            "type": "array",
            "title": "Cross Sections",
            "description": "Cross sections",
            "default": []
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the cross section"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "point_1",
          "point_2",
          "project_id"
        ],
        "title": "OutCrossSectionProject"
      },
      "OutCsMeta": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "timestamp of the creation of the machine config"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "timestamp of the last update of the machine config"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Version of the csmeta",
            "default": 1
          },
          "coord_sys": {
            "type": "string",
            "title": "Coord Sys",
            "description": "Coordinate system type of the cs meta"
          },
          "global_origin_set": {
            "type": "boolean",
            "title": "Global Origin Set",
            "description": "Whether the global origin is set"
          },
          "ref_origin_set": {
            "type": "boolean",
            "title": "Ref Origin Set",
            "description": "Whether the reference origin is set"
          },
          "global_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Global Origin",
            "description": "Global origin location in radians and cm for altitude"
          },
          "ref_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Ref Origin",
            "description": "Reference origin location in radians and cm for altitude"
          },
          "chunk_voxel_size": {
            "type": "number",
            "title": "Chunk Voxel Size",
            "description": "Chunk voxel size in cm"
          },
          "n_params_float32": {
            "type": "integer",
            "title": "N Params Float32",
            "description": "Number of float32 parameters"
          },
          "n_params_uint16": {
            "type": "integer",
            "title": "N Params Uint16",
            "description": "Number of uint16 parameters"
          },
          "n_params_uint8": {
            "type": "integer",
            "title": "N Params Uint8",
            "description": "Number of uint8 parameters"
          },
          "created_ts": {
            "type": "number",
            "title": "Created Ts",
            "description": "Timestamp of creation"
          }
        },
        "type": "object",
        "required": [
          "id",
          "coord_sys",
          "global_origin_set",
          "ref_origin_set",
          "global_origin",
          "ref_origin",
          "chunk_voxel_size",
          "n_params_float32",
          "n_params_uint16",
          "n_params_uint8",
          "created_ts"
        ],
        "title": "OutCsMeta"
      },
      "OutCsParam": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "timestamp of the creation of the machine config"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "timestamp of the last update of the machine config"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "description of the machine"
          },
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__csparams__schemas__OutGeneral"
              }
            ],
            "title": "General",
            "description": "general parameters of the machine"
          },
          "synced_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutSyncedData"
              }
            ],
            "title": "Synced Data",
            "description": "synced data parameters of the machine"
          },
          "cam_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutCamConfig"
              }
            ],
            "title": "Cam Config",
            "description": "camera configuration of the machine"
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutFilter"
              }
            ],
            "title": "Filter",
            "description": "filter parameters of the machine"
          },
          "orthophoto": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__csparams__schemas__OutOrthophoto"
              }
            ],
            "title": "Orthophoto",
            "description": "orthophoto parameters of the machine"
          },
          "img_capturing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutImgCapturing"
              }
            ],
            "title": "Img Capturing",
            "description": "image capturing parameters of the machine"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "OutCsParam"
      },
      "OutDashboard": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Dashboard creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Dashboard last update date"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Dashboard name"
          },
          "grid_data": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Grid Data",
            "description": "Grid data",
            "default": []
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project Id the dashboard belongs to"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User Id the dashboard belongs to"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id", "user_id"],
        "title": "OutDashboard"
      },
      "OutDataCapturing": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the datacapturing"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the datacapturing"
          },
          "tag": {
            "type": "string",
            "title": "Tag",
            "description": "Tag of the datacapturing"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "Date of the datacapturing"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          },
          "data_s3_key": {
            "type": "string",
            "title": "Data S3 Key",
            "description": "S3 key of the datacapturing"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "system_id"],
        "title": "OutDataCapturing"
      },
      "OutDataset": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this dataset"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the dataset"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the dataset"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the dataset"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataTypes"
              }
            ],
            "description": "Type of the dataset data",
            "default": "cut_fill"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__datasets__constants__DataSource"
              }
            ],
            "description": "Data source of the dataset"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id",
            "description": "Geofence ID, if set only the data inside the geofence will be processed"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id",
            "description": "Reference terrain ID - only set if datasource is 'reference_terrain'"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Dataset is processed",
            "default": false
          },
          "timeseries_data": {
            "items": {
              "$ref": "#/components/schemas/CutAndFillTimeSeries"
            },
            "type": "array",
            "title": "Timeseries Data",
            "description": "Timeseries data of the dataset. Can be volume but also others"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "source", "project_id"],
        "title": "OutDataset"
      },
      "OutDjiDock": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Serial Number"
          },
          "create_snapshots": {
            "type": "boolean",
            "title": "Create Snapshots",
            "description": "If snapshots should be created automatically with images from this dock",
            "default": false
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "If pins should be created automatically with images from this dock",
            "default": false
          },
          "grid_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid Size in cm of snapshots created by this dock",
            "default": 5
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point Insertion Option for snapshots created by this dock",
            "default": "lowest_point"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "first_upload_at": {
            "type": "string",
            "format": "date-time",
            "title": "First Upload At",
            "description": "First Upload of images At"
          },
          "latest_upload_at": {
            "type": "string",
            "format": "date-time",
            "title": "Latest Upload At",
            "description": "Latest Upload of images At"
          },
          "latest_upload_in_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Latest Upload In Project Id",
            "description": "Latest Upload in Project ID"
          },
          "drone_sn": {
            "type": "string",
            "title": "Drone Sn",
            "description": "Drone Serial Number currently linked to the dji dock"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "latest_upload_project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Latest Upload Project"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          }
        },
        "type": "object",
        "required": ["organization_id", "name", "serial_number", "id"],
        "title": "OutDjiDock"
      },
      "OutDjiFlighthubCredentials": {
        "properties": {
          "storage_location": {
            "$ref": "#/components/schemas/DjiStorageLocation"
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "default": "https://api.sodex.cloud/webhooks/dji/flighthub2"
          },
          "third_party_name": {
            "type": "string",
            "title": "Third Party Name",
            "default": "SDX-Cloud"
          }
        },
        "type": "object",
        "title": "OutDjiFlighthubCredentials"
      },
      "OutExtraction": {
        "properties": {
          "disable_extraction": {
            "type": "boolean",
            "title": "Disable Extraction",
            "description": "disables the extraction of the machine"
          },
          "disable_extraction_cuboids": {
            "type": "boolean",
            "title": "Disable Extraction Cuboids",
            "description": "disables the extraction of the machine cuboids"
          },
          "point_4": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 4",
            "description": "point 4 of the extraction of the machine itself in cm"
          },
          "point_5": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 5",
            "description": "point 5 of the extraction of the machine itself in cm"
          },
          "point_6": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 6",
            "description": "point 6 of the extraction of the machine itself in cm"
          },
          "point_7": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 7",
            "description": "point 7 of the extraction of the machine itself in cm"
          },
          "point_8": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 8",
            "description": "point 8 of the extraction of the machine itself in cm"
          }
        },
        "type": "object",
        "title": "OutExtraction"
      },
      "OutFeature": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Feature creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Feature"
              }
            ],
            "description": "Feature name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Feature description"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Feature enabled"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "enabled"],
        "title": "OutFeature"
      },
      "OutFiles": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file - saved on assets bucket"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__pins__constants__FileSource"
              }
            ],
            "description": "Source of the file"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File ID of the file"
          },
          "blurhash": {
            "type": "string",
            "title": "Blurhash",
            "description": "Blurhash of the file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation time of the file"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update time of the file"
          },
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "Unique ID of this file"
          },
          "low_res_webp_s3_key": {
            "type": "string",
            "title": "Low Res Webp S3 Key",
            "description": "S3 key of the low resolution webp image"
          },
          "mid_res_webp_s3_key": {
            "type": "string",
            "title": "Mid Res Webp S3 Key",
            "description": "S3 key of the mid resolution webp image"
          },
          "high_res_webp_s3_key": {
            "type": "string",
            "title": "High Res Webp S3 Key",
            "description": "S3 key of the high resolution webp image"
          }
        },
        "type": "object",
        "required": ["name", "s3_key", "source", "id"],
        "title": "OutFiles"
      },
      "OutFiletype": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the filetype"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the filetype"
          },
          "snapshot_download": {
            "type": "boolean",
            "title": "Snapshot Download",
            "description": "Does the filetype have snapshot download",
            "default": false
          },
          "mesh": {
            "type": "boolean",
            "title": "Mesh",
            "description": "Does the filetype have mesh",
            "default": false
          },
          "resolution": {
            "type": "boolean",
            "title": "Resolution",
            "description": "Does the filetype have resolution",
            "default": false
          },
          "points": {
            "type": "boolean",
            "title": "Points",
            "description": "Does the filetype have points",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "name", "type"],
        "title": "OutFiletype"
      },
      "OutFilter": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the filter is active"
          }
        },
        "type": "object",
        "title": "OutFilter"
      },
      "OutFolder": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the folder -> None for root folders"
          },
          "parent_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Parent Id",
            "description": "ID of the parent folder -> is none for root folders"
          },
          "user_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "User Id",
            "description": "ID of the user that created the folder"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "ID of the project the folder belongs to"
          }
        },
        "type": "object",
        "required": ["id", "project_id"],
        "title": "OutFolder"
      },
      "OutFolderWithFiles": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the folder -> None for root folders"
          },
          "parent_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Parent Id",
            "description": "ID of the parent folder -> is none for root folders"
          },
          "user_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "User Id",
            "description": "ID of the user that created the folder"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "ID of the project the folder belongs to"
          },
          "folders": {
            "items": {
              "$ref": "#/components/schemas/OutFolder"
            },
            "type": "array",
            "title": "Folders",
            "description": "List of folders in the folder"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__schemas__OutFile"
            },
            "type": "array",
            "title": "Files",
            "description": "List of files in the folder"
          }
        },
        "type": "object",
        "required": ["id", "project_id", "folders", "files"],
        "title": "OutFolderWithFiles"
      },
      "OutGalleryDateInfo": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date",
            "description": "Date of the gallery info"
          },
          "skip": {
            "type": "integer",
            "title": "Skip",
            "description": "Skip the first n results",
            "default": 0
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Count of images on that date"
          }
        },
        "type": "object",
        "required": ["date", "count"],
        "title": "OutGalleryDateInfo"
      },
      "OutGalleryInfo": {
        "properties": {
          "pin_id": {
            "type": "string",
            "title": "Pin Id",
            "description": "Pin id the image belongs to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the image was created at"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location where the image was taken"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of system when taking the image"
          },
          "img_index": {
            "type": "integer",
            "title": "Img Index",
            "description": "Index of the image in the pin files"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the image"
          },
          "pin_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__pins__constants__PinType"
              }
            ],
            "description": "Type of the pin"
          },
          "system_id": {
            "type": "string",
            "title": "System Id",
            "description": "System id that took the image"
          },
          "blurhash": {
            "type": "string",
            "title": "Blurhash",
            "description": "Blurhash of the image"
          },
          "tag_id": {
            "type": "string",
            "title": "Tag Id",
            "description": "Tag id of the image"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id of the image"
          },
          "s3_key_low_quality": {
            "type": "string",
            "title": "S3 Key Low Quality",
            "description": "S3 key of the low quality image"
          },
          "s3_key_middle_quality": {
            "type": "string",
            "title": "S3 Key Middle Quality",
            "description": "S3 key of the middle quality image"
          },
          "s3_key_high_quality": {
            "type": "string",
            "title": "S3 Key High Quality",
            "description": "S3 key of the high quality image"
          },
          "cam_pos": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              }
            ],
            "description": "Camera position of the image"
          }
        },
        "type": "object",
        "required": [
          "pin_id",
          "created_at",
          "location",
          "bearing",
          "img_index",
          "s3_key",
          "pin_type",
          "s3_key_low_quality",
          "s3_key_middle_quality",
          "s3_key_high_quality"
        ],
        "title": "OutGalleryInfo"
      },
      "OutGcpSet": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the gcp_set"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the gcp_set"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the gcp_set"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the gcp_set"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date",
            "description": "Start date of the gcp_set"
          },
          "diagonal_length": {
            "type": "number",
            "title": "Diagonal Length",
            "description": "Diagonal length in mm"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__processingjobs__other_schemas__Gcp"
            },
            "type": "array",
            "title": "Points",
            "description": "List of GCPs"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "created_by_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By Id",
            "description": "MongoDB unique ID of the user who created the gcp_set"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "start_date",
          "diagonal_length",
          "points",
          "project_id",
          "created_by_id"
        ],
        "title": "OutGcpSet"
      },
      "OutGeofence": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Geofence name"
          },
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Geofence coordinates"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project Id the geofence belongs to"
          }
        },
        "type": "object",
        "required": ["id", "name", "coords", "project_id"],
        "title": "OutGeofence"
      },
      "OutGlobalPoint": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in deg"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in deg"
          },
          "alt": {
            "type": "number",
            "title": "Alt",
            "description": "Altitude in m"
          },
          "reference_terrain_height_diff": {
            "type": "number",
            "title": "Reference Terrain Height Diff",
            "description": "Height difference to the reference terrain in m. Only populated if reference terrain id is provided and reference terrain is available for the given point coordinates."
          }
        },
        "type": "object",
        "required": ["lat", "lon", "alt"],
        "title": "OutGlobalPoint"
      },
      "OutGradient": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date"
          },
          "colors": {
            "items": {
              "type": "string",
              "maxLength": 7,
              "minLength": 7,
              "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
            },
            "type": "array",
            "maxLength": 7,
            "minLength": 7,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "Colors",
            "description": "List of colors in hex format"
          },
          "default": {
            "type": "boolean",
            "title": "Default",
            "description": "Is this a default gradient"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id that created this gradient"
          }
        },
        "type": "object",
        "required": ["id", "colors", "default"],
        "title": "OutGradient"
      },
      "OutImage": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "s3_lidar_xyz": {
            "type": "string",
            "title": "S3 Lidar Xyz",
            "description": "S3 key of the lidar xyz"
          },
          "s3_is_data": {
            "type": "string",
            "title": "S3 Is Data",
            "description": "S3 key of the is data"
          },
          "s3_img": {
            "type": "string",
            "title": "S3 Img",
            "description": "S3 key of the img"
          },
          "created_ts": {
            "type": "number",
            "title": "Created Ts",
            "description": "Created timestamp"
          },
          "upload_at": {
            "type": "string",
            "format": "date-time",
            "title": "Upload At",
            "description": "Upload at"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "Layer id"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id"
          },
          "while_moving": {
            "type": "boolean",
            "title": "While Moving",
            "description": "While moving",
            "default": false
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "OutImage"
      },
      "OutImages": {
        "properties": {
          "upload_at": {
            "type": "string",
            "format": "date-time",
            "title": "Upload At",
            "description": "Date the snapshot was uploaded"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the image"
          }
        },
        "type": "object",
        "title": "OutImages"
      },
      "OutImgCapturing": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the image capturing is active"
          },
          "frequency": {
            "type": "number",
            "title": "Frequency",
            "description": "frequency of the image capturing in seconds"
          }
        },
        "type": "object",
        "title": "OutImgCapturing"
      },
      "OutInfomapfilter": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "time_filter": {
            "type": "boolean",
            "title": "Time Filter",
            "description": "If time filter is activated or not"
          },
          "time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutTimeConfig"
              }
            ],
            "title": "Time",
            "description": "Time config of the filter"
          },
          "geofence_filter": {
            "type": "boolean",
            "title": "Geofence Filter",
            "description": "If geofence filter is activated or not"
          },
          "geofence_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Geofence Ids",
            "description": "List of geofence IDs of the filter",
            "default": []
          },
          "system_filter": {
            "type": "boolean",
            "title": "System Filter",
            "description": "If system filter is activated or not"
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of system IDs of the filter",
            "default": []
          },
          "user_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "User Id",
            "description": "User ID of the creator of the filter"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "Project ID of the filter"
          }
        },
        "type": "object",
        "required": [
          "id",
          "time_filter",
          "geofence_filter",
          "system_filter",
          "user_id",
          "project_id"
        ],
        "title": "OutInfomapfilter"
      },
      "OutInviteToken": {
        "properties": {
          "invite_token": {
            "type": "string",
            "title": "Invite Token",
            "description": "Invite token for the user"
          }
        },
        "type": "object",
        "required": ["invite_token"],
        "title": "OutInviteToken"
      },
      "OutInvoice": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "customer_org_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Customer Org Id",
            "description": "Organization ID that received the invoice"
          },
          "credited_org_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Credited Org Id",
            "description": "Organization ID that was credited for the invoice"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            },
            "type": "array",
            "title": "Items",
            "description": "Items included in the invoice"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceType"
              }
            ],
            "description": "Invoice type",
            "default": "SDX_CLOUD_INVOICE"
          },
          "invoice_number": {
            "type": "integer",
            "title": "Invoice Number",
            "description": "Invoice number"
          },
          "invoice_number_prefix": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceNumberPrefix"
              }
            ],
            "description": "Invoice number prefix"
          },
          "generated_invoice_s3_key": {
            "type": "string",
            "title": "Generated Invoice S3 Key",
            "description": "S3 key of the generated invoice"
          },
          "customer_tz_offset": {
            "type": "number",
            "title": "Customer Tz Offset",
            "description": "Timezone offset of the customer",
            "default": 0
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID that created the invoice"
          },
          "sent_to": {
            "items": {
              "type": "string",
              "format": "email"
            },
            "type": "array",
            "title": "Sent To",
            "description": "Emails to which the invoice has been sent",
            "default": []
          },
          "days_to_pay": {
            "type": "integer",
            "title": "Days To Pay",
            "description": "Days to pay",
            "default": 14
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "title": "Paid At",
            "description": "Date the invoice was paid"
          },
          "stripe_invoice_id": {
            "type": "string",
            "title": "Stripe Invoice Id",
            "description": "Stripe invoice ID"
          },
          "order_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Order Id",
            "description": "Order ID"
          },
          "stripe_total_amount": {
            "type": "number",
            "title": "Stripe Total Amount",
            "description": "Total amount of the invoice in Stripe with taxes"
          },
          "stripe_currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__constants__SupportedCurrency"
              }
            ],
            "description": "Currency of the invoice in Stripe"
          },
          "stripe_hosted_invoice_url": {
            "type": "string",
            "title": "Stripe Hosted Invoice Url",
            "description": "Stripe hosted invoice URL"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Due date"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "customer_organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Customer Organization"
          },
          "credited_organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Credited Organization"
          },
          "created_by_user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "Created By User"
          }
        },
        "type": "object",
        "required": [
          "customer_org_id",
          "credited_org_id",
          "items",
          "invoice_number",
          "created_by_user_id",
          "id"
        ],
        "title": "OutInvoice"
      },
      "OutIsParam": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the parameters"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the parameters"
          },
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__isparams__schemas__OutGeneral"
              }
            ],
            "title": "General",
            "description": "General parameters"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the parameters"
          },
          "leica": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutLeica"
              }
            ],
            "title": "Leica",
            "description": "Leica parameters"
          },
          "mts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutMts"
              }
            ],
            "title": "Mts",
            "description": "MTS parameters"
          },
          "topcon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutTopcon"
              }
            ],
            "title": "Topcon",
            "description": "Topcon parameters"
          },
          "volvo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutVolvo"
              }
            ],
            "title": "Volvo",
            "description": "Volvo parameters"
          },
          "sp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutSeptentrio"
              }
            ],
            "title": "Sp",
            "description": "Septentrio parameters"
          },
          "trafo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Trafo"
              }
            ],
            "title": "Trafo",
            "description": "Trafo parameters"
          },
          "ai_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtificialintelligenceData"
              }
            ],
            "title": "Ai Data",
            "description": "AI data parameters"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "Id of the system the parameters belong to"
          }
        },
        "type": "object",
        "required": ["system_id"],
        "title": "OutIsParam"
      },
      "OutLayer": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the layer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerType"
              }
            ],
            "description": "Type of the layer",
            "default": "high_res"
          },
          "image_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Image Id",
            "description": "Image ID"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "ID of the project the folder belongs to"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "data_available": {
            "type": "boolean",
            "title": "Data Available",
            "description": "Data available for the layer - if at least one layerdata is processed",
            "default": false
          },
          "s3_preview_metadata": {
            "type": "string",
            "title": "S3 Preview Metadata",
            "description": "S3 preview metadata of the layer potree"
          },
          "s3_preview_hierarchy": {
            "type": "string",
            "title": "S3 Preview Hierarchy",
            "description": "S3 preview hierarchy of the layer potree"
          },
          "s3_preview_octree": {
            "type": "string",
            "title": "S3 Preview Octree",
            "description": "S3 preview octree of the layer potree"
          },
          "global_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "maxItems": 3,
            "minItems": 2,
            "title": "Global Pos",
            "description": "Global position of the layer, only for high res and only if data_available is True"
          },
          "bytes": {
            "type": "number",
            "title": "Bytes",
            "description": "Data volume of the layer in bytes"
          },
          "data_uploaded": {
            "type": "boolean",
            "title": "Data Uploaded",
            "description": "Data uploaded for the layer - if at all layerdata of one capture is uploaded",
            "default": false
          },
          "optimal_zoom_level": {
            "type": "integer",
            "title": "Optimal Zoom Level",
            "description": "Optimal zoom level for the layer",
            "default": 18
          },
          "potree_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Project Id",
            "description": "Potree project ID"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id", "system_id"],
        "title": "OutLayer"
      },
      "OutLayerData": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this segment"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the layer_data"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the layer_data"
          },
          "global_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Global Pos",
            "description": "Global position of the layer data in radians"
          },
          "local_pos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Local Pos",
            "description": "Local position of the layer data in cm. [easting, northing, height]"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the layer data in radians"
          },
          "mb_to_remove": {
            "type": "number",
            "title": "Mb To Remove",
            "description": "MB to remove from the extension pack layer data",
            "default": 0.001
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id",
            "description": "MongoDB unique ID of the layer"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerType"
              }
            ],
            "description": "Layer type"
          },
          "s3_data": {
            "type": "string",
            "title": "S3 Data",
            "description": "Layer data S3 path"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Layer data processed",
            "default": false
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Layer data size in bytes"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "MongoDB unique ID of the organization"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "layer_id",
          "project_id",
          "system_id",
          "type",
          "s3_data"
        ],
        "title": "OutLayerData"
      },
      "OutLeica": {
        "properties": {
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the udp-stream"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the udp-stream"
          },
          "udp_broke": {
            "type": "boolean",
            "title": "Udp Broke",
            "description": "if the udp-stream is broken or not"
          },
          "eth_interface": {
            "type": "string",
            "title": "Eth Interface",
            "description": "ethernet interface if raw socket is used"
          }
        },
        "type": "object",
        "title": "OutLeica"
      },
      "OutLicense": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this license"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "organization_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LicenseTypes"
              }
            ],
            "description": "License type"
          },
          "scope_level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeLevels"
              }
            ],
            "description": "Scope level of the license"
          },
          "payed": {
            "type": "boolean",
            "title": "Payed",
            "description": "If the license is payed or free issued",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "type", "scope_level"],
        "title": "OutLicense"
      },
      "OutLicenseConfigs": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Features"
              }
            ],
            "description": "Feature key"
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureCategory"
              }
            ],
            "description": "Feature category"
          },
          "disabled_for": {
            "items": {
              "$ref": "#/components/schemas/LicenseTypes"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["id", "key", "category"],
        "title": "OutLicenseConfigs"
      },
      "OutLicenseV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__management__license__constants__SystemLicenseTypes"
              },
              {
                "$ref": "#/components/schemas/UserLicenseTypes"
              }
            ],
            "title": "Type",
            "description": "Type of the license"
          },
          "scope_level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeLevel"
              }
            ],
            "description": "Scope level of the license"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization id"
          },
          "payed": {
            "type": "boolean",
            "title": "Payed",
            "description": "Payed status of the license",
            "default": false
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LicenseSource"
              }
            ],
            "description": "Source of the license",
            "default": "not_set"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["type", "scope_level", "id"],
        "title": "OutLicenseV2"
      },
      "OutLidarConfig": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this lidar"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date and time when the lidar was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Date and time when the lidar was updated"
          },
          "modelname": {
            "type": "string",
            "title": "Modelname",
            "description": "Name of the model"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model"
          },
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "IP address of the lidar"
          },
          "dest_ip_address": {
            "type": "string",
            "title": "Dest Ip Address",
            "description": "Destination ip of the udp stream"
          },
          "control_port": {
            "type": "integer",
            "title": "Control Port",
            "description": "port for the TCP socket of the lidar"
          },
          "stream_port": {
            "type": "integer",
            "title": "Stream Port",
            "description": "port for the UDP stream of the lidar"
          },
          "spin_rate": {
            "type": "integer",
            "title": "Spin Rate",
            "description": "spin rate of the lidar"
          },
          "return_mode": {
            "type": "integer",
            "title": "Return Mode",
            "description": "return mode of the lidar"
          },
          "start_angle": {
            "type": "integer",
            "title": "Start Angle",
            "description": "start angle of the lidar"
          },
          "end_angle": {
            "type": "integer",
            "title": "End Angle",
            "description": "end angle of the lidar"
          },
          "ptp": {
            "type": "boolean",
            "title": "Ptp",
            "description": "\tspecifies if ptp is used or not (ntp)"
          },
          "s3_lidar2imu": {
            "type": "string",
            "title": "S3 Lidar2Imu",
            "description": "S3 path to the lidar2imu calibration file"
          },
          "s3_lidar2cam": {
            "type": "string",
            "title": "S3 Lidar2Cam",
            "description": "S3 path to the lidar2cam calibration file"
          },
          "component_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Component Id",
            "description": "MongoDB unique ID of the component this lidar belongs to"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system this lidar belongs to"
          }
        },
        "type": "object",
        "required": ["id", "system_id"],
        "title": "OutLidarConfig"
      },
      "OutLine": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this line"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the line"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the line"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the line"
          },
          "height": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Height",
            "description": "list of height"
          },
          "distances": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Distances",
            "description": "list of distance"
          },
          "easting": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Easting",
            "description": "list of easting"
          },
          "northing": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Northing",
            "description": "list of northing"
          },
          "cross_section_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cross Section Project Id",
            "description": "Cross section project ID"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the line"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "height",
          "distances",
          "easting",
          "northing",
          "project_id"
        ],
        "title": "OutLine"
      },
      "OutLocalPoint": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting in m"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing in m"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height in m"
          },
          "reference_terrain_height_diff": {
            "type": "number",
            "title": "Reference Terrain Height Diff",
            "description": "Height difference to the reference terrain in m. Only populated if reference terrain id is provided and reference terrain is available for the given point coordinates."
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "OutLocalPoint"
      },
      "OutMachineConfig": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the machine config"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the machine config"
          },
          "modelname": {
            "type": "string",
            "title": "Modelname",
            "description": "BaseModel name of the machine"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the machine"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutConfig"
              }
            ],
            "title": "Config",
            "description": "Config of the machine"
          },
          "measurements": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__machineconfigs__schemas__OutMeasurements"
              }
            ],
            "title": "Measurements",
            "description": "Measurements of the machine"
          },
          "extraction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutExtraction"
              }
            ],
            "title": "Extraction",
            "description": "Extraction of the machine"
          },
          "sensors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutSensors"
              }
            ],
            "title": "Sensors",
            "description": "Sensors of the machine"
          },
          "offsets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOffsets"
              }
            ],
            "title": "Offsets",
            "description": "Offsets of the machine"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          }
        },
        "type": "object",
        "required": ["id", "system_id"],
        "title": "OutMachineConfig"
      },
      "OutManagerConfig": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date and time when the lidar was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Date and time when the lidar was updated"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model"
          },
          "ka_max": {
            "type": "integer",
            "title": "Ka Max",
            "description": "max time without a keep alive signal to be alive in seconds"
          },
          "ka_check_interval": {
            "type": "integer",
            "title": "Ka Check Interval",
            "description": "interval to check for keep alive signals in seconds"
          },
          "pwr_interface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PowerInterface"
              }
            ],
            "description": "can or gpio for switching sensor power on/off"
          },
          "can_baudrate": {
            "type": "integer",
            "title": "Can Baudrate",
            "description": "baudrate of the can interface"
          },
          "can_module_fan": {
            "type": "integer",
            "title": "Can Module Fan",
            "description": "can module fan"
          },
          "can_module_sensor": {
            "type": "integer",
            "title": "Can Module Sensor",
            "description": "can module sensor"
          },
          "can_module_tablet": {
            "type": "integer",
            "title": "Can Module Tablet",
            "description": "can module tablet"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system this lidar belongs to"
          }
        },
        "type": "object",
        "required": ["id", "system_id"],
        "title": "OutManagerConfig"
      },
      "OutManipulation": {
        "properties": {
          "fitting_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FittingPoint"
              }
            ],
            "title": "Fitting Point",
            "description": "Fitting point of the manipulation"
          }
        },
        "type": "object",
        "title": "OutManipulation"
      },
      "OutMeasurePointAPI": {
        "properties": {
          "global_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutGlobalPoint"
              }
            ],
            "title": "Global Point",
            "description": "Global point that got measured. Must be set if local_point is set."
          },
          "local_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutLocalPoint"
              }
            ],
            "title": "Local Point",
            "description": "Local point that got measured. Must be set if global_point is set."
          },
          "system_id": {
            "type": "string",
            "title": "System Id",
            "description": "System id of system which captured the point. Only populated in system projects."
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "UTC ISO Datetime when the point was scanned/captured."
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementApiError"
              }
            ],
            "description": "Error message if the point was not measured. Must be set if global_point or local_point is not set."
          }
        },
        "type": "object",
        "title": "OutMeasurePointAPI"
      },
      "OutMeasurement": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "measurement_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Measurement Layer Id",
            "description": "Measurement Layer ID"
          },
          "measurement_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementType"
              }
            ],
            "description": "Measurement Type"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/MeasurementPoint"
            },
            "type": "array",
            "minItems": 1,
            "title": "Points",
            "description": "Points of the measurement"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "telekom_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementTelekomData"
              }
            ],
            "title": "Telekom Data",
            "description": "Telekom Data"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "area_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementAreaData"
              }
            ],
            "title": "Area Data",
            "description": "Area Data. Only set if measurement type is AREA"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the measurement"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementRole"
              }
            ],
            "description": "Role of the measurement"
          },
          "block_delete": {
            "type": "boolean",
            "title": "Block Delete",
            "description": "Block delete of the measurement",
            "default": false
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deprecated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deprecated At",
            "description": "UTC ISO Datetime when the measurement was deprecated and needs manual changes."
          },
          "measurement_layer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutMeasurementLayer"
              }
            ],
            "title": "Measurement Layer"
          },
          "created_by_user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "Created By User"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "organization_id",
          "measurement_type",
          "points",
          "id"
        ],
        "title": "OutMeasurement"
      },
      "OutMeasurementLayer": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "high_res_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "High Res Layer Id",
            "description": "High Res Layer ID"
          },
          "parent_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Layer Id",
            "description": "Parent Measurement Layer ID. If none has no parent and is a root layer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementLayerType"
              }
            ],
            "description": "Type of the measurement layer",
            "default": "data_project_sodex_layer"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "telekom_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementTelekomData"
              }
            ],
            "title": "Telekom Data",
            "description": "Telekom Data which is default for measurements created in this layer"
          },
          "default_color": {
            "type": "string",
            "title": "Default Color",
            "description": "Default color for measurements created in this layer"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "snapshot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__OutSnapshotV2"
              }
            ],
            "title": "Snapshot"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Organization"
          },
          "created_by_user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "Created By User"
          }
        },
        "type": "object",
        "required": ["project_id", "organization_id", "name", "id"],
        "title": "OutMeasurementLayer"
      },
      "OutMeasurementResult": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/OutMeasurePointAPI"
            },
            "type": "array",
            "minItems": 1,
            "title": "Points",
            "description": "Points that were measured"
          },
          "line_result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureResultLine"
              }
            ],
            "title": "Line Result",
            "description": "Line result. Only set if line_config is set."
          },
          "area_result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureResultArea"
              }
            ],
            "title": "Area Result",
            "description": "Area result. Only set if area_config is set."
          },
          "volume_result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureResultVolume"
              }
            ],
            "title": "Volume Result",
            "description": "Volume result. Only set if volume_measurement_config is set."
          },
          "cross_section_result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasureResultCrossSections"
              }
            ],
            "title": "Cross Section Result",
            "description": "Cross section result. Only set if cross_section_config is set."
          }
        },
        "type": "object",
        "required": ["points"],
        "title": "OutMeasurementResult"
      },
      "OutMergedLayer": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this segment"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the merged_layer"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the merged_layer"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the merged_layer"
          },
          "layer_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Layer Ids",
            "description": "List of layer IDs"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerType"
              }
            ],
            "description": "Type of the merged-layer layers"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "layer_ids",
          "project_id",
          "type"
        ],
        "title": "OutMergedLayer"
      },
      "OutMonitoringData": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created"
          },
          "snapshot_int_id": {
            "type": "integer",
            "title": "Snapshot Int Id",
            "description": "Snapshot int id"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Snapshot processed",
            "default": false
          },
          "points": {
            "type": "integer",
            "title": "Points",
            "description": "Number of points in the snapshot",
            "default": 0
          },
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "description": "Project id"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "snapshot_int_id", "project_id"],
        "title": "OutMonitoringData"
      },
      "OutMts": {
        "properties": {
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the MTS-System"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the MTS-System"
          }
        },
        "type": "object",
        "title": "OutMts"
      },
      "OutMultipartSnapshotUpload": {
        "properties": {
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "ID of the upload"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          }
        },
        "type": "object",
        "required": ["upload_id", "s3_key"],
        "title": "OutMultipartSnapshotUpload"
      },
      "OutMultipartUpload": {
        "properties": {
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "ID of the upload"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          }
        },
        "type": "object",
        "required": ["upload_id", "s3_key"],
        "title": "OutMultipartUpload"
      },
      "OutNoAccessProject": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Geo-Location of the project in degrees. Format: [latitude, longitude, altitude]"
          },
          "location_name": {
            "type": "string",
            "title": "Location Name",
            "description": "Name of the location of the project"
          },
          "last_scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Scanned At",
            "description": "Last scan date of the project"
          },
          "project_linked_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Linked Id",
            "description": "ID of the project linked to this one"
          },
          "project_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Folder Id",
            "description": "ID of the project folder"
          }
        },
        "type": "object",
        "required": ["id", "name", "location"],
        "title": "OutNoAccessProject"
      },
      "OutNotification": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this notification"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the notification"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the notification"
          },
          "notification_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationType"
              }
            ],
            "description": "Type of notification"
          },
          "notification_scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationScope"
              }
            ],
            "description": "Scope of notification"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProcessSnapshot"
              },
              {
                "$ref": "#/components/schemas/ProcessPileGeofence"
              },
              {
                "$ref": "#/components/schemas/ProcessOrthophoto"
              },
              {
                "$ref": "#/components/schemas/ProcessReferenceTerrain"
              },
              {
                "$ref": "#/components/schemas/ProcessImageLayer"
              },
              {
                "$ref": "#/components/schemas/ProcessLayerData"
              },
              {
                "$ref": "#/components/schemas/ProcessDataset"
              },
              {
                "$ref": "#/components/schemas/ProcessPotree"
              },
              {
                "$ref": "#/components/schemas/ProcessSnapshotManipulation"
              },
              {
                "$ref": "#/components/schemas/SystemComesOnline"
              },
              {
                "$ref": "#/components/schemas/SystemGoesOffline"
              },
              {
                "$ref": "#/components/schemas/SystemStartsScanning"
              },
              {
                "$ref": "#/components/schemas/SystemStopsScanning"
              }
            ],
            "title": "Meta",
            "description": "Additional metadata of the notification"
          },
          "text_meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextSnapshotCreated"
              },
              {
                "$ref": "#/components/schemas/TextPileGeofence"
              },
              {
                "$ref": "#/components/schemas/TextOrthophoto"
              },
              {
                "$ref": "#/components/schemas/TextReferenceTerrain"
              },
              {
                "$ref": "#/components/schemas/TextImageLayer"
              },
              {
                "$ref": "#/components/schemas/TextLayerData"
              },
              {
                "$ref": "#/components/schemas/TextDataset"
              },
              {
                "$ref": "#/components/schemas/TextPotree"
              },
              {
                "$ref": "#/components/schemas/TextSnapshotManipulation"
              },
              {
                "$ref": "#/components/schemas/TextSystemComesOnline"
              },
              {
                "$ref": "#/components/schemas/TextSystemGoesOffline"
              },
              {
                "$ref": "#/components/schemas/TextSystemStartsScanning"
              },
              {
                "$ref": "#/components/schemas/TextSystemStopsScanning"
              }
            ],
            "title": "Text Meta",
            "description": "Additional metadata of the notification"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "ID of the user that created the notification"
          },
          "cleared": {
            "type": "boolean",
            "title": "Cleared",
            "description": "Whether the notification has been cleared by the user",
            "default": false
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the notification"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text of the notification"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "notification_type",
          "notification_scope"
        ],
        "title": "OutNotification"
      },
      "OutNotificationSettings": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "cloud_notificiations_enabled": {
            "type": "boolean",
            "title": "Cloud Notificiations Enabled",
            "description": "Are cloud notifications enabled",
            "default": true
          },
          "email_notifications_enabled": {
            "type": "boolean",
            "title": "Email Notifications Enabled",
            "description": "Are email notifications enabled",
            "default": false
          },
          "enabled_cloud_notifications": {
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "array",
            "description": "List of enabled notifications"
          },
          "enabled_email_notifications": {
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "array",
            "description": "List of enabled notifications for email"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User ID the settings belong to"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "user_id"],
        "title": "OutNotificationSettings"
      },
      "OutOffsets": {
        "properties": {
          "boom_offset": {
            "type": "number",
            "title": "Boom Offset",
            "description": "boom offset of the machine"
          },
          "boom2_offset": {
            "type": "number",
            "title": "Boom2 Offset",
            "description": "boom 2 offset of the machine"
          },
          "stick_offset": {
            "type": "number",
            "title": "Stick Offset",
            "description": "stick offset of the machine"
          },
          "psi": {
            "type": "number",
            "title": "Psi",
            "description": "beate"
          },
          "beta": {
            "type": "number",
            "title": "Beta",
            "description": "beate"
          },
          "epsilon": {
            "type": "number",
            "title": "Epsilon",
            "description": "beate"
          },
          "zeta": {
            "type": "number",
            "title": "Zeta",
            "description": "beate"
          },
          "chi": {
            "type": "number",
            "title": "Chi",
            "description": "beate"
          },
          "omega": {
            "type": "number",
            "title": "Omega",
            "description": "beate"
          }
        },
        "type": "object",
        "title": "OutOffsets"
      },
      "OutOrder": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "type": "array",
            "title": "Items",
            "description": "Items included in the order"
          },
          "ordered_by_org_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Ordered By Org Id",
            "description": "Organization ID that made the order. Potentially made for a different organization by a reseller."
          },
          "ordered_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Ordered By User Id",
            "description": "User ID that made the order. Potentially made for a different organization by a reseller."
          },
          "credited_org_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Credited Org Id",
            "description": "Organization ID which will receive the order and products in the order"
          },
          "customer_org_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Customer Org Id",
            "description": "Organization that got invoiced and needs to be billed"
          },
          "invoice_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Invoice Id",
            "description": "Invoice ID if the order has been invoiced"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceCurrency"
              }
            ],
            "description": "Currency of the order"
          },
          "payment_source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentSource"
              }
            ],
            "description": "Source of the payment for the order",
            "default": "invoice"
          },
          "fulfilled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Fulfilled At",
            "description": "Date and time when the order was fulfilled"
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "title": "Paid At",
            "description": "Date and time when the order was paid"
          },
          "subscription_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Subscription Id",
            "description": "Subscription ID if the order belongs to a subscription"
          },
          "stripe_invoice_id": {
            "type": "string",
            "title": "Stripe Invoice Id",
            "description": "Stripe invoice ID"
          },
          "stripe_total_amount": {
            "type": "number",
            "title": "Stripe Total Amount",
            "description": "Total amount of the invoice in Stripe with taxes"
          },
          "stripe_currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__constants__SupportedCurrency"
              }
            ],
            "description": "Currency of the invoice in Stripe"
          },
          "billing_duration": {
            "type": "integer",
            "title": "Billing Duration",
            "description": "Billing duration in years or months",
            "default": 1
          },
          "billing_period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StripeBillingPeriod"
              }
            ],
            "description": "Billing period",
            "default": "yearly"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "ordered_by_organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Ordered By Organization"
          },
          "credited_organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Credited Organization"
          },
          "customer_organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Customer Organization"
          },
          "created_by_user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "Created By User"
          },
          "invoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutInvoice"
              }
            ],
            "title": "Invoice"
          }
        },
        "type": "object",
        "required": [
          "items",
          "ordered_by_org_id",
          "ordered_by_user_id",
          "credited_org_id",
          "customer_org_id",
          "currency",
          "id"
        ],
        "title": "OutOrder"
      },
      "OutOrganization": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this organization"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the organization"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the organization"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the organization"
          },
          "street": {
            "type": "string",
            "title": "Street",
            "description": "Street and house number"
          },
          "city": {
            "type": "string",
            "title": "City",
            "description": "City of the organization headquarters"
          },
          "postal_code": {
            "type": "string",
            "title": "Postal Code",
            "description": "Postal code of the city"
          },
          "country_name": {
            "type": "string",
            "title": "Country Name",
            "description": "Country Name of the organization headquarters"
          },
          "country_code": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "title": "Country Code",
            "description": "Country Code of the organization headquarters"
          },
          "phone": {
            "type": "string",
            "title": "Phone",
            "description": "Phone number of the organization"
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "title": "Invoice Email",
            "description": "Email address for invoices"
          },
          "tax_id_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxIdType"
              }
            ],
            "description": "Type of the tax ID"
          },
          "tax_id_value": {
            "type": "string",
            "title": "Tax Id Value",
            "description": "Value of the tax ID. e.g VAT in austria"
          },
          "logo_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Logo Id",
            "description": "ID of the file that contains the logo of the organization"
          },
          "tilesets_self_served": {
            "type": "boolean",
            "title": "Tilesets Self Served",
            "description": "If true, the mapbox tilesets are self served",
            "default": false
          },
          "tilesets_direct_serve": {
            "type": "boolean",
            "title": "Tilesets Direct Serve",
            "description": "If true, the sodex tilesets are directly served via the sdxengine",
            "default": false
          },
          "reseller": {
            "type": "boolean",
            "title": "Reseller",
            "description": "If true, the organization is a reseller",
            "default": false
          },
          "is_cloud_only": {
            "type": "boolean",
            "title": "Is Cloud Only",
            "description": "Wether the organization is a cloud only organization or not",
            "default": true
          },
          "trial_end_at": {
            "type": "string",
            "format": "date-time",
            "title": "Trial End At",
            "description": "Set if the organization is in trial mode. Unset as soon as organization bought datavolume."
          },
          "trial_start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Trial Start At",
            "description": "Set if the organization is in trial mode. Unset as soon as organization bought datavolume."
          },
          "industry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Industry"
              }
            ],
            "description": "Industry of the organization",
            "default": "construction"
          },
          "invoice_email_confirmed": {
            "type": "boolean",
            "title": "Invoice Email Confirmed",
            "description": "If true, the invoice email is confirmed",
            "default": false
          },
          "reseller_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reseller Id",
            "description": "ID of the reseller organization"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Language"
              }
            ],
            "description": "Language of the organization",
            "default": "en-US"
          },
          "can_whitelabel": {
            "type": "boolean",
            "title": "Can Whitelabel",
            "description": "If true, the organization can whitelabel",
            "default": false
          },
          "use_whitelabel": {
            "type": "boolean",
            "title": "Use Whitelabel",
            "description": "If true, the organization uses whitelabel",
            "default": false
          },
          "telekom_api_key": {
            "type": "string",
            "title": "Telekom Api Key",
            "description": "API key for the telekom API"
          },
          "reseller_service_emails": {
            "items": {
              "type": "string",
              "format": "email"
            },
            "type": "array",
            "title": "Reseller Service Emails",
            "description": "Reseller service emails of the organization. Get notified if processing fails."
          },
          "sdx_photogrammetry_enabled": {
            "type": "boolean",
            "title": "Sdx Photogrammetry Enabled",
            "description": "If true, the organization can use sdx photogrammetry",
            "default": false
          },
          "stripe_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__management__organizations__schemas__StripeInfo"
              }
            ],
            "title": "Stripe Info",
            "description": "Stripe information of the organization"
          },
          "paid_by_reseller": {
            "type": "boolean",
            "title": "Paid By Reseller",
            "description": "If true, the organization is paid by reseller",
            "default": false
          },
          "can_create_customers": {
            "type": "boolean",
            "title": "Can Create Customers",
            "description": "If true, the organization can create customers",
            "default": false
          },
          "viscan_functionality_enabled": {
            "type": "boolean",
            "title": "Viscan Functionality Enabled",
            "description": "If true, the organization can use viscan product specific functionality",
            "default": false
          },
          "running_meter_billed": {
            "type": "boolean",
            "title": "Running Meter Billed",
            "description": "If true, the organization is billed by running meter instead of pixels",
            "default": false
          },
          "meta_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__management__organizations__schemas__OrganizationMetaSettings"
              }
            ],
            "title": "Meta Settings",
            "description": "Organization meta settings"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "ID of the user that created the organization"
          },
          "organization_access": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Organization Access",
            "description": "List of organization IDs the user has access to -> relevant for distributors"
          },
          "reseller_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__management__organizations__schemas__ResellerInfo"
              }
            ],
            "title": "Reseller Info",
            "description": "Reseller information of the organization"
          },
          "products_discount": {
            "type": "number",
            "title": "Products Discount",
            "description": "Discount for products in percent relative to 1. E.g. 20% = 0.2",
            "default": 0
          },
          "default_photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Default photogrammetry provider for the organization"
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "OutOrganization"
      },
      "OutOrganizationV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Organization name"
          },
          "logo_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Logo Id",
            "description": "Logo ID"
          },
          "vat_rate": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "Vat Rate",
            "description": "VAT rate in percent relative to 1. E.g. 20% = 0.2",
            "default": 0
          },
          "xentral_customer_number": {
            "type": "string",
            "title": "Xentral Customer Number",
            "description": "Customer number in Xentral"
          },
          "street": {
            "type": "string",
            "title": "Street",
            "description": "Street and house number"
          },
          "city": {
            "type": "string",
            "title": "City",
            "description": "City of the organization headquarters"
          },
          "postal_code": {
            "type": "string",
            "title": "Postal Code",
            "description": "Postal code of the city"
          },
          "country_name": {
            "type": "string",
            "title": "Country Name",
            "description": "Country Name of the organization headquarters"
          },
          "country_code": {
            "type": "string",
            "title": "Country Code",
            "description": "Country Code of the organization headquarters"
          },
          "state_code": {
            "type": "string",
            "title": "State Code",
            "description": "State Code of the organization headquarters"
          },
          "phone": {
            "type": "string",
            "title": "Phone",
            "description": "Phone number of the organization"
          },
          "invoice_email": {
            "type": "string",
            "title": "Invoice Email",
            "description": "Email address for invoices"
          },
          "days_to_pay": {
            "type": "integer",
            "title": "Days To Pay",
            "description": "Days to pay",
            "default": 14
          },
          "tax_id_value": {
            "type": "string",
            "title": "Tax Id Value",
            "description": "Tax ID value"
          },
          "tax_id_type": {
            "type": "string",
            "title": "Tax Id Type",
            "description": "Tax ID type"
          },
          "reseller_service_emails": {
            "items": {
              "type": "string",
              "format": "email"
            },
            "type": "array",
            "title": "Reseller Service Emails",
            "description": "Reseller service emails of the organization. Get notified if processing fails.",
            "default": []
          },
          "stripe_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__model__StripeInfo"
              }
            ],
            "title": "Stripe Info",
            "description": "Stripe info"
          },
          "viscan_functionality_enabled": {
            "type": "boolean",
            "title": "Viscan Functionality Enabled",
            "description": "If true, the organization can use viscan product specific functionality",
            "default": false
          },
          "running_meter_billed": {
            "type": "boolean",
            "title": "Running Meter Billed",
            "description": "If true, the organization is billed by running meter instead of pixels",
            "default": false
          },
          "telekom_api_key": {
            "type": "string",
            "title": "Telekom Api Key",
            "description": "Telekom API key"
          },
          "meta_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__model__OrganizationMetaSettings"
              }
            ],
            "title": "Meta Settings",
            "description": "Organization meta settings"
          },
          "trial_end_at": {
            "type": "string",
            "format": "date-time",
            "title": "Trial End At",
            "description": "End date of the trial"
          },
          "trial_start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Trial Start At",
            "description": "Start date of the trial"
          },
          "reseller_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reseller Id",
            "description": "Reseller ID of the organization"
          },
          "reseller": {
            "type": "boolean",
            "title": "Reseller",
            "description": "If true, the organization is a reseller",
            "default": false
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StripeLanguage"
              }
            ],
            "description": "Language of the organization",
            "default": "en-US"
          },
          "products_discount": {
            "type": "number",
            "title": "Products Discount",
            "description": "Discount for products of the organization",
            "default": 0
          },
          "reseller_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__model__ResellerInfo"
              }
            ],
            "title": "Reseller Info",
            "description": "Reseller info"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID of the user that created the organization"
          },
          "default_photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Default photogrammetry provider for the organization",
            "default": "pix4dcloud"
          },
          "sdx_photogrammetry_enabled": {
            "type": "boolean",
            "title": "Sdx Photogrammetry Enabled",
            "description": "If true, the organization can use sdx photogrammetry",
            "default": false
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "trial_history": {
            "items": {
              "$ref": "#/components/schemas/OrganizationTrialHistory"
            },
            "type": "array",
            "title": "Trial History",
            "description": "Trial history of the organization of all trials the organization had"
          }
        },
        "type": "object",
        "required": ["name", "id"],
        "title": "OutOrganizationV2"
      },
      "OutPaymentMethod": {
        "properties": {
          "last4": {
            "type": "integer",
            "title": "Last4",
            "description": "Last 4 digits of the card number"
          },
          "brand": {
            "type": "string",
            "title": "Brand",
            "description": "Brand of the card"
          },
          "exp_month": {
            "type": "integer",
            "title": "Exp Month",
            "description": "Expiration month of the card"
          },
          "exp_year": {
            "type": "integer",
            "title": "Exp Year",
            "description": "Expiration year of the card"
          },
          "country": {
            "type": "string",
            "title": "Country",
            "description": "Country of the card - Alpha 2 code"
          },
          "billing_country": {
            "type": "string",
            "title": "Billing Country",
            "description": "Billing country of the card - Alpha 2 code"
          },
          "cardholer": {
            "type": "string",
            "title": "Cardholer",
            "description": "Name of the cardholder"
          }
        },
        "type": "object",
        "required": [
          "last4",
          "brand",
          "exp_month",
          "exp_year",
          "country",
          "billing_country"
        ],
        "title": "OutPaymentMethod"
      },
      "OutPendingJob": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Job name"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "job_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PendingJobType"
              }
            ],
            "description": "Job type"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PendingJobStatus"
              }
            ],
            "description": "Job status",
            "default": "pending"
          },
          "reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PendingReason"
              }
            ],
            "description": "Reason for the job status",
            "default": "unknown"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PendingDjiDockImageProcessing"
              },
              {
                "$ref": "#/components/schemas/PendingViscanScinImageProcessing"
              }
            ],
            "title": "Meta",
            "description": "Job meta data"
          },
          "executed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Executed At",
            "description": "The time the job was executed"
          },
          "executed_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Executed By User Id",
            "description": "User ID"
          },
          "cleared": {
            "type": "boolean",
            "title": "Cleared",
            "description": "Whether the job was cleared",
            "default": false
          },
          "cleared_at": {
            "type": "string",
            "format": "date-time",
            "title": "Cleared At",
            "description": "The time the job was cleared"
          },
          "cleared_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cleared By User Id",
            "description": "User ID"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "created_by_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By System Id",
            "description": "System ID"
          },
          "created_by_dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By Dji Dock Id",
            "description": "DJI Dock ID"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "created_by_dji_dock": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutDjiDock"
              }
            ],
            "title": "Created By Dji Dock"
          }
        },
        "type": "object",
        "required": ["project_id", "organization_id", "job_type", "id"],
        "title": "OutPendingJob"
      },
      "OutPhase": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this phase"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the phase"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the phase"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the phase"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the phase",
            "default": ""
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the phase"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Due date of the phase"
          },
          "order": {
            "type": "integer",
            "title": "Order",
            "description": "Index of the phase - important for order"
          },
          "opened_at": {
            "type": "string",
            "format": "date-time",
            "title": "Opened At",
            "description": "Date when the phase was opened"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Closed At",
            "description": "Date when the phase was closed"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "MongoDB unique ID of the project the phase belongs to"
          },
          "state_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "State Id",
            "description": "MongoDB unique ID of the state the phase belongs to"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "order",
          "project_id",
          "state_id"
        ],
        "title": "OutPhase"
      },
      "OutPile": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this pile"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the pile"
          },
          "tag_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tag Id",
            "description": "ID of the soil (deprecated name tag) associated to the pile"
          },
          "storage_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Storage Id",
            "description": "ID of the storage the pile belongs to"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "ID of the project the pile belongs to"
          },
          "user_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "User Id",
            "description": "ID of the user the pile belongs to"
          },
          "volumes": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__piles__schemas__OutVolume"
            },
            "type": "array",
            "title": "Volumes",
            "description": "List of volumes associated to the pile in ascending order",
            "default": []
          },
          "manipulated_volumes": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__piles__schemas__OutVolume"
            },
            "type": "array",
            "title": "Manipulated Volumes",
            "description": "List of manipulated volumes associated to the pile",
            "default": []
          },
          "volume_display": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeDisplay"
              }
            ],
            "description": "Display type of the volumes",
            "default": "both"
          }
        },
        "type": "object",
        "required": ["id", "name", "storage_id", "project_id", "user_id"],
        "title": "OutPile"
      },
      "OutPileGeofence": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Datetime the geofence was created at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Datetime the geofence was updated at"
          },
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Coordinates of the geofence corner points in radiant [lat, lon] - must be at least 3 points."
          },
          "reference_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceMode"
              }
            ],
            "description": "Reference mode of the geofence - how the volume should be calculated."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the geofence"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height of the geofence -  only used if reference mode is 'height'"
          },
          "volume_display": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeDisplay"
              }
            ],
            "description": "Default volume display of the geofence",
            "default": "both"
          },
          "tobe_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tobe Terrain Id",
            "description": "ID of the terrain the geofence should calculate tobe volume from - only used if reference mode is 'tobe'"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "ID of the file the geofence should calculate volume from - only used if reference mode is 'file'"
          },
          "start_calc_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start Calc At",
            "description": "Datetime the geofence should start to calculate volume from"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot id the geofence was made on"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id the geofence belongs to"
          },
          "pile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pile Id",
            "description": "Pile id the geofence belongs to"
          },
          "storage_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Storage Id",
            "description": "Storage id the pile of the geofence belongs to"
          },
          "volumes": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__pilegeofences__schemas__ResponseVolume"
            },
            "type": "array",
            "title": "Volumes",
            "description": "List of volumes of the geofence",
            "default": []
          },
          "manipulated_volumes": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__pilegeofences__schemas__ResponseVolume"
            },
            "type": "array",
            "title": "Manipulated Volumes",
            "description": "List of manipulated volumes of the geofence",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "coords",
          "reference_mode",
          "start_calc_at",
          "snapshot_id",
          "project_id",
          "pile_id",
          "storage_id"
        ],
        "title": "OutPileGeofence"
      },
      "OutPin": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__pins__constants__PinType"
              }
            ],
            "description": "Type of the pin",
            "default": "ref_img"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the pin"
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/PinFile"
            },
            "type": "array",
            "title": "Files",
            "description": "List of files associated with the pin"
          },
          "bearings": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Bearings",
            "description": "Bearings of the pin -> for system pins only"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID the pin belongs to -> for ref_img and mate pins only"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User ID the pin belongs to -> for cloud pins only"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the pin"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the pin"
          },
          "cam_pos": {
            "type": "string",
            "title": "Cam Pos",
            "description": "Position of camera that tookt he image for the pin -> for ref_img pins only"
          },
          "s3_key_thumbnail": {
            "type": "string",
            "title": "S3 Key Thumbnail",
            "description": "S3 key of the thumbnail of the pin"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot id linked to the pin"
          },
          "telekom_classification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomFileClassification"
              }
            ],
            "description": "Telekom classification of the pin"
          },
          "telekom_media_id": {
            "type": "string",
            "title": "Telekom Media Id",
            "description": "Telekom media id of the pin"
          },
          "bytes": {
            "type": "number",
            "title": "Bytes",
            "description": "Data volume of the pin in bytes"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "User",
            "description": "User of the pin"
          },
          "system": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__systems__model__OutSystemV2"
              }
            ],
            "title": "System",
            "description": "System of the pin"
          }
        },
        "type": "object",
        "required": ["project_id", "location", "id"],
        "title": "OutPin"
      },
      "OutPinTagInfo": {
        "properties": {
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "Soil id the image belongs to"
          },
          "soil_name": {
            "type": "string",
            "title": "Soil Name",
            "description": "Soil name the image belongs to"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "Phase id the image belongs to"
          },
          "phase_name": {
            "type": "string",
            "title": "Phase Name",
            "description": "Phase name the image belongs to"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id the image belongs to"
          },
          "system_name": {
            "type": "string",
            "title": "System Name",
            "description": "System name the image belongs to"
          },
          "tag_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tag Id",
            "description": "Tag ID the pin belongs to"
          },
          "tag_name": {
            "type": "string",
            "title": "Tag Name",
            "description": "Tag name the pin belongs to"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User ID the pin belongs to -> for cloud pins only"
          },
          "user_name": {
            "type": "string",
            "title": "User Name",
            "description": "User name the pin belongs to -> for cloud pins only"
          }
        },
        "type": "object",
        "title": "OutPinTagInfo"
      },
      "OutPoint": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Point name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Point description"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Point latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Point longitude"
          },
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Point easting"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Point northing"
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "Point altitude"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "Point scanned timestamp"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id",
            "description": "Point tobe diff"
          },
          "reference_terrain_diff": {
            "type": "number",
            "title": "Reference Terrain Diff",
            "description": "Point tobe diff"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Point created timestamp"
          },
          "files": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Files",
            "description": "StoredPoint files",
            "default": []
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "StoredPoints point id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "latitude",
          "longitude",
          "easting",
          "northing",
          "altitude",
          "scanned_at",
          "id"
        ],
        "title": "OutPoint"
      },
      "OutPointCloud": {
        "properties": {
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "MongoDB unique ID of this snapshot or file"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__potrees__constants__PotreePointCloudType"
              }
            ],
            "description": "Type of the point cloud"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the point cloud"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutPointCloudConfig"
              }
            ],
            "title": "Config",
            "description": "Config of the point cloud"
          },
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "urls": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutURLS"
              }
            ],
            "title": "Urls",
            "description": "URLs of the point cloud files"
          }
        },
        "type": "object",
        "required": ["object_id", "type", "name", "config", "id"],
        "title": "OutPointCloud"
      },
      "OutPointCloudConfig": {
        "properties": {
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "MongoDB unique ID of the soild"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "MongoDB unique ID of the phase"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id",
            "description": "MongoDB unique ID of the geofence"
          },
          "resolution": {
            "type": "number",
            "maximum": 50,
            "minimum": 1,
            "title": "Resolution",
            "description": "Resolution of the point cloud in cm"
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "description": "Min point of the point cloud",
            "default": false
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "description": "Max point of the point cloud",
            "default": false
          },
          "colorized_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColorizedOption"
              }
            ],
            "description": "Colorized option of the point cloud"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the point cloud"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the point cloud"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "Manipulated of the point cloud",
            "default": false
          },
          "export_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerExportOptions"
              }
            ],
            "description": "Export option of the point cloud"
          }
        },
        "type": "object",
        "title": "OutPointCloudConfig"
      },
      "OutPointLink": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this point_link"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the point_link"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the point_link"
          },
          "point_1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutCablePoint"
              }
            ],
            "title": "Point 1",
            "description": "First point"
          },
          "point_2": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutCablePoint"
              }
            ],
            "title": "Point 2",
            "description": "Second point"
          },
          "shared": {
            "type": "boolean",
            "title": "Shared",
            "description": "If the points location is shared - the exact same one",
            "default": false
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the point link"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "point_1", "point_2", "project_id"],
        "title": "OutPointLink"
      },
      "OutPotree": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the potree"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the potree"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the potree"
          },
          "measurements": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__potree__schemas__OutMeasurements"
            },
            "type": "array",
            "title": "Measurements",
            "description": "Measurements of the potree",
            "default": []
          },
          "manipulation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Manipulation"
              }
            ],
            "title": "Manipulation",
            "description": "Manipulations of the potree"
          },
          "block_edit": {
            "type": "boolean",
            "title": "Block Edit",
            "description": "Block editing of the potree",
            "default": false
          },
          "block_display": {
            "type": "boolean",
            "title": "Block Display",
            "description": "Block display of the potree",
            "default": false
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "MongoDB unique ID of the organization"
          },
          "point_clouds": {
            "items": {
              "$ref": "#/components/schemas/OutPointCloud"
            },
            "type": "array",
            "title": "Point Clouds",
            "description": "Point clouds of the potree",
            "default": []
          },
          "manipulations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutManipulation"
              }
            ],
            "title": "Manipulations",
            "description": "Manipulations of the potree"
          },
          "offset": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Offset",
            "description": "Offset of the potree",
            "default": [0, 0, 0]
          },
          "byte_size": {
            "type": "integer",
            "title": "Byte Size",
            "description": "Byte size of the potree"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id"],
        "title": "OutPotree"
      },
      "OutPotreePreview": {
        "properties": {
          "hierarchy": {
            "type": "string",
            "title": "Hierarchy",
            "description": "S3 key of the potree hierarchy file"
          },
          "octree": {
            "type": "string",
            "title": "Octree",
            "description": "S3 key of the potree octree file"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "description": "S3 key of the potree metadata file"
          },
          "offset": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Offset",
            "description": "Offset of the potree",
            "default": [0, 0, 0]
          }
        },
        "type": "object",
        "required": ["hierarchy", "octree", "metadata"],
        "title": "OutPotreePreview"
      },
      "OutPotreeV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the potree"
          },
          "point_clouds": {
            "items": {
              "$ref": "#/components/schemas/PotreePointCloud"
            },
            "type": "array",
            "title": "Point Clouds",
            "description": "Point clouds of the potree"
          },
          "measurements": {
            "items": {
              "$ref": "#/components/schemas/PotreeMeasurements"
            },
            "type": "array",
            "title": "Measurements",
            "description": "Measurements of the potree"
          },
          "manipulations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PotreeManipulation"
              }
            ],
            "title": "Manipulations",
            "description": "Manipulations of the potree",
            "default": {}
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes of the potree"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "name",
          "point_clouds",
          "measurements",
          "id"
        ],
        "title": "OutPotreeV2"
      },
      "OutProcessingFiles": {
        "properties": {
          "orthophoto_tiff_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
              }
            ],
            "title": "Orthophoto Tiff File",
            "description": "Orthophoto tiff file"
          },
          "source_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
              }
            ],
            "title": "Source File",
            "description": "Source file for snapshot. Las/Laz, dxf..."
          },
          "report_pdf_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
              }
            ],
            "title": "Report Pdf File",
            "description": "Report pdf file"
          },
          "mesh_bundle_zip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
              }
            ],
            "title": "Mesh Bundle Zip",
            "description": "Mesh bundle zip file"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
            },
            "type": "array",
            "title": "Images",
            "description": "Image files if photogrammetry snapshot"
          },
          "photogrammetry_files": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
            },
            "type": "array",
            "title": "Photogrammetry Files",
            "description": "Photogrammetry files if photogrammetry snapshot"
          }
        },
        "type": "object",
        "title": "OutProcessingFiles"
      },
      "OutProcessingJob": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "Job ID"
          },
          "job_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobType"
              }
            ],
            "description": "Job type"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MetaProcessSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessOrthophoto"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPileGeofence"
              },
              {
                "$ref": "#/components/schemas/MetaDeletePileGeofence"
              },
              {
                "$ref": "#/components/schemas/MetaProcessReferenceTerrain"
              },
              {
                "$ref": "#/components/schemas/MetaProcessImageLayer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLayerData"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDataset"
              },
              {
                "$ref": "#/components/schemas/MetaProcessTimelapse"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotDownload"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurePoint"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerPoint"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPointHistory"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurePile"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerPile"
              },
              {
                "$ref": "#/components/schemas/MetaProcessControlPointsMatrix"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreePointcloudUrls"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreeExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreeCrossSectionExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCrossSectionPoints"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCrossSectionPointsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLineExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessProjectXmlExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDxfFileCoordinates"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCableExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCableExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotManipulation"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotManipulationDeleted"
              },
              {
                "$ref": "#/components/schemas/MetaProcessProject3DTimelapse"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCableImport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResV2LayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessStoredPointsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessStoredLinesExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaDeleteSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessZipDownload"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotComparison"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPgSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSdxCloudSnapshotMoved"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessImageFiles"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiWebhookImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessProjectMigration"
              },
              {
                "$ref": "#/components/schemas/MetaProcessZipImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreeMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessExportPileBase"
              },
              {
                "$ref": "#/components/schemas/MetaProcessTelekomTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessAutostartUpdateCheck"
              },
              {
                "$ref": "#/components/schemas/MetaConvertCoordsGlobalLocal"
              },
              {
                "$ref": "#/components/schemas/MetaConvertCoordsLocalGlobal"
              },
              {
                "$ref": "#/components/schemas/MetaProcessAutostartSystemAddCheck"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLayer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurementsToTelekom"
              },
              {
                "$ref": "#/components/schemas/MetaProcessAutomaticMeasurements"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanScinWebhookImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanScinSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiWebhook"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiFlightDetection"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiUnprocessedImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessInvoice"
              },
              {
                "$ref": "#/components/schemas/MetaProcess2DPlan"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanScinWebhook"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanToSodexTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSodexToViscanTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureArea"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurePoints"
              },
              {
                "$ref": "#/components/schemas/MetaProcessVidocImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotZip"
              },
              {
                "$ref": "#/components/schemas/MetaDeleteProject"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotFilesToTelekom"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerArea"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerPoints"
              },
              {
                "$ref": "#/components/schemas/MetaProcessGeofenceDetectionBox"
              },
              {
                "$ref": "#/components/schemas/MetaProcessVidocImagesV2"
              },
              {
                "$ref": "#/components/schemas/MetaProcessTelekomPinsToTelekom"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLineDetectionBox"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSodexToPhotogrammetry"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotogrammetryToSodex"
              },
              {
                "$ref": "#/components/schemas/MetaProcessOrganizationCSVExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLokFileValidation"
              }
            ],
            "title": "Meta",
            "description": "Job meta data"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingJobStatus"
              }
            ],
            "description": "Processing status",
            "default": "processing"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DataProcessSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessOrthophoto"
              },
              {
                "$ref": "#/components/schemas/DataProcessPileGeofence"
              },
              {
                "$ref": "#/components/schemas/DataProcessReferenceTerrain"
              },
              {
                "$ref": "#/components/schemas/DataProcessImageLayer"
              },
              {
                "$ref": "#/components/schemas/DataProcessLayerData"
              },
              {
                "$ref": "#/components/schemas/DataProcessDataset"
              },
              {
                "$ref": "#/components/schemas/DataProcessTimelapse"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotDownload"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurePoint"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerPoint"
              },
              {
                "$ref": "#/components/schemas/DataProcessPointHistory"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurePile"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerPile"
              },
              {
                "$ref": "#/components/schemas/DataProcessControlPointsMatrix"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreePointcloudUrls"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreeExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreeCrossSectionExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessCrossSectionPoints"
              },
              {
                "$ref": "#/components/schemas/DataProcessCrossSectionPointsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessLineExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessProjectXmlExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessDxfFileCoordinates"
              },
              {
                "$ref": "#/components/schemas/DataProcessCableExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessCableExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotManipulation"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotManipulationDeleted"
              },
              {
                "$ref": "#/components/schemas/DataProcessProject3DTimelapse"
              },
              {
                "$ref": "#/components/schemas/DataProcessCableImport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResV2LayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessStoredPointsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessStoredLinesExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataDeleteSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessZipDownload"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotComparison"
              },
              {
                "$ref": "#/components/schemas/DataProcessPgSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessSdxCloudSnapshotMoved"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessImageFile"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiWebhookImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessProjectMigration"
              },
              {
                "$ref": "#/components/schemas/DataProcessZipImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreeMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessExportPileBase"
              },
              {
                "$ref": "#/components/schemas/DataProcessTelekomTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessAutostartUpdateCheck"
              },
              {
                "$ref": "#/components/schemas/DataConvertCoordsGlobalLocal"
              },
              {
                "$ref": "#/components/schemas/DataConvertCoordsLocalGlobal"
              },
              {
                "$ref": "#/components/schemas/DataProcessAutostartSystemAddCheck"
              },
              {
                "$ref": "#/components/schemas/DataProcessLayer"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurementsToTelekom"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanScinWebhookImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanScinSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiFlightDetection"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiWebhook"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiUnprocessedImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessAutomaticMeasurements"
              },
              {
                "$ref": "#/components/schemas/DataProcessInvoice"
              },
              {
                "$ref": "#/components/schemas/DataProcess2DPlan"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanScinWebhook"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanToSodexTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessSodexToViscanTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureArea"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurePoints"
              },
              {
                "$ref": "#/components/schemas/DataProcessVidocImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotZip"
              },
              {
                "$ref": "#/components/schemas/DataDeleteProject"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotFilesToTelekom"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerArea"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerPoints"
              },
              {
                "$ref": "#/components/schemas/DataProcessGeofenceDetectionBox"
              },
              {
                "$ref": "#/components/schemas/DataProcessVidocImagesV2"
              },
              {
                "$ref": "#/components/schemas/DataProcessTelekomPinsToTelekom"
              },
              {
                "$ref": "#/components/schemas/DataProcessLineDetectionBox"
              },
              {
                "$ref": "#/components/schemas/DataProcessSodexToPhotogrammetry"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotogrammetryToSodex"
              },
              {
                "$ref": "#/components/schemas/DataProcessOrganizationCSVExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessLokFileValidation"
              },
              {
                "$ref": "#/components/schemas/DataDeletePileGeofence"
              }
            ],
            "title": "Data",
            "description": "Job result data"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User ID"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "error_code": {
            "type": "integer",
            "title": "Error Code",
            "description": "Error code if the job failed",
            "default": 0
          },
          "sdxengine_port": {
            "type": "integer",
            "title": "Sdxengine Port",
            "description": "Port of the sdxengine instance to send the job to",
            "default": 443
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "description": "URL to send the webhook response to"
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingJobError"
              }
            ],
            "title": "Error",
            "description": "Error if the job failed"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "title": "Finished At",
            "description": "Date when the job finished"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date"
          }
        },
        "type": "object",
        "required": ["id", "job_type", "created_at"],
        "title": "OutProcessingJob"
      },
      "OutProduct": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CloudLicenseName"
              },
              {
                "$ref": "#/components/schemas/DataVolumeName"
              },
              {
                "$ref": "#/components/schemas/RunningMeterName"
              },
              {
                "$ref": "#/components/schemas/SdxCloudPackageName"
              },
              {
                "$ref": "#/components/schemas/GigaPixelName"
              },
              {
                "$ref": "#/components/schemas/PhotogrammetryCreditName"
              },
              {
                "type": "string"
              }
            ],
            "title": "Name",
            "description": "Type of the product"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the product"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              }
            ],
            "description": "Type of the product"
          },
          "purchase_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductPurchaseType"
              }
            ],
            "description": "Purchase type of the product"
          },
          "product_value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "title": "Product Value",
            "description": "Value of the product"
          },
          "article_number": {
            "type": "string",
            "title": "Article Number",
            "description": "Article number"
          },
          "prices": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Prices"
              }
            ],
            "title": "Prices",
            "description": "Prices of the product"
          },
          "archived": {
            "type": "boolean",
            "title": "Archived",
            "description": "Whether the product is archived",
            "default": false
          },
          "stripe_id": {
            "type": "string",
            "title": "Stripe Id",
            "description": "Stripe ID of the product"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "purchase_type",
          "product_value",
          "article_number",
          "prices",
          "id"
        ],
        "title": "OutProduct"
      },
      "OutProfile": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Profile name"
          },
          "machine_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineType"
              }
            ],
            "description": "Machine type"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Profile description"
          },
          "cameras": {
            "items": {
              "$ref": "#/components/schemas/OutCamera"
            },
            "type": "array",
            "title": "Cameras",
            "description": "List of cameras",
            "default": []
          },
          "bearing_offset": {
            "type": "number",
            "title": "Bearing Offset",
            "description": "Bearing offset"
          },
          "min_y": {
            "type": "number",
            "title": "Min Y",
            "description": "Minimum y coordinate of the extraction"
          },
          "max_y": {
            "type": "number",
            "title": "Max Y",
            "description": "Maximum y coordinate of the extraction"
          },
          "min_x": {
            "type": "number",
            "title": "Min X",
            "description": "Minimum x coordinate of the extraction"
          },
          "max_x": {
            "type": "number",
            "title": "Max X",
            "description": "Maximum x coordinate of the extraction"
          },
          "machine_color": {
            "type": "string",
            "title": "Machine Color",
            "description": "Machine color"
          },
          "inner_extraction_area": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtractionArea"
              }
            ],
            "title": "Inner Extraction Area",
            "description": "Inner extraction area"
          },
          "limit_thresholds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitThresholds"
              }
            ],
            "title": "Limit Thresholds",
            "description": "Limit thresholds for the profile"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id the profile belongs to"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization id the profile belongs"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "machine_type",
          "bearing_offset",
          "min_y",
          "max_y",
          "min_x",
          "max_x",
          "limit_thresholds",
          "system_id",
          "organization_id"
        ],
        "title": "OutProfile"
      },
      "OutProject": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Geo-Location of the project in degrees. Format: [latitude, longitude, altitude]"
          },
          "location_name": {
            "type": "string",
            "title": "Location Name",
            "description": "Name of the location of the project"
          },
          "snapshot_imgs": {
            "type": "integer",
            "title": "Snapshot Imgs",
            "description": "Number of images per snapshot",
            "default": 3
          },
          "snapshot_period": {
            "type": "integer",
            "title": "Snapshot Period",
            "description": "Period of the snapshots in seconds",
            "default": 600
          },
          "ref_img_frequency": {
            "type": "integer",
            "title": "Ref Img Frequency",
            "description": "Frequency of the reference images in seconds"
          },
          "ref_img_distance": {
            "type": "number",
            "title": "Ref Img Distance",
            "description": "Distance of the systems reference images in between them"
          },
          "admin_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "minItems": 1,
            "title": "Admin Ids",
            "description": "IDs of the admins of the project"
          },
          "coordinate_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Coordinate System Id",
            "description": "Coordinate system ID"
          },
          "export_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__projects__schemas__ExportSettings"
              }
            ],
            "title": "Export Settings",
            "description": "Export settings of the project"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the project"
          },
          "deadline_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deadline At",
            "description": "Deadline date of the project"
          },
          "grid_size": {
            "type": "number",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the project in cm",
            "default": 5
          },
          "group": {
            "type": "string",
            "title": "Group",
            "description": "Group of the project"
          },
          "project_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Folder Id",
            "description": "ID of the project folder"
          },
          "use_new_tile_system": {
            "type": "boolean",
            "title": "Use New Tile System",
            "description": "Wether the project uses the new tile system or not",
            "default": true
          },
          "use_tile_api": {
            "type": "boolean",
            "title": "Use Tile Api",
            "description": "Wether the project uses the tile API or not",
            "default": false
          },
          "coordinate_system_pipeline": {
            "type": "string",
            "title": "Coordinate System Pipeline",
            "description": "Pipeline of the coordinate system of the project. Required for sdx-cloud projects."
          },
          "project_currency": {
            "type": "string",
            "title": "Project Currency",
            "description": "Currency of the project",
            "default": "eur"
          },
          "snapshots_processing_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ViscanProcessingModeType"
              }
            ],
            "description": "Processing type of the snapshots. Required for sdx-cloud projects."
          },
          "telekom_sma": {
            "type": "string",
            "title": "Telekom Sma",
            "description": "Telekom SMA of the project. To use this the telekom_api_key must be set in the organization and telekom_transfer enabled."
          },
          "telekom_transfer": {
            "type": "boolean",
            "title": "Telekom Transfer",
            "description": "Wether the project is automatic telekom transfer enabled or not"
          },
          "telekom_project": {
            "type": "boolean",
            "title": "Telekom Project",
            "description": "Wether the project is a telekom project or not. If yes, telekom layers can be created and automatic measurements are created in the telekom layer.",
            "default": false
          },
          "create_scin_snapshots": {
            "type": "boolean",
            "title": "Create Scin Snapshots",
            "description": "Wether the project creates scin snapshots automatically or not. If disabled a pending job will be created instead.",
            "default": true
          },
          "automatic_telekom_pin_transfer": {
            "type": "boolean",
            "title": "Automatic Telekom Pin Transfer",
            "description": "Wether to automatically transfers the telekom pins to the telekom portal"
          },
          "photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry provider for the project"
          },
          "default_snapshot_sdx_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultSnapshotSdxProcessingSettings"
              }
            ],
            "title": "Default Snapshot Sdx Processing Settings",
            "description": "Default processing settings for the project"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "logo": {
            "type": "string",
            "title": "Logo",
            "description": "Logo of the project"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At",
            "description": "Start date of the project"
          },
          "stopped_at": {
            "type": "string",
            "format": "date-time",
            "title": "Stopped At",
            "description": "Stop date of the project"
          },
          "last_scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Scanned At",
            "description": "Last scan date of the project"
          },
          "member_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Member Ids",
            "description": "IDs of the members of the project",
            "default": []
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "IDs of the systems of the project",
            "default": []
          },
          "is_cloud_only": {
            "type": "boolean",
            "title": "Is Cloud Only",
            "description": "Wether the project is cloud only or not",
            "default": false
          },
          "potree_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Potree Origin",
            "description": "Origin of the potree",
            "default": [0, 0, 0]
          },
          "block_access": {
            "type": "boolean",
            "title": "Block Access",
            "description": "Wether the project is blocked for access or not",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "name", "location", "admin_ids", "organization_id"],
        "title": "OutProject"
      },
      "OutProjectFolder": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Folder name"
          },
          "parent_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Id",
            "description": "Parent folder ID - if root is true, this field is ignored"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "MongoDB unique ID of the project"
          },
          "root": {
            "type": "boolean",
            "title": "Root",
            "description": "Folder is on root level",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "organization_id"],
        "title": "OutProjectFolder"
      },
      "OutProjectTag": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the project_tag"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the project_tag"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project_tag"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project_tag"
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "Color",
            "description": "Color of the project_tag"
          },
          "user_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "User Ids",
            "description": "List of user IDs that have access to the project_tag",
            "default": []
          },
          "snapshot_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Snapshot Ids",
            "description": "List of snapshot IDs associated with the project_tag",
            "default": []
          },
          "orthophoto_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Orthophoto Ids",
            "description": "List of orthophoto IDs associated with the project_tag",
            "default": []
          },
          "snapshot_comparison_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Snapshot Comparison Ids",
            "description": "List of snapshot_comparison IDs associated with the project_tag",
            "default": []
          },
          "dji_dock_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Dji Dock Ids",
            "description": "List of DJI dock IDs associated with the project_tag",
            "default": []
          },
          "measurement_layer_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Measurement Layer Ids",
            "description": "List of measurement layer IDs associated with the project_tag",
            "default": []
          },
          "plan2d_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Plan2D Ids",
            "description": "List of Plan2D IDs associated with the project_tag",
            "default": []
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "color", "project_id"],
        "title": "OutProjectTag"
      },
      "OutProjectUserNotificationTypeSettings": {
        "properties": {
          "settings": {
            "items": {
              "$ref": "#/components/schemas/ProjectUserNotificationTypeSetting"
            },
            "type": "array",
            "title": "Settings"
          }
        },
        "type": "object",
        "required": ["settings"],
        "title": "OutProjectUserNotificationTypeSettings"
      },
      "OutProjectV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project"
          },
          "admin_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "minItems": 1,
            "title": "Admin Ids",
            "description": "IDs of the admins of the project. Admin id also must be in the member ids"
          },
          "member_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Member Ids",
            "description": "IDs of the members of the project"
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "IDs of the systems of the project"
          },
          "grid_size": {
            "type": "number",
            "minimum": 0.5,
            "title": "Grid Size",
            "description": "Grid size of the project in cm",
            "default": 5
          },
          "coordinate_system_pipeline": {
            "type": "string",
            "title": "Coordinate System Pipeline",
            "description": "Pipeline of the coordinate system of the project"
          },
          "export_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__projects__model__ExportSettings"
              }
            ],
            "title": "Export Settings",
            "description": "Export settings of the project"
          },
          "project_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Folder Id",
            "description": "ID of the project folder"
          },
          "potree_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Potree Origin",
            "description": "Origin of the potree",
            "default": [0, 0, 0]
          },
          "is_cloud_only": {
            "type": "boolean",
            "title": "Is Cloud Only",
            "description": "Wether the project is a cloud only project or not",
            "default": false
          },
          "project_currency": {
            "type": "string",
            "title": "Project Currency",
            "description": "Currency of the project",
            "default": "eur"
          },
          "telekom_sma": {
            "type": "string",
            "title": "Telekom Sma",
            "description": "Telekom SMA of the project"
          },
          "telekom_project": {
            "type": "boolean",
            "title": "Telekom Project",
            "description": "Wether the project is a telekom project or not. If yes, telekom layers can be created and automatic measurements are created in the telekom layer."
          },
          "telekom_transfer": {
            "type": "boolean",
            "title": "Telekom Transfer",
            "description": "Wether the snapshots in that project get transferred to telekom automatically or not"
          },
          "create_scin_snapshots": {
            "type": "boolean",
            "title": "Create Scin Snapshots",
            "description": "Wether the project creates scin snapshots automatically or not. If disabled a pending job will be created instead.",
            "default": true
          },
          "block_access": {
            "type": "boolean",
            "title": "Block Access",
            "description": "Wether the project is blocked for access or not",
            "default": false
          },
          "create_automatic_measurements": {
            "type": "boolean",
            "title": "Create Automatic Measurements",
            "description": "Wether the project creates automatic measurements or not",
            "default": true
          },
          "automatic_telekom_pin_transfer": {
            "type": "boolean",
            "title": "Automatic Telekom Pin Transfer",
            "description": "Wether to automatically transfers the telekom pins to the telekom portal"
          },
          "ref_img_frequency": {
            "type": "integer",
            "title": "Ref Img Frequency",
            "description": "Frequency of the reference images of the project"
          },
          "ref_img_distance": {
            "type": "number",
            "title": "Ref Img Distance",
            "description": "Distance of the systems reference images in between them"
          },
          "photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry provider for the project"
          },
          "default_snapshot_sdx_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultSnapshotSdxProcessingSettings"
              }
            ],
            "title": "Default Snapshot Sdx Processing Settings",
            "description": "Default processing settings for the project"
          },
          "is_copied": {
            "type": "boolean",
            "title": "Is Copied",
            "description": "Wether the project is copied from another project or not",
            "default": false
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "last_scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Scanned At",
            "description": "Last scanned at timestamp"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Organization",
            "description": "Organization of the project. Only included if project requested directly."
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "name",
          "description",
          "admin_ids",
          "member_ids",
          "id"
        ],
        "title": "OutProjectV2"
      },
      "OutPutUrls": {
        "properties": {
          "s3_part_urls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Part Urls",
            "description": "URLs to upload parts to"
          },
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "ID of the upload"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          }
        },
        "type": "object",
        "required": ["s3_part_urls", "upload_id", "s3_key"],
        "title": "OutPutUrls"
      },
      "OutQuicktask": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the quicktask"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the quicktask"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the quicktask"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the quicktask"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Due date of the quicktask"
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Note of the quicktask"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__core__constants__State"
              }
            ],
            "description": "State of the quicktask",
            "default": "open"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id the quicktask is assigned to"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id the quicktask was created by"
          },
          "s3_files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Files",
            "description": "List of file s3 keys",
            "default": []
          }
        },
        "type": "object",
        "required": ["id", "name", "system_id"],
        "title": "OutQuicktask"
      },
      "OutRelease": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this release"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the release"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the release"
          },
          "app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReleaseApp"
              }
            ],
            "description": "Release app"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReleaseTypes"
              }
            ],
            "description": "Release type"
          },
          "build_date": {
            "type": "string",
            "format": "date-time",
            "title": "Build Date",
            "description": "Build date of the release"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "title": "Version",
            "description": "Version of the release"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "app", "type", "version"],
        "title": "OutRelease"
      },
      "OutReleaseConfig": {
        "properties": {
          "hmi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "HMI release",
            "default": "stable"
          },
          "manager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "Manager release",
            "default": "stable"
          },
          "framework": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "Framework release",
            "default": "stable"
          },
          "jetson_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "SDX Jetson API release",
            "default": "stable"
          },
          "framework_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "SDX Framework API release",
            "default": "stable"
          }
        },
        "type": "object",
        "title": "OutReleaseConfig"
      },
      "OutScanBlockArea": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Scan block area created timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Scan block area updated timestamp"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Scan block area name"
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Scan block area geofence"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Scan block area activated (not the same as deleted in other models)",
            "default": true
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "geofence", "project_id"],
        "title": "OutScanBlockArea"
      },
      "OutScanTask": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Scan task created timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Scan task updated timestamp"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Scan task name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Scan task description"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Scan task due date"
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Scan task geofence"
          },
          "assigned_to_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Assigned To System Id",
            "description": "System id of the system that the scan task is assigned to"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__scantasks__constants__State"
              }
            ],
            "description": "Scan task state",
            "default": "open"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Closed At",
            "description": "Scan task closed timestamp"
          },
          "force_finish": {
            "type": "boolean",
            "title": "Force Finish",
            "description": "Force finish scan task",
            "default": false
          },
          "s3_imgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Imgs",
            "description": "S3 image urls"
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Scan task note"
          },
          "completed_by_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Completed By System Id",
            "description": "System id of the system that completed the scan task"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "geofence", "project_id"],
        "title": "OutScanTask"
      },
      "OutSegment": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the segment"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the segment"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the segment"
          },
          "cable_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Id",
            "description": "MongoDB unique ID of the cable"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "data_source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__cables__cablesegments__constants__DataSource"
              }
            ],
            "description": "Data source of the segment"
          },
          "data_source_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Data Source Id",
            "description": "Data source ID of the segment"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "start_at", "cable_id", "project_id"],
        "title": "OutSegment"
      },
      "OutSensors": {
        "properties": {
          "mount_config": {
            "type": "string",
            "title": "Mount Config",
            "description": "mount configuration of the lidar"
          },
          "lidar1_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lidar1 Loc",
            "description": "location of the lidar 1 in cm"
          },
          "cam1_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam1 Loc",
            "description": "location of the camera 1 in cm"
          },
          "cam2_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam2 Loc",
            "description": "location of the camera 2 in cm"
          },
          "gps_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Gps Loc",
            "description": "location of the gps in cm"
          },
          "lidar1_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lidar1 Orient",
            "description": "orientation of the lidar 1 in cm"
          },
          "cam1_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam1 Orient",
            "description": "orientation of the camera 1 in cm"
          },
          "cam2_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam2 Orient",
            "description": "orientation of the camera 2 in cm"
          }
        },
        "type": "object",
        "title": "OutSensors"
      },
      "OutSeptentrio": {
        "properties": {
          "lever_arm": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lever Arm",
            "description": "lever arm of the septentrio"
          },
          "heading_offset": {
            "type": "number",
            "title": "Heading Offset",
            "description": "heading offset of the septentrio"
          },
          "pitch_offset": {
            "type": "number",
            "title": "Pitch Offset",
            "description": "pitch offset of the septentrio"
          },
          "s3_log": {
            "type": "string",
            "title": "S3 Log",
            "description": "s3 key of the septentrio log"
          },
          "imu_orientation": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Imu Orientation",
            "description": "orientation of the imu"
          },
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the septentrio"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the septentrio"
          }
        },
        "type": "object",
        "title": "OutSeptentrio"
      },
      "OutSharing": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the shared resource"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "sharing_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SharingType"
              }
            ],
            "description": "Sharing type"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BaseSharingMeta"
              },
              {
                "$ref": "#/components/schemas/SharingMetaDashboard"
              }
            ],
            "title": "Meta",
            "description": "Sharing meta"
          },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "URL which is shared"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Encrypted Password for the shared URL"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          }
        },
        "type": "object",
        "required": [
          "name",
          "project_id",
          "organization_id",
          "sharing_type",
          "meta",
          "url",
          "id"
        ],
        "title": "OutSharing"
      },
      "OutSnapshot": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "snapshot_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutSnapshotInfo"
              }
            ],
            "title": "Snapshot Info",
            "description": "Snapshot info"
          },
          "snapshot_source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__ImportSnapshotSource"
              },
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__AutomaticSnapshotSource"
              }
            ],
            "title": "Snapshot Source",
            "description": "Type of the snapshot.",
            "default": "sodex"
          },
          "snapshot_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot File Id",
            "description": "The snapshot as file. Only for imported snapshots. Currently only .las supported."
          },
          "pg_img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Pg Img File Ids",
            "description": "List of file ids the snapshot belongs to. Needed for photogrammetry snapshots that get processed to las file."
          },
          "pg_imgs_zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Imgs Zip File Id",
            "description": "Zip file id of the photogrammetry images"
          },
          "snapshot_potree": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__schemas__SnapshotPotree"
              }
            ],
            "title": "Snapshot Potree",
            "description": "Potree data of the snapshot"
          },
          "grid_size": {
            "type": "number",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the project in cm"
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option. Only relevant for sdx-cloud snapshots.",
            "default": "lowest_point"
          },
          "imgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Imgs",
            "description": "List of s3 keys of images -> saved on asssets bucket"
          },
          "upload_at": {
            "type": "string",
            "format": "date-time",
            "title": "Upload At",
            "description": "Date the snapshot was uploaded"
          },
          "processed_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseProcessedInfo"
              }
            ],
            "title": "Processed Info",
            "description": "Processed info"
          },
          "potree_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Project Id",
            "description": "Potree project id"
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes used by this snapshot"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "OutSnapshot"
      },
      "OutSnapshotComparison": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "ref_snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Ref Snapshot Id",
            "description": "Reference snapshot ID"
          },
          "compare_snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Compare Snapshot Id",
            "description": "Compare snapshot ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot_comparison"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot_comparison"
          },
          "include_geofences": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Include Geofences",
            "description": "List of geofences to include in the comparison",
            "default": []
          },
          "exclude_geofences": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Exclude Geofences",
            "description": "List of geofences to exclude in the comparison",
            "default": []
          },
          "gradient": {
            "items": {
              "$ref": "#/components/schemas/SnapshotComparisonGradientStage"
            },
            "type": "array",
            "title": "Gradient",
            "description": "List of gradient parts to apply to the comparison",
            "default": []
          },
          "volume_cut": {
            "type": "number",
            "title": "Volume Cut",
            "description": "Volume cut value to apply to the comparison"
          },
          "volume_fill": {
            "type": "number",
            "title": "Volume Fill",
            "description": "Volume fill value to apply to the comparison"
          },
          "created_by_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By Id",
            "description": "User ID of the creator of the snapshot_comparison"
          },
          "updated_by_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Updated By Id",
            "description": "User ID of the last updater of the snapshot_comparison"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "ref_snapshot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__OutSnapshotV2"
              }
            ],
            "title": "Ref Snapshot"
          },
          "compare_snapshot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__OutSnapshotV2"
              }
            ],
            "title": "Compare Snapshot"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "ref_snapshot_id",
          "compare_snapshot_id",
          "name",
          "created_by_id",
          "id"
        ],
        "title": "OutSnapshotComparison"
      },
      "OutSnapshotData": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this snapshot"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created"
          },
          "img_count": {
            "type": "integer",
            "title": "Img Count",
            "description": "Number of images in the snapshot"
          },
          "imgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Imgs",
            "description": "List of s3 keys of images -> saved on asssets bucket"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the system to the time of snapshot"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id the snapshot belongs to"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id that created the snapshot. Only for imported (sdx-cloud) snapshots"
          },
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "DJI dock id the snapshot belongs to"
          },
          "favorite": {
            "type": "boolean",
            "title": "Favorite",
            "description": "Is the snapshot favorized",
            "default": false
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the system to the time of snapshot"
          },
          "system_profile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Profile Id",
            "description": "System profile id the snapshot had set when taking the snapshot"
          },
          "systems_info": {
            "items": {
              "$ref": "#/components/schemas/OutSystemsInfo"
            },
            "type": "array",
            "title": "Systems Info",
            "description": "List of systems info if project has multiple systems and systems scanned before the snapshot was taken",
            "default": []
          },
          "snapshot_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot File Id",
            "description": "The snapshot as file. Only for imported snapshots. Currently only .las supported."
          },
          "pg_img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Pg Img File Ids",
            "description": "List of file ids the snapshot belongs to. Needed for photogrammetry snapshots that get processed to las file."
          },
          "snapshot_source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__ImportSnapshotSource"
              },
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__AutomaticSnapshotSource"
              }
            ],
            "title": "Snapshot Source",
            "description": "Type of the snapshot.",
            "default": "sodex"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__SnapshotFileType"
              }
            ],
            "description": "Filetype of the snapshot",
            "default": ".sodex"
          },
          "snapshot_potree": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__schemas__SnapshotPotree"
              }
            ],
            "title": "Snapshot Potree",
            "description": "Potree data of the snapshot"
          },
          "grid_size": {
            "type": "number",
            "title": "Grid Size",
            "description": "Grid size of the project in cm"
          },
          "data_volume_3d": {
            "type": "number",
            "title": "Data Volume 3D",
            "description": "Volume of the snapshot in m3",
            "default": 0
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option. Only relevant for sdx-cloud snapshots.",
            "default": "lowest_point"
          },
          "mb_size": {
            "type": "number",
            "title": "Mb Size",
            "description": "Size of the snapshot linked file in MB"
          },
          "potree_project_id": {
            "type": "string",
            "title": "Potree Project Id",
            "description": "Potree project id"
          },
          "telekom_scan_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomScanMeta"
              }
            ],
            "title": "Telekom Scan Meta",
            "description": "Telekom scan meta data"
          },
          "optimal_zoom_level": {
            "type": "integer",
            "title": "Optimal Zoom Level",
            "description": "Optimal zoom level of the snapshot",
            "default": 18
          },
          "orthophoto_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Orthophoto Id",
            "description": "Orthophoto id of the snapshot"
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes used by this snapshot"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "OutSnapshotData"
      },
      "OutSnapshotInfo": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Snapshot id"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Snapshot version",
            "default": 5
          },
          "changed_chunks": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Changed Chunks",
            "description": "List of changed chunk snapshot int ids"
          },
          "total_n_changed_elements": {
            "type": "integer",
            "title": "Total N Changed Elements",
            "description": "Total number of changed elements"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the snapshot"
          },
          "n_imgs": {
            "type": "integer",
            "title": "N Imgs",
            "description": "Number of images in the snapshot"
          },
          "img_bearings": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Img Bearings",
            "description": "List of image bearings"
          },
          "img_cam_positions": {
            "items": {
              "$ref": "#/components/schemas/CamPosition"
            },
            "type": "array",
            "description": "List of image camera positions in same order as img_bearings for imgs"
          },
          "bucket_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Bucket Id",
            "description": "Bucket id the snapshot belongs to"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "Phase id the snapshot belongs to"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "Soil id the snapshot belongs to"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the snapshot"
          },
          "system_profile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Profile Id",
            "description": "System profile id the snapshot had set when taking the snapshot"
          },
          "cs_global_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cs Global Origin",
            "description": "Global origin of the snapshot"
          },
          "cs_ref_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cs Ref Origin",
            "description": "Reference origin of the snapshot"
          },
          "cs_created_ts": {
            "type": "number",
            "title": "Cs Created Ts",
            "description": "Timestamp of the snapshot creation"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__processdata__snapshots__constants__SnapshotFileType"
              }
            ],
            "description": "Filetype of the snapshot",
            "default": ".sodex"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id that created the snapshot"
          },
          "optimal_zoom_level": {
            "type": "integer",
            "title": "Optimal Zoom Level",
            "description": "Optimal zoom level of the snapshot",
            "default": 18
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id the snapshot belongs to"
          },
          "s3_changed": {
            "type": "string",
            "title": "S3 Changed",
            "description": "S3 key of the changed elements"
          },
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "DJI dock id the snapshot belongs to"
          }
        },
        "type": "object",
        "title": "OutSnapshotInfo"
      },
      "OutSnapshotManipulation": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this snapshot_manipulation"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the snapshot_manipulation"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the snapshot_manipulation"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Manipulation name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Manipulation description"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ManipulationType"
              }
            ],
            "description": "Manipulation type"
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Geofence that marks the area of the manipulation. Coordinates in rad."
          },
          "polylines": {
            "items": {
              "$ref": "#/components/schemas/Polyline"
            },
            "type": "array",
            "title": "Polylines",
            "description": "List of polylines that define the area to delete"
          },
          "continuous": {
            "type": "boolean",
            "title": "Continuous",
            "description": "If the manipulation is continuous or just for this snapshot"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the manipulation only if continuous. If continuous is true and end_at is None,             the manipulation will be continuous until the end of the project"
          },
          "time_threshold": {
            "type": "number",
            "exclusiveMinimum": false,
            "title": "Time Threshold",
            "description": "Time threshold for delete interpolate time manipulations.            Points older than this threshold will be deleted. In hours."
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the manipulation only if continuous. Is the date of this snapshot."
          },
          "disabled_snapshot_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Disabled Snapshot Ids",
            "description": "List of snapshot IDs that are disabled for this manipulation"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "If the manipulation is processed",
            "default": false
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "If the manipulation has been deleted but deletion not processed",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "type",
          "continuous",
          "snapshot_id",
          "project_id"
        ],
        "title": "OutSnapshotManipulation"
      },
      "OutSnapshotNote": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the note"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the note"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the note"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Content of the note"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot id of the snapshot the note belongs to"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username of the user who created the note"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id of the user who created the note"
          }
        },
        "type": "object",
        "required": ["id", "name", "snapshot_id", "username", "user_id"],
        "title": "OutSnapshotNote"
      },
      "OutSoil": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date",
            "example": "2020-10-29T12:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date",
            "example": "2020-10-29T12:00:00Z"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the soil",
            "example": "Soil 1"
          },
          "cost": {
            "type": "number",
            "title": "Cost",
            "description": "Cost of the soil",
            "default": 0,
            "example": 100
          },
          "remove": {
            "type": "boolean",
            "title": "Remove",
            "description": "Soil is being removed",
            "default": true,
            "example": true
          },
          "loosening_factor": {
            "type": "number",
            "title": "Loosening Factor",
            "description": "Loosening factor",
            "example": 0.5
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density",
            "example": 1.5
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id",
            "example": "5f9f9f9f9f9f9f9f9f9f9f9f"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id",
            "example": "5f9f9f9f9f9f9f9f9f9f9f9f"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization id",
            "example": "5f9f9f9f9f9f9f9f9f9f9f9f"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id", "organization_id"],
        "title": "OutSoil"
      },
      "OutState": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this state"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__states__constants__State"
              }
            ],
            "description": "Name of the state"
          },
          "default": {
            "type": "boolean",
            "title": "Default",
            "description": "Default state of the project",
            "default": true
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "OutState",
        "description": "Same model as ResponseState but all core_schemas.PyObjectId to string"
      },
      "OutStateWithPhases": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this state"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation update date of this object"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Latest update date of this object"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__states__constants__State"
              }
            ],
            "description": "Name of the state"
          },
          "default": {
            "type": "boolean",
            "title": "Default",
            "description": "Default state of the project",
            "default": true
          },
          "phases": {
            "items": {
              "$ref": "#/components/schemas/OutPhase"
            },
            "type": "array",
            "title": "Phases",
            "description": "List of phases",
            "default": []
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "OutStateWithPhases",
        "description": "Same model as OutState but all core_schemas.PyObjectId to string"
      },
      "OutStorage": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the storage"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the storage in degree - [lat, lon]"
          },
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this item"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "ID of the project the storage belongs to"
          },
          "user_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "User Id",
            "description": "ID of the user the storage belongs to"
          }
        },
        "type": "object",
        "required": ["name", "id", "project_id", "user_id"],
        "title": "OutStorage"
      },
      "OutStorageVolumes": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the storage"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the storage in degree - [lat, lon]"
          },
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this item"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "ID of the project the storage belongs to"
          },
          "user_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "User Id",
            "description": "ID of the user the storage belongs to"
          },
          "volumes": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__piles__schemas__OutVolume"
            },
            "type": "array",
            "title": "Volumes",
            "description": "List of volumes associated to the storage",
            "default": []
          },
          "manipulated_volumes": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__piles__schemas__OutVolume"
            },
            "type": "array",
            "title": "Manipulated Volumes",
            "description": "List of manipulated volumes associated to the storage",
            "default": []
          }
        },
        "type": "object",
        "required": ["name", "id", "project_id", "user_id"],
        "title": "OutStorageVolumes"
      },
      "OutStoredLine": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the stored_lines"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the stored_lines"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredLine name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredLine description"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/OutPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "StoredLine points",
            "default": []
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "MongoDB unique ID of the project"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "project_id"],
        "title": "OutStoredLine"
      },
      "OutStoredPoint": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredPoints point name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredPoints point description"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "StoredPoints point latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "StoredPoints point longitude"
          },
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "StoredPoints point easting"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "StoredPoints point northing"
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "StoredPoints point altitude"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "StoredPoints point scanned timestamp"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id",
            "description": "StoredPoints point tobe diff"
          },
          "reference_terrain_diff": {
            "type": "number",
            "title": "Reference Terrain Diff",
            "description": "StoredPoints point tobe diff"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "StoredPoints point created timestamp"
          },
          "files": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Files",
            "description": "StoredPoints point files",
            "default": []
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "StoredPoints point id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "latitude",
          "longitude",
          "easting",
          "northing",
          "altitude",
          "scanned_at",
          "id"
        ],
        "title": "OutStoredPoint"
      },
      "OutStoredPoints": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "StoredPoints created timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "StoredPoints updated timestamp"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredPoints name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredPoints description"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/OutStoredPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "StoredPoints points",
            "default": []
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "project_id"],
        "title": "OutStoredPoints"
      },
      "OutSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the subscription"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the subscription"
          },
          "billed_organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Billed Organization Id",
            "description": "Organization ID the subscription is billed to"
          },
          "credited_organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Credited Organization Id",
            "description": "Organization ID the subscription products are credited to"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID that created the subscription"
          },
          "stripe_customer_id": {
            "type": "string",
            "title": "Stripe Customer Id",
            "description": "Stripe Customer ID of the billed organization"
          },
          "stripe_subscription_id": {
            "type": "string",
            "title": "Stripe Subscription Id",
            "description": "Stripe Subscription ID"
          },
          "current_period_end": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period End",
            "description": "Current Period End"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start",
            "description": "Current Period Start"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/SubscriptionItem"
            },
            "type": "array",
            "title": "Items",
            "description": "Items in the subscription"
          },
          "canceled_items": {
            "items": {
              "$ref": "#/components/schemas/CanceledSubscriptionItems"
            },
            "type": "array",
            "title": "Canceled Items",
            "description": "Canceled items in the subscription",
            "default": []
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "title": "Paid At",
            "description": "Paid at date. Date when the subscription was paid."
          },
          "canceled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Canceled At",
            "description": "Canceled at date. Date when the subscription was canceled."
          },
          "invoice_due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Invoice Due At",
            "description": "Invoice due at date. Date when the invoice of the subscription is due."
          },
          "order_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Order Id",
            "description": "Order ID of the order that created the subscription"
          },
          "stripe_total_amount": {
            "type": "number",
            "title": "Stripe Total Amount",
            "description": "Total amount of the invoice in Stripe with taxes"
          },
          "stripe_currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__constants__SupportedCurrency"
              }
            ],
            "description": "Currency of the invoice in Stripe"
          },
          "latest_invoice_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Latest Invoice Id",
            "description": "Latest invoice ID. ID of the latest invoice of the subscription"
          },
          "billing_duration": {
            "type": "integer",
            "title": "Billing Duration",
            "description": "Billing duration in years or months",
            "default": 1
          },
          "billing_period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StripeBillingPeriod"
              }
            ],
            "description": "Billing period",
            "default": "yearly"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "billed_organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Billed Organization"
          },
          "credited_organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Credited Organization"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrder"
              }
            ],
            "title": "Order",
            "description": "Order of the order that created the subscription"
          },
          "created_by_user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "Created By User"
          },
          "latest_invoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutInvoice"
              }
            ],
            "title": "Latest Invoice",
            "description": "Latest invoice of the subscription"
          }
        },
        "type": "object",
        "required": [
          "billed_organization_id",
          "credited_organization_id",
          "created_by_user_id",
          "stripe_customer_id",
          "items",
          "id",
          "billed_organization",
          "created_by_user"
        ],
        "title": "OutSubscription"
      },
      "OutSupportInfo": {
        "properties": {
          "support_email": {
            "type": "string",
            "title": "Support Email",
            "description": "Support email of the reseller",
            "default": "support@sodex-innovations.com"
          },
          "support_phone": {
            "type": "string",
            "title": "Support Phone",
            "description": "Support phone of the reseller"
          },
          "support_infotext": {
            "type": "string",
            "title": "Support Infotext",
            "description": "Support infotext of the reseller"
          }
        },
        "type": "object",
        "title": "OutSupportInfo"
      },
      "OutSyncedData": {
        "properties": {
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "length of a synced data pkg in ms"
          },
          "points_per_lidar_data": {
            "type": "integer",
            "title": "Points Per Lidar Data",
            "description": "number of points per lidar data pkg"
          }
        },
        "type": "object",
        "title": "OutSyncedData"
      },
      "OutSystem": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this system"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the system"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the system"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the system"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the system"
          },
          "retrofit_at": {
            "type": "string",
            "format": "date-time",
            "title": "Retrofit At",
            "description": "Retrofit date of the system"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID  of the customer the system belongs to"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Sodex Serial number of the system"
          },
          "sensor_api": {
            "type": "string",
            "title": "Sensor Api",
            "description": "Assistance system of the system"
          },
          "invoice_date": {
            "type": "string",
            "format": "date-time",
            "title": "Invoice Date",
            "description": "Invoice date of the system"
          },
          "invoice_number": {
            "type": "string",
            "title": "Invoice Number",
            "description": "Invoice number of the system"
          },
          "release_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutReleaseConfig"
              }
            ],
            "title": "Release Config",
            "description": "Release config of the system"
          },
          "assembled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Assembled At",
            "description": "Production date of the system - when it got assembled"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemType"
              }
            ],
            "description": "Type of the system",
            "default": "sdx-compact"
          },
          "allow_internet_overconsumption": {
            "type": "boolean",
            "title": "Allow Internet Overconsumption",
            "description": "If the system is allowed to consume more internet than the license allows. Allowed consumption defined in extension packs.",
            "default": false
          },
          "quiky_id": {
            "type": "string",
            "title": "Quiky Id",
            "description": "Quiky ID of the system",
            "default": ""
          },
          "mounted": {
            "type": "boolean",
            "title": "Mounted",
            "description": "If the system is mounted or not",
            "default": false
          },
          "license": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutSystemLicense"
              }
            ],
            "title": "License",
            "description": "License of the user"
          },
          "correction_service_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Correction Service Id",
            "description": "Correction service ID of the system"
          },
          "uhf_configuration_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Uhf Configuration Id",
            "description": "Default UHF configuration ID of the system"
          },
          "sodex_name": {
            "type": "string",
            "title": "Sodex Name",
            "description": "Sodex name of the system - only seen internally"
          },
          "extension_packs": {
            "items": {
              "$ref": "#/components/schemas/src__v2__management__systems__schemas__OutExtensionPack"
            },
            "type": "array",
            "title": "Extension Packs",
            "description": "Extension packs of the system"
          },
          "is_frozen": {
            "type": "boolean",
            "title": "Is Frozen",
            "description": "If the system is frozen",
            "default": false
          },
          "is_copied": {
            "type": "boolean",
            "title": "Is Copied",
            "description": "If the system is copied",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "name", "description", "release_config"],
        "title": "OutSystem"
      },
      "OutSystemEvent": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "system_oid": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Oid",
            "description": "System ID"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type",
            "description": "Event type"
          },
          "system_ts": {
            "type": "string",
            "format": "date-time",
            "title": "System Ts",
            "description": "System timestamp"
          },
          "region": {
            "type": "string",
            "title": "Region",
            "description": "Region"
          },
          "data": {
            "type": "object",
            "title": "Data",
            "description": "Event data"
          },
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemEventSeverity"
              }
            ],
            "description": "Event severity"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "system_oid",
          "event_type",
          "system_ts",
          "region",
          "severity",
          "id"
        ],
        "title": "OutSystemEvent"
      },
      "OutSystemEventGroup": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID"
          },
          "event_type": {
            "type": "string",
            "title": "Event Type",
            "description": "Event type"
          },
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemEventSeverity"
              }
            ],
            "description": "Event severity"
          },
          "first_system_ts": {
            "type": "string",
            "format": "date-time",
            "title": "First System Ts",
            "description": "First system timestamp"
          },
          "last_system_ts": {
            "type": "string",
            "format": "date-time",
            "title": "Last System Ts",
            "description": "Last system timestamp"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/SystemEventGroupEvent"
            },
            "type": "array",
            "title": "Events",
            "description": "Events"
          },
          "data": {
            "type": "object",
            "title": "Data",
            "description": "Data"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "system_id",
          "event_type",
          "severity",
          "first_system_ts",
          "last_system_ts",
          "events",
          "id"
        ],
        "title": "OutSystemEventGroup"
      },
      "OutSystemLicense": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this license"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "organization_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__management__licenses__constants__SystemLicenseTypes"
              }
            ],
            "description": "System license type"
          },
          "scope_level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeLevels"
              }
            ],
            "description": "Scope level of the license"
          },
          "payed": {
            "type": "boolean",
            "title": "Payed",
            "description": "If the license is payed or free issued",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "type", "scope_level"],
        "title": "OutSystemLicense"
      },
      "OutSystemMeta": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this system_meta"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the system_meta"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the system_meta"
          },
          "escpp_config": {
            "type": "object",
            "title": "Escpp Config",
            "description": "configuration of es cpp"
          },
          "hdcpp_config": {
            "type": "object",
            "title": "Hdcpp Config",
            "description": "configuration of hd cpp"
          },
          "iscpp_config": {
            "type": "object",
            "title": "Iscpp Config",
            "description": "configuration of is cpp"
          },
          "sdx_chain_config": {
            "type": "object",
            "title": "Sdx Chain Config",
            "description": "SDX Chain configuration"
          },
          "camcpp_config": {
            "type": "object",
            "title": "Camcpp Config",
            "description": "configuration of cam cpp"
          },
          "campy_config": {
            "type": "object",
            "title": "Campy Config",
            "description": "configuration of cam py"
          },
          "transformer_config": {
            "type": "object",
            "title": "Transformer Config",
            "description": "configuration of transformer"
          },
          "api_config": {
            "type": "object",
            "title": "Api Config",
            "description": "configuration of api"
          },
          "hub_config": {
            "type": "object",
            "title": "Hub Config",
            "description": "configuration of hub"
          },
          "ispy_config": {
            "type": "object",
            "title": "Ispy Config",
            "description": "configuration of is py"
          },
          "framework_config": {
            "type": "object",
            "title": "Framework Config",
            "description": "configuration of framework"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "system_id"],
        "title": "OutSystemMeta"
      },
      "OutSystemStatus": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this system status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Timestamp of when this status was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp of when this status was last updated -> former 'online' field in /active"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "MongoDB unique ID of the system this status belongs to"
          },
          "active_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Active Project Id",
            "description": "MongoDB unique ID of the active project"
          },
          "scanning": {
            "type": "boolean",
            "title": "Scanning",
            "description": "Is the system scanning",
            "default": false
          },
          "is_online": {
            "type": "boolean",
            "title": "Is Online",
            "description": "Is the system online",
            "default": false
          },
          "cam_online": {
            "type": "boolean",
            "title": "Cam Online",
            "description": "Is the camera online",
            "default": false
          },
          "pandar_online": {
            "type": "boolean",
            "title": "Pandar Online",
            "description": "Is the pandar online",
            "default": false
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the system"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the system"
          },
          "bearing_info": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Bearing Info",
            "description": "Bearing info of the system. Current x and y position of the excavator as well as the current bearing offset."
          },
          "profile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Profile Id",
            "description": "MongoDB unique ID of the profile this system is using"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "MongoDB unique ID of the soil this system is using"
          },
          "bucket_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Bucket Id",
            "description": "MongoDB unique ID of the bucket this system is using"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "MongoDB unique ID of the phase this system is using"
          },
          "scan_task_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Scan Task Id",
            "description": "MongoDB unique ID of the scan task this system is using"
          },
          "active_project_name": {
            "type": "string",
            "title": "Active Project Name",
            "description": "Name of the active project"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "MongoDB unique ID of the organization this system belongs to"
          },
          "organization_name": {
            "type": "string",
            "title": "Organization Name",
            "description": "Name of the organization this system belongs to"
          },
          "online_status": {
            "type": "boolean",
            "title": "Online Status",
            "description": "Is the system online",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "system_id"],
        "title": "OutSystemStatus"
      },
      "OutSystemSubscription": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID"
          },
          "amount": {
            "type": "number",
            "title": "Amount",
            "description": "Amount of the subscription"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the subscription"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the subscription"
          },
          "next_eps_reset_at": {
            "type": "string",
            "format": "date-time",
            "title": "Next Eps Reset At",
            "description": "Monthly renew date of the system extension packs"
          },
          "last_eps_reset_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Eps Reset At",
            "description": "Last date of the system extension packs reset"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "system": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__management__systems__model__OutSystemV2"
              }
            ],
            "title": "System"
          }
        },
        "type": "object",
        "required": ["organization_id", "system_id", "id"],
        "title": "OutSystemSubscription"
      },
      "OutSystemsInfo": {
        "properties": {
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System id the snapshot belongs to"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the system to the time of snapshot",
            "default": []
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the system to the time of snapshot in rad",
            "default": 0
          }
        },
        "type": "object",
        "title": "OutSystemsInfo"
      },
      "OutTable": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this table"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the table"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the table"
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "type": "array",
            "title": "Headers",
            "description": "Headers of the table"
          },
          "extra_headers": {
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "type": "array",
            "title": "Extra Headers",
            "description": "Extra headers of the table"
          },
          "table_filters": {
            "items": {
              "$ref": "#/components/schemas/TableFilter"
            },
            "type": "array",
            "title": "Table Filters",
            "description": "Filters of the table"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of table the user has created"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id of the user"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "type", "user_id"],
        "title": "OutTable"
      },
      "OutTelekomProgress": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot id"
          },
          "snapshot_name": {
            "type": "string",
            "title": "Snapshot Name",
            "description": "Snapshot name"
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Snapshot Created At",
            "description": "Snapshot created at"
          },
          "civil_engineering_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomDataCivilEngineeringMethod"
              }
            ],
            "description": "Civil engineering method"
          },
          "length_capturing_path": {
            "type": "number",
            "minimum": 0,
            "title": "Length Capturing Path",
            "description": "Length of the capturing path in meters"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "snapshot_id",
          "snapshot_name",
          "snapshot_created_at",
          "civil_engineering_method",
          "length_capturing_path"
        ],
        "title": "OutTelekomProgress"
      },
      "OutTelekomSMAValid": {
        "properties": {
          "valid": {
            "type": "boolean",
            "title": "Valid",
            "description": "Wether the SMA is valid or not"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "Reason if not valid why"
          }
        },
        "type": "object",
        "required": ["valid"],
        "title": "OutTelekomSMAValid"
      },
      "OutTimeConfig": {
        "properties": {
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start time of the filter"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End time of the filter"
          }
        },
        "type": "object",
        "required": ["start_at", "end_at"],
        "title": "OutTimeConfig"
      },
      "OutTobeTerrain": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Datetime the terrain was created at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Datetime the terrain was updated at"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the terrain"
          },
          "calc_negative": {
            "type": "boolean",
            "title": "Calc Negative",
            "description": "If the terrain should calculate negative volume",
            "default": false
          },
          "gradient": {
            "items": {
              "$ref": "#/components/schemas/ResponseGradient"
            },
            "type": "array",
            "title": "Gradient",
            "description": "Gradient of the terrain",
            "default": []
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit the terrain is in.",
            "default": "m"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File id"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization id"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReferenceTerrainType"
              }
            ],
            "description": "Type of the terrain",
            "default": "manual"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "If the terrain has been processed",
            "default": false
          },
          "volumes": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__referenceterrains__schemas__ResponseVolume"
            },
            "type": "array",
            "title": "Volumes",
            "description": "List of volumes of the terrain",
            "default": []
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes of the terrain"
          }
        },
        "type": "object",
        "required": ["id", "name", "project_id", "file_id", "organization_id"],
        "title": "OutTobeTerrain"
      },
      "OutTopcon": {
        "properties": {
          "portname": {
            "type": "string",
            "title": "Portname",
            "description": "name of the serial port the topcon data is received"
          },
          "baudrate": {
            "type": "integer",
            "title": "Baudrate",
            "description": "baudrate of the serial interface"
          }
        },
        "type": "object",
        "title": "OutTopcon"
      },
      "OutTranslation": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "last update date"
          },
          "tag_translations": {
            "type": "object",
            "title": "Tag Translations",
            "description": "tag translations",
            "default": {}
          },
          "phase_translations": {
            "type": "object",
            "title": "Phase Translations",
            "description": "phase translations",
            "default": {}
          },
          "bucket_translations": {
            "type": "object",
            "title": "Bucket Translations",
            "description": "bucket translations",
            "default": {}
          },
          "system_translations": {
            "type": "object",
            "title": "System Translations",
            "description": "system translations",
            "default": {}
          },
          "dest_translations": {
            "type": "object",
            "title": "Dest Translations",
            "description": "destination translations",
            "default": {}
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "project id the translations belong to"
          }
        },
        "type": "object",
        "required": ["id", "project_id"],
        "title": "OutTranslation"
      },
      "OutURLS": {
        "properties": {
          "octree": {
            "type": "string",
            "title": "Octree",
            "description": "URL of the bin file"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "description": "URL of the metadata file"
          },
          "hierarchy": {
            "type": "string",
            "title": "Hierarchy",
            "description": "URL of the hierarchy file"
          }
        },
        "type": "object",
        "required": ["octree", "metadata", "hierarchy"],
        "title": "OutURLS"
      },
      "OutUhfConfiguration": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID"
          },
          "frequency_band": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfFrequencyBands"
              }
            ],
            "description": "Frequency band"
          },
          "frequency": {
            "type": "number",
            "maximum": 928,
            "minimum": 403,
            "title": "Frequency",
            "description": "Frequency in MHz"
          },
          "channel_spacing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfChannelSpacing"
              }
            ],
            "description": "Channel spacing in kHz"
          },
          "communication_protocol": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfCommunicationProtocol"
              }
            ],
            "description": "Communication protocol"
          },
          "fcs": {
            "type": "string",
            "title": "Fcs",
            "description": "FCS",
            "default": "ON"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "system": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__systems__model__OutSystemV2"
              }
            ],
            "title": "System"
          }
        },
        "type": "object",
        "required": [
          "system_id",
          "frequency_band",
          "frequency",
          "channel_spacing",
          "communication_protocol",
          "id"
        ],
        "title": "OutUhfConfiguration"
      },
      "OutUrl": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "OutUrl"
      },
      "OutUrlS3Key": {
        "properties": {
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the image"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL to upload the image"
          }
        },
        "type": "object",
        "required": ["s3_key", "url"],
        "title": "OutUrlS3Key"
      },
      "OutUser": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the user"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the user"
          },
          "credentials": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserCredentials"
              }
            ],
            "title": "Credentials",
            "description": "Credentials of the user"
          },
          "organization_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Organization Id",
            "description": "MongoDB unique ID of the organization"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username of the user",
            "default": ""
          },
          "disable_project_map": {
            "type": "boolean",
            "title": "Disable Project Map",
            "description": "If the user has the project map disabled",
            "default": false
          },
          "organization_admin": {
            "type": "boolean",
            "title": "Organization Admin",
            "description": "If the user is an organization admin",
            "default": false
          },
          "system_admin": {
            "type": "boolean",
            "title": "System Admin",
            "description": "If the user is a system admin",
            "default": true
          },
          "processing_admin": {
            "type": "boolean",
            "title": "Processing Admin",
            "description": "If the user is a processing admin and can purchase processing packages.",
            "default": false
          },
          "email_confirmed": {
            "type": "boolean",
            "title": "Email Confirmed",
            "description": "If the email of the user is confirmed",
            "default": false
          },
          "password_changed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Password Changed At",
            "description": "Timestamp of the last password change"
          },
          "license": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserLicense"
              }
            ],
            "title": "License",
            "description": "License of the user"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseLanguages"
              }
            ],
            "description": "Language of the user",
            "default": "de"
          },
          "timezone_offset": {
            "type": "number",
            "title": "Timezone Offset",
            "description": "Timezone offset of the user to utc in hours (e.g. 1.5)",
            "default": 0
          },
          "can_use_scin_app": {
            "type": "boolean",
            "title": "Can Use Scin App",
            "description": "Whether the user can use the viscan SCIN app",
            "default": false
          },
          "loops_settings_updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Loops Settings Updated At",
            "description": "Timestamp of the last loops settings update"
          },
          "image_txt": {
            "type": "boolean",
            "title": "Image Txt",
            "description": "If the user has image description in the snapshot download enabled",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "credentials", "organization_id"],
        "title": "OutUser"
      },
      "OutUserCredentials": {
        "properties": {
          "firstname": {
            "type": "string",
            "title": "Firstname",
            "description": "Legal first name of the user",
            "default": ""
          },
          "lastname": {
            "type": "string",
            "title": "Lastname",
            "description": "Legal last name of the user",
            "default": ""
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email address of the user"
          },
          "phone_number": {
            "type": "string",
            "maxLength": 50,
            "title": "Phone Number",
            "description": "Phone number of the user",
            "default": ""
          }
        },
        "type": "object",
        "required": ["email"],
        "title": "OutUserCredentials"
      },
      "OutUserHelpcenterInfo": {
        "properties": {
          "helpcenter_access": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HelpcenterAccess"
              }
            ],
            "description": "Helpcenter access of the user"
          }
        },
        "type": "object",
        "required": ["helpcenter_access"],
        "title": "OutUserHelpcenterInfo"
      },
      "OutUserLicense": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this license"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "organization_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLicenseTypes"
              }
            ],
            "description": "User license type"
          },
          "scope_level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopeLevels"
              }
            ],
            "description": "Scope level of the license"
          },
          "payed": {
            "type": "boolean",
            "title": "Payed",
            "description": "If the license is payed or free issued",
            "default": false
          }
        },
        "type": "object",
        "required": ["id", "type", "scope_level"],
        "title": "OutUserLicense"
      },
      "OutUserSetting": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the usersetting"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the usersetting"
          },
          "snapshot_selection_tooltip_disabled": {
            "type": "boolean",
            "title": "Snapshot Selection Tooltip Disabled",
            "description": "Never show snapshot selection tooltip",
            "default": false
          },
          "information_disabled": {
            "type": "boolean",
            "title": "Information Disabled",
            "description": "Never show information",
            "default": false
          },
          "tooltips_disabled": {
            "type": "boolean",
            "title": "Tooltips Disabled",
            "description": "Never show tooltips",
            "default": false
          },
          "convertion_system": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConvertionSystem"
              }
            ],
            "description": "Convertion system of the user",
            "default": "metric"
          },
          "imperial_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImperialSettings"
              }
            ],
            "description": "Imperial settings of the user. Not relevant if convertion_system is metric"
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormat"
              }
            ],
            "description": "Date format of the user"
          },
          "number_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumberFormat"
              }
            ],
            "description": "Number format of the user"
          },
          "time_zone": {
            "type": "string",
            "title": "Time Zone",
            "description": "Time zone of the user"
          },
          "show_manipulated_snapshot_by_default": {
            "type": "boolean",
            "title": "Show Manipulated Snapshot By Default",
            "description": "Show manipulated snapshot by default",
            "default": false
          },
          "potree_camera_control": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PotreeCameraControl"
              }
            ],
            "description": "Camera control of the user",
            "default": "orbit"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "MongoDB unique ID of the user"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "user_id"],
        "title": "OutUserSetting"
      },
      "OutUserV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "credentials": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCredentials"
              }
            ],
            "title": "Credentials",
            "description": "User credentials"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password"
          },
          "system_admin": {
            "type": "boolean",
            "title": "System Admin",
            "description": "System admin",
            "default": false
          },
          "organization_admin": {
            "type": "boolean",
            "title": "Organization Admin",
            "description": "Organization admin",
            "default": false
          },
          "processing_admin": {
            "type": "boolean",
            "title": "Processing Admin",
            "description": "Processing admin",
            "default": false
          },
          "license_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "License Id",
            "description": "License ID"
          },
          "authorized_auth_clients": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Authorized Auth Clients",
            "description": "List of authorized auth clients for which the user already logged in and consented to",
            "default": []
          },
          "oauth_scopes": {
            "items": {
              "$ref": "#/components/schemas/OAuthScope"
            },
            "type": "array",
            "description": "List of scopes the user has access to",
            "default": ["sdxapi"]
          },
          "timezone_offset": {
            "type": "number",
            "title": "Timezone Offset",
            "description": "Timezone offset in hours from UTC",
            "default": 0
          },
          "scin_app_logged_in": {
            "type": "boolean",
            "title": "Scin App Logged In",
            "description": "Whether the user is logged in to the SCIN app",
            "default": false
          },
          "can_use_scin_app": {
            "type": "boolean",
            "title": "Can Use Scin App",
            "description": "Whether the user can use the SCIN app",
            "default": false
          },
          "password_changed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Password Changed At",
            "description": "Timestamp of the last password change"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBaseLanguages"
              }
            ],
            "description": "Language of the user",
            "default": "de"
          },
          "email_confirmed": {
            "type": "boolean",
            "title": "Email Confirmed",
            "description": "Whether the email is confirmed",
            "default": false
          },
          "email_confirmed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Email Confirmed At",
            "description": "Timestamp of the email confirmation"
          },
          "loops_settings_updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Loops Settings Updated At",
            "description": "Timestamp of the last loops settings update"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "last_login_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Login At",
            "description": "Timestamp of the last login"
          },
          "license": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutLicenseV2"
              }
            ],
            "title": "License"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Organization"
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "credentials",
          "password",
          "license_id",
          "id"
        ],
        "title": "OutUserV2"
      },
      "OutVisConfig": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the visualization"
          },
          "visible": {
            "type": "boolean",
            "title": "Visible",
            "description": "Is this visualization visible",
            "default": true
          },
          "meshed": {
            "type": "boolean",
            "title": "Meshed",
            "description": "Is this visualization meshed"
          },
          "origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VisOrigin"
              }
            ],
            "description": "Origin of the visualization",
            "default": "snapshot"
          },
          "gradient": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Gradient",
            "description": "Gradient of the visualization"
          },
          "offset": {
            "type": "number",
            "title": "Offset",
            "description": "Offset of the visualization",
            "default": 0
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "Object id of the linked visualizaiton elemen (e.g. snapshot id)"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id that created this visualization"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "meshed",
          "object_id",
          "project_id",
          "user_id"
        ],
        "title": "OutVisConfig"
      },
      "OutViscanScinUploadCredentials": {
        "properties": {
          "access_key_id": {
            "type": "string",
            "title": "Access Key Id",
            "description": "The temporary access key ID"
          },
          "access_key_secret": {
            "type": "string",
            "title": "Access Key Secret",
            "description": "The temporary access key secret"
          },
          "session_token": {
            "type": "string",
            "title": "Session Token",
            "description": "The temporary session token"
          },
          "region": {
            "type": "string",
            "title": "Region",
            "description": "The region of the bucket",
            "default": "eu-central-1"
          },
          "bucket": {
            "type": "string",
            "title": "Bucket",
            "description": "The bucket to upload the data to"
          },
          "s3_prefix": {
            "type": "string",
            "title": "S3 Prefix",
            "description": "The S3 prefix to upload the data to. Credentials are only valid for this prefix."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "The UTC expiration date of the credentials"
          }
        },
        "type": "object",
        "required": [
          "access_key_id",
          "access_key_secret",
          "session_token",
          "s3_prefix",
          "expires_at"
        ],
        "title": "OutViscanScinUploadCredentials"
      },
      "OutVolvo": {
        "properties": {
          "can_interface": {
            "type": "string",
            "title": "Can Interface",
            "description": "can interface"
          },
          "baudrate": {
            "type": "integer",
            "title": "Baudrate",
            "description": "baudrate of the can interface"
          }
        },
        "type": "object",
        "title": "OutVolvo"
      },
      "OwnerType": {
        "type": "string",
        "enum": ["user", "system", "dji_dock"],
        "title": "OwnerType",
        "description": "An enumeration."
      },
      "PaidOrganizationSignup": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the organization"
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "title": "Invoice Email",
            "description": "Email address for invoices"
          },
          "phone": {
            "type": "string",
            "title": "Phone",
            "description": "Phone number of the organization"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__SupportedCurrency"
              }
            ],
            "description": "Currency of the organization it pays its bills in"
          },
          "default_collection_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__CollectionMethod"
              }
            ],
            "description": "Default collection method of the organization",
            "default": "send_invoice"
          },
          "industry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Industry"
              }
            ],
            "description": "Industry of the organization"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Language"
              }
            ],
            "description": "Language of the organization",
            "default": "en-US"
          }
        },
        "type": "object",
        "required": ["name", "invoice_email", "phone", "currency", "industry"],
        "title": "PaidOrganizationSignup"
      },
      "PaidUserSignup": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email of the user"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password of the user"
          },
          "firstname": {
            "type": "string",
            "title": "Firstname",
            "description": "First name of the user"
          },
          "lastname": {
            "type": "string",
            "title": "Lastname",
            "description": "Last name of the user"
          },
          "phone_number": {
            "type": "string",
            "title": "Phone Number",
            "description": "Phone number of the user"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username of the user",
            "default": ""
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseLanguages"
              }
            ],
            "description": "Language of the user",
            "default": "de"
          }
        },
        "type": "object",
        "required": ["email", "password", "firstname", "lastname"],
        "title": "PaidUserSignup"
      },
      "ParamMode": {
        "type": "string",
        "enum": ["leica", "trimble", "topcon", "volvo", "mts", "sp"],
        "title": "ParamMode",
        "description": "An enumeration."
      },
      "ParserCoordinateSystemCalibrationFile": {
        "properties": {
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "The calibration file either .lok or .dc"
          },
          "gcg_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Gcg File Id",
            "description": "Gcg file"
          },
          "lcg_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Lcg File Id",
            "description": "Lcg file"
          },
          "grd_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Grd File Id",
            "description": "Grd file"
          }
        },
        "type": "object",
        "required": ["file_id"],
        "title": "ParserCoordinateSystemCalibrationFile"
      },
      "PaymentSource": {
        "type": "string",
        "enum": ["invoice"],
        "title": "PaymentSource",
        "description": "An enumeration."
      },
      "PendingDjiDockImageProcessing": {
        "properties": {
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "Organization ID"
          },
          "dji_project_name": {
            "type": "string",
            "title": "Dji Project Name",
            "description": "DJI project name"
          },
          "img_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Img Folder Id",
            "description": "Image folder ID"
          },
          "img_count": {
            "type": "integer",
            "title": "Img Count",
            "description": "Image count"
          },
          "gcp_set_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Gcp Set Id",
            "description": "GCP set ID"
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "Create pins",
            "default": false
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option",
            "default": "lowest_point"
          },
          "grid_size": {
            "type": "integer",
            "title": "Grid Size",
            "description": "Grid size",
            "default": 5
          },
          "tag_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Tag Ids",
            "description": "Tag IDs",
            "default": []
          },
          "pixel_count": {
            "type": "integer",
            "title": "Pixel Count",
            "description": "Pixel count for the images of this job",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "dji_dock_id",
          "dji_project_name",
          "img_folder_id",
          "img_count"
        ],
        "title": "PendingDjiDockImageProcessing"
      },
      "PendingJobStatus": {
        "type": "string",
        "enum": ["pending", "executed", "failed"],
        "title": "PendingJobStatus",
        "description": "An enumeration."
      },
      "PendingJobType": {
        "type": "string",
        "enum": ["process_dji_dock_images", "process_viscan_scin_images"],
        "title": "PendingJobType",
        "description": "An enumeration."
      },
      "PendingReason": {
        "type": "string",
        "enum": ["not_enough_credits", "user_setting", "unknown", "automatic"],
        "title": "PendingReason",
        "description": "An enumeration."
      },
      "PendingViscanScinImageProcessing": {
        "properties": {
          "snapshot_name": {
            "type": "string",
            "title": "Snapshot Name",
            "description": "Snapshot name"
          },
          "img_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Img Folder Id",
            "description": "Image folder ID"
          },
          "img_count": {
            "type": "integer",
            "title": "Img Count",
            "description": "Image count"
          },
          "pixel_count": {
            "type": "integer",
            "title": "Pixel Count",
            "description": "Pixel count for the images of this job",
            "default": 1
          },
          "webhook_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Webhook Id",
            "description": "Webhook ID"
          }
        },
        "type": "object",
        "required": [
          "snapshot_name",
          "img_folder_id",
          "img_count",
          "webhook_id"
        ],
        "title": "PendingViscanScinImageProcessing"
      },
      "PhotogrammetryCreditName": {
        "type": "string",
        "enum": ["SDX-Cloud - Credit | Photogrammetry"],
        "title": "PhotogrammetryCreditName",
        "description": "An enumeration."
      },
      "PhotogrammetryProcessingProvider": {
        "type": "string",
        "enum": ["pix4dcloud", "sdxphotogrammetry"],
        "title": "PhotogrammetryProcessingProvider",
        "description": "An enumeration."
      },
      "PhotogrammetryTaskFeatureQuality": {
        "type": "string",
        "enum": ["ultra", "high", "medium", "low", "lowest"],
        "title": "PhotogrammetryTaskFeatureQuality",
        "description": "An enumeration."
      },
      "PhotogrammetryTaskPcQuality": {
        "type": "string",
        "enum": ["ultra", "high", "medium", "low", "lowest"],
        "title": "PhotogrammetryTaskPcQuality",
        "description": "An enumeration."
      },
      "PinFile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file - saved on assets bucket"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__pins__constants__FileSource"
              }
            ],
            "description": "Source of the file"
          },
          "blurhash": {
            "type": "string",
            "title": "Blurhash",
            "description": "Blurhash of the file"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File ID of the file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation time of the file"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update time of the file"
          },
          "low_res_webp_s3_key": {
            "type": "string",
            "title": "Low Res Webp S3 Key",
            "description": "S3 key of the low resolution webp image"
          },
          "mid_res_webp_s3_key": {
            "type": "string",
            "title": "Mid Res Webp S3 Key",
            "description": "S3 key of the mid resolution webp image"
          },
          "high_res_webp_s3_key": {
            "type": "string",
            "title": "High Res Webp S3 Key",
            "description": "S3 key of the high resolution webp image"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "Unique ID of this file"
          }
        },
        "type": "object",
        "required": ["name", "s3_key", "source"],
        "title": "PinFile"
      },
      "Plans2DError": {
        "properties": {
          "error_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Plans2DErrorType"
              }
            ],
            "description": "error type if job failed",
            "default": "undefined"
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message",
            "default": "Orthophoto processing failed."
          },
          "error_description": {
            "type": "string",
            "title": "Error Description",
            "description": "Error description",
            "default": "Orthophoto processing failed. Please contact support."
          },
          "error_traceback": {
            "type": "string",
            "title": "Error Traceback",
            "description": "Error traceback if the job failed"
          }
        },
        "type": "object",
        "title": "Plans2DError"
      },
      "Plans2DErrorType": {
        "type": "string",
        "enum": ["undefined", "coordinate-system-mismatch"],
        "title": "Plans2DErrorType",
        "description": "An enumeration."
      },
      "Plans2DFiletype": {
        "type": "string",
        "enum": [".dxf"],
        "title": "Plans2DFiletype",
        "description": "An enumeration."
      },
      "Plans2DStatus": {
        "type": "string",
        "enum": ["created", "processing", "finished", "failed"],
        "title": "Plans2DStatus",
        "description": "An enumeration."
      },
      "Plans2DStatusHistory": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Plans2DStatus"
              }
            ],
            "description": "Status",
            "default": "finished"
          },
          "processing_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Processing Job Id",
            "description": "Processing job id"
          }
        },
        "type": "object",
        "title": "Plans2DStatusHistory"
      },
      "Point": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Point name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Point description"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Point latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Point longitude"
          },
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Point easting"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Point northing"
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "Point altitude"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "Point scanned timestamp"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id",
            "description": "Point tobe diff"
          },
          "reference_terrain_diff": {
            "type": "number",
            "title": "Reference Terrain Diff",
            "description": "Point tobe diff"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Point created timestamp"
          }
        },
        "type": "object",
        "required": [
          "name",
          "latitude",
          "longitude",
          "easting",
          "northing",
          "altitude",
          "scanned_at"
        ],
        "title": "Point"
      },
      "PointCloudConfig": {
        "properties": {
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "MongoDB unique ID of the soild"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "MongoDB unique ID of the phase"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id",
            "description": "MongoDB unique ID of the geofence"
          },
          "resolution": {
            "type": "number",
            "maximum": 50,
            "minimum": 1,
            "title": "Resolution",
            "description": "Resolution of the point cloud in cm"
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "description": "Min point of the point cloud",
            "default": false
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "description": "Max point of the point cloud",
            "default": false
          },
          "colorized_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColorizedOption"
              }
            ],
            "description": "Colorized option of the point cloud"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the point cloud"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the point cloud"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "Manipulated of the point cloud",
            "default": false
          },
          "export_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerExportOptions"
              }
            ],
            "description": "Export option of the point cloud"
          }
        },
        "type": "object",
        "title": "PointCloudConfig"
      },
      "PointImport": {
        "properties": {
          "segment_name": {
            "type": "string",
            "title": "Segment Name",
            "description": "Name of the segment the imported points belong to"
          },
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File id that contains data of the points to be imported"
          }
        },
        "type": "object",
        "required": ["segment_name", "file_id"],
        "title": "PointImport"
      },
      "PointInsertionOption": {
        "type": "string",
        "enum": ["highest_point", "lowest_point"],
        "title": "PointInsertionOption",
        "description": "An enumeration."
      },
      "PointObjectMaterials": {
        "type": "string",
        "enum": [
          "GH_NA",
          "GH_NAC",
          "GH_NAL",
          "GH_NB",
          "GH_NBC",
          "GH_NBL",
          "GH_NBS",
          "GH_NCL",
          "GH_NCLXS",
          "GH_NCR",
          "GH_NCS",
          "GH_OA",
          "GH_OAC",
          "GH_OAL",
          "GH_OB",
          "GH_OBC",
          "GH_OBL",
          "GH_OBS",
          "GH_OBT",
          "GH_OCL",
          "GH_OCLXS",
          "GH_OCR",
          "GH_OCS",
          "KS_AA",
          "KS_AB",
          "KS_AC",
          "KS_AD",
          "MU_FA",
          "MU_FAC",
          "MU_FAHW",
          "MU_FARM",
          "MU_FAT",
          "MU_FB",
          "MU_FBC",
          "MU_FBHW",
          "MU_FBRM",
          "MU_FBT",
          "MU_FC",
          "MU_FCC",
          "MU_FCHW",
          "MU_FCRM",
          "MU_FCT",
          "MU_FG"
        ],
        "title": "PointObjectMaterials",
        "description": "An enumeration."
      },
      "Polyline": {
        "properties": {
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array",
              "minItems": 2
            },
            "type": "array",
            "minItems": 2,
            "title": "Points",
            "description": "List of points that define the polyline"
          },
          "radius": {
            "type": "number",
            "title": "Radius",
            "description": "Radius of the polyline in cm. This area around the polyline gets deleted."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the polyline"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the polyline"
          }
        },
        "type": "object",
        "required": ["points", "radius", "name"],
        "title": "Polyline"
      },
      "PositionEPSG": {
        "properties": {
          "epsg_code": {
            "type": "integer",
            "title": "Epsg Code"
          }
        },
        "type": "object",
        "required": ["epsg_code"],
        "title": "PositionEPSG"
      },
      "PositionTransformation": {
        "properties": {
          "datum_transformation_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatumTransformation"
              }
            ],
            "description": "What type of datum transformation is used"
          },
          "projection_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Projection"
              }
            ],
            "description": "What type of projection is used"
          },
          "horizontal_offset_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HorizontalOffsetType"
              }
            ],
            "description": "What type of horizontal offset is used"
          },
          "datumstransformation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransformationMoldensky"
              },
              {
                "$ref": "#/components/schemas/Transformation7Parameter"
              }
            ],
            "title": "Datumstransformation",
            "description": "Datum transformation parameters"
          },
          "projection": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransformationObliqueStereographicMercator"
              },
              {
                "$ref": "#/components/schemas/TransformationTransverseMercator"
              }
            ],
            "title": "Projection",
            "description": "Projection parameters"
          },
          "horizontal_offset": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransformationAffine"
              },
              {
                "$ref": "#/components/schemas/Transfomration2DHelmert"
              },
              {
                "$ref": "#/components/schemas/TransformationOffset"
              }
            ],
            "title": "Horizontal Offset",
            "description": "Horizontal offset parameters"
          }
        },
        "type": "object",
        "title": "PositionTransformation"
      },
      "PositionType": {
        "type": "string",
        "enum": ["epsg", "transformation"],
        "title": "PositionType",
        "description": "An enumeration."
      },
      "PotreeCameraControl": {
        "type": "string",
        "enum": ["earth", "helicopter", "flight", "orbit"],
        "title": "PotreeCameraControl",
        "description": "An enumeration."
      },
      "PotreeExportFileExtensions": {
        "type": "string",
        "enum": [".las", ".e57", ".pts", ".csv", ".xyz", ".ply"],
        "title": "PotreeExportFileExtensions",
        "description": "An enumeration."
      },
      "PotreeFittingPoint": {
        "properties": {
          "position": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Position",
            "description": "Position of the manipulation in meter"
          },
          "offset": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Offset",
            "description": "Offset of the manipulation in meter"
          }
        },
        "type": "object",
        "required": ["position", "offset"],
        "title": "PotreeFittingPoint"
      },
      "PotreeManipulation": {
        "properties": {
          "fitting_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PotreeFittingPoint"
              }
            ],
            "title": "Fitting Point",
            "description": "Fitting point of the manipulation"
          }
        },
        "type": "object",
        "title": "PotreeManipulation"
      },
      "PotreeMeasurements": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the measurement"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the measurement"
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Volume of the measurement in m3"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "Points of the measurement"
          },
          "volume_measurement_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PotreeVolumeMeasurementOption"
              }
            ],
            "title": "Volume Measurement Options",
            "description": "Volume measurement options of the measurement"
          }
        },
        "type": "object",
        "required": ["name", "type", "points"],
        "title": "PotreeMeasurements"
      },
      "PotreePointCloud": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB unique ID of this snapshot or file"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__potrees__constants__PotreePointCloudType"
              }
            ],
            "description": "Type of the point cloud"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the point cloud"
          },
          "urls": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PotreeURLs"
              }
            ],
            "title": "Urls",
            "description": "URLs of the point cloud files"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PotreePointCloudConfig"
              }
            ],
            "title": "Config",
            "description": "Config of the point cloud"
          },
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "MongoDB unique ID of this snapshot or file"
          }
        },
        "type": "object",
        "required": ["type", "name", "config", "object_id"],
        "title": "PotreePointCloud"
      },
      "PotreePointCloudConfig": {
        "properties": {
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "MongoDB unique ID of the soild"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "MongoDB unique ID of the phase"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id",
            "description": "MongoDB unique ID of the geofence"
          },
          "resolution": {
            "type": "integer",
            "title": "Resolution",
            "description": "Resolution of the point cloud in cm",
            "default": 5
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "description": "Min point of the point cloud",
            "default": false
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "description": "Max point of the point cloud",
            "default": false
          },
          "colorized_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColorizedOption"
              }
            ],
            "description": "Colorized option of the point cloud"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the point cloud"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the point cloud"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "Manipulated of the point cloud",
            "default": false
          },
          "export_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerExportOptions"
              }
            ],
            "description": "Export option of the point cloud"
          }
        },
        "type": "object",
        "title": "PotreePointCloudConfig"
      },
      "PotreeURLs": {
        "properties": {
          "octree": {
            "type": "string",
            "title": "Octree",
            "description": "URL of the bin file"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "description": "URL of the metadata file"
          },
          "hierarchy": {
            "type": "string",
            "title": "Hierarchy",
            "description": "URL of the hierarchy file"
          }
        },
        "type": "object",
        "required": ["octree", "metadata", "hierarchy"],
        "title": "PotreeURLs"
      },
      "PotreeVolumeMeasurementOption": {
        "properties": {
          "positive": {
            "type": "boolean",
            "title": "Positive",
            "description": "Positive of the volume measurement option"
          },
          "calc_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__potrees__constants__VolumeMeasurementOption"
              }
            ],
            "description": "Calc option of the volume measurement option"
          }
        },
        "type": "object",
        "required": ["positive", "calc_option"],
        "title": "PotreeVolumeMeasurementOption"
      },
      "PowerInterface": {
        "type": "string",
        "enum": ["can"],
        "title": "PowerInterface",
        "description": "An enumeration."
      },
      "Price": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Amount",
            "description": "Amount in price currency. E.g. 1 for 1€ or 1 for 1$"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceCurrency"
              }
            ],
            "description": "Currency"
          },
          "quantity_start": {
            "type": "integer",
            "title": "Quantity Start",
            "description": "Quantity start range for which this price is valid"
          },
          "quantity_end": {
            "type": "integer",
            "title": "Quantity End",
            "description": "Quantity end range for which this price is valid"
          }
        },
        "type": "object",
        "required": ["amount", "currency"],
        "title": "Price"
      },
      "PriceCurrency": {
        "type": "string",
        "enum": ["eur", "usd", "gbp", "chf"],
        "title": "PriceCurrency",
        "description": "An enumeration."
      },
      "Prices": {
        "properties": {
          "eur": {
            "items": {
              "$ref": "#/components/schemas/Price"
            },
            "type": "array",
            "title": "Eur",
            "description": "Prices in EUR"
          },
          "usd": {
            "items": {
              "$ref": "#/components/schemas/Price"
            },
            "type": "array",
            "title": "Usd",
            "description": "Prices in USD"
          }
        },
        "type": "object",
        "required": ["eur", "usd"],
        "title": "Prices"
      },
      "ProcessDataset": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "dataset_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dataset Id"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": ["project_id", "dataset_id", "user_id"],
        "title": "ProcessDataset"
      },
      "ProcessImageLayer": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id"
          },
          "layer_type": {
            "type": "string",
            "title": "Layer Type",
            "description": "Type of layer"
          }
        },
        "type": "object",
        "required": ["project_id", "layer_id", "layer_type"],
        "title": "ProcessImageLayer"
      },
      "ProcessLayerData": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Layer Id"
          },
          "layer_type": {
            "type": "string",
            "title": "Layer Type",
            "description": "Type of layer"
          }
        },
        "type": "object",
        "required": ["project_id", "layer_id", "layer_type"],
        "title": "ProcessLayerData"
      },
      "ProcessOrthophoto": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "orthophoto_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Orthophoto Id"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": ["project_id", "orthophoto_id", "user_id"],
        "title": "ProcessOrthophoto"
      },
      "ProcessPileGeofence": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "pile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pile Id"
          },
          "storage_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Storage Id"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": ["project_id", "pile_id", "storage_id", "user_id"],
        "title": "ProcessPileGeofence"
      },
      "ProcessPotree": {
        "properties": {
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id"
          },
          "potree_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Id"
          }
        },
        "type": "object",
        "required": ["user_id", "potree_id"],
        "title": "ProcessPotree"
      },
      "ProcessReferenceTerrain": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": ["project_id", "reference_terrain_id", "user_id"],
        "title": "ProcessReferenceTerrain"
      },
      "ProcessSnapshot": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id"
          }
        },
        "type": "object",
        "required": ["project_id", "snapshot_id", "system_id"],
        "title": "ProcessSnapshot"
      },
      "ProcessSnapshotManipulation": {
        "properties": {
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id"
          },
          "manipulation_type": {
            "type": "string",
            "title": "Manipulation Type",
            "description": "Type of manipulation"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "snapshot_id",
          "user_id",
          "manipulation_type"
        ],
        "title": "ProcessSnapshotManipulation"
      },
      "ProcessedAreaPoint": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting of measure point"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing of measure point"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height of measure point"
          },
          "scanned_ts": {
            "type": "number",
            "title": "Scanned Ts",
            "description": "Scanned timestamp of measure point"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "Scanned at of measure point"
          },
          "soil_id": {
            "type": "string",
            "title": "Soil Id",
            "description": "Soil id of measure point"
          },
          "phase_id": {
            "type": "string",
            "title": "Phase Id",
            "description": "Phase id of measure point"
          },
          "system_id": {
            "type": "string",
            "title": "System Id",
            "description": "System id of measure point"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "ProcessedAreaPoint"
      },
      "ProcessedDetectedDjiFlightInfo": {
        "properties": {
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "DJI dock id"
          },
          "file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Ids",
            "description": "List of file ids"
          },
          "dji_flight_name": {
            "type": "string",
            "title": "Dji Flight Name",
            "description": "Name of the DJI flight"
          },
          "dji_flight_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Flight Id",
            "description": "ID of the DJI flight"
          }
        },
        "type": "object",
        "required": [
          "dji_dock_id",
          "file_ids",
          "dji_flight_name",
          "dji_flight_id"
        ],
        "title": "ProcessedDetectedDjiFlightInfo"
      },
      "ProcessingInputVidocImage": {
        "properties": {
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the vidoc image"
          },
          "comment": {
            "type": "string",
            "title": "Comment",
            "description": "Comment of the vidoc image"
          },
          "classification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomFileClassification"
              }
            ],
            "description": "Classification of the vidoc image. Required if telekom pin creation is enabled"
          }
        },
        "type": "object",
        "required": ["s3_key"],
        "title": "ProcessingInputVidocImage"
      },
      "ProcessingJob": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "Job ID"
          },
          "job_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobType"
              }
            ],
            "description": "Job type"
          },
          "meta": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MetaProcessSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessOrthophoto"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPileGeofence"
              },
              {
                "$ref": "#/components/schemas/MetaDeletePileGeofence"
              },
              {
                "$ref": "#/components/schemas/MetaProcessReferenceTerrain"
              },
              {
                "$ref": "#/components/schemas/MetaProcessImageLayer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLayerData"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDataset"
              },
              {
                "$ref": "#/components/schemas/MetaProcessTimelapse"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotDownload"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurePoint"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerPoint"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPointHistory"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurePile"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerPile"
              },
              {
                "$ref": "#/components/schemas/MetaProcessControlPointsMatrix"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreePointcloudUrls"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreeExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreeCrossSectionExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcess3DMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotoMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCrossSectionPoints"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCrossSectionPointsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLineExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessProjectXmlExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDxfFileCoordinates"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCableExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCableExportExplorer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotManipulation"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotManipulationDeleted"
              },
              {
                "$ref": "#/components/schemas/MetaProcessProject3DTimelapse"
              },
              {
                "$ref": "#/components/schemas/MetaProcessCableImport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessHighResV2LayerExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessStoredPointsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessStoredLinesExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaDeleteSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessZipDownload"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotComparison"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPgSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSdxCloudSnapshotMoved"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessImageFiles"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiWebhookImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessProjectMigration"
              },
              {
                "$ref": "#/components/schemas/MetaProcessZipImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPotreeMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessExportPileBase"
              },
              {
                "$ref": "#/components/schemas/MetaProcessTelekomTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessAutostartUpdateCheck"
              },
              {
                "$ref": "#/components/schemas/MetaConvertCoordsGlobalLocal"
              },
              {
                "$ref": "#/components/schemas/MetaConvertCoordsLocalGlobal"
              },
              {
                "$ref": "#/components/schemas/MetaProcessAutostartSystemAddCheck"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLayer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurementsToTelekom"
              },
              {
                "$ref": "#/components/schemas/MetaProcessAutomaticMeasurements"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanScinWebhookImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanScinSnapshot"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiWebhook"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiFlightDetection"
              },
              {
                "$ref": "#/components/schemas/MetaProcessDjiUnprocessedImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessInvoice"
              },
              {
                "$ref": "#/components/schemas/MetaProcess2DPlan"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanScinWebhook"
              },
              {
                "$ref": "#/components/schemas/MetaProcessViscanToSodexTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSodexToViscanTransfer"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureArea"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasurePoints"
              },
              {
                "$ref": "#/components/schemas/MetaProcessVidocImages"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotZip"
              },
              {
                "$ref": "#/components/schemas/MetaDeleteProject"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSnapshotFilesToTelekom"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerArea"
              },
              {
                "$ref": "#/components/schemas/MetaProcessMeasureLayerPoints"
              },
              {
                "$ref": "#/components/schemas/MetaProcessGeofenceDetectionBox"
              },
              {
                "$ref": "#/components/schemas/MetaProcessVidocImagesV2"
              },
              {
                "$ref": "#/components/schemas/MetaProcessTelekomPinsToTelekom"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLineDetectionBox"
              },
              {
                "$ref": "#/components/schemas/MetaProcessSodexToPhotogrammetry"
              },
              {
                "$ref": "#/components/schemas/MetaProcessPhotogrammetryToSodex"
              },
              {
                "$ref": "#/components/schemas/MetaProcessOrganizationCSVExport"
              },
              {
                "$ref": "#/components/schemas/MetaProcessLokFileValidation"
              }
            ],
            "title": "Meta",
            "description": "Job meta data"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingJobStatus"
              }
            ],
            "description": "Job status",
            "default": "created"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DataProcessSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessOrthophoto"
              },
              {
                "$ref": "#/components/schemas/DataProcessPileGeofence"
              },
              {
                "$ref": "#/components/schemas/DataProcessReferenceTerrain"
              },
              {
                "$ref": "#/components/schemas/DataProcessImageLayer"
              },
              {
                "$ref": "#/components/schemas/DataProcessLayerData"
              },
              {
                "$ref": "#/components/schemas/DataProcessDataset"
              },
              {
                "$ref": "#/components/schemas/DataProcessTimelapse"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotDownload"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurePoint"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerPoint"
              },
              {
                "$ref": "#/components/schemas/DataProcessPointHistory"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurePile"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerPile"
              },
              {
                "$ref": "#/components/schemas/DataProcessControlPointsMatrix"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreePointcloudUrls"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreeExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreeCrossSectionExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcess3DMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoMergedLayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotoMergedLayerExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessCrossSectionPoints"
              },
              {
                "$ref": "#/components/schemas/DataProcessCrossSectionPointsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessLineExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessProjectXmlExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessDxfFileCoordinates"
              },
              {
                "$ref": "#/components/schemas/DataProcessCableExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessCableExportExplorer"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotManipulation"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotManipulationDeleted"
              },
              {
                "$ref": "#/components/schemas/DataProcessProject3DTimelapse"
              },
              {
                "$ref": "#/components/schemas/DataProcessCableImport"
              },
              {
                "$ref": "#/components/schemas/DataProcessHighResV2LayerExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessStoredPointsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessStoredLinesExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataDeleteSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessZipDownload"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotComparison"
              },
              {
                "$ref": "#/components/schemas/DataProcessPgSdxCloudSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessSdxCloudSnapshotMoved"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessImageFile"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiWebhookImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessProjectMigration"
              },
              {
                "$ref": "#/components/schemas/DataProcessZipImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessPotreeMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessExportPileBase"
              },
              {
                "$ref": "#/components/schemas/DataProcessTelekomTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessAutostartUpdateCheck"
              },
              {
                "$ref": "#/components/schemas/DataConvertCoordsGlobalLocal"
              },
              {
                "$ref": "#/components/schemas/DataConvertCoordsLocalGlobal"
              },
              {
                "$ref": "#/components/schemas/DataProcessAutostartSystemAddCheck"
              },
              {
                "$ref": "#/components/schemas/DataProcessLayer"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurementsExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurementsToTelekom"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanScinWebhookImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanScinSnapshot"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiFlightDetection"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiWebhook"
              },
              {
                "$ref": "#/components/schemas/DataProcessDjiUnprocessedImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessAutomaticMeasurements"
              },
              {
                "$ref": "#/components/schemas/DataProcessInvoice"
              },
              {
                "$ref": "#/components/schemas/DataProcess2DPlan"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanScinWebhook"
              },
              {
                "$ref": "#/components/schemas/DataProcessViscanToSodexTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessSodexToViscanTransfer"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureArea"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasurePoints"
              },
              {
                "$ref": "#/components/schemas/DataProcessVidocImages"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotZip"
              },
              {
                "$ref": "#/components/schemas/DataDeleteProject"
              },
              {
                "$ref": "#/components/schemas/DataProcessSnapshotFilesToTelekom"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerArea"
              },
              {
                "$ref": "#/components/schemas/DataProcessMeasureLayerPoints"
              },
              {
                "$ref": "#/components/schemas/DataProcessGeofenceDetectionBox"
              },
              {
                "$ref": "#/components/schemas/DataProcessVidocImagesV2"
              },
              {
                "$ref": "#/components/schemas/DataProcessTelekomPinsToTelekom"
              },
              {
                "$ref": "#/components/schemas/DataProcessLineDetectionBox"
              },
              {
                "$ref": "#/components/schemas/DataProcessSodexToPhotogrammetry"
              },
              {
                "$ref": "#/components/schemas/DataProcessPhotogrammetryToSodex"
              },
              {
                "$ref": "#/components/schemas/DataProcessOrganizationCSVExport"
              },
              {
                "$ref": "#/components/schemas/DataProcessLokFileValidation"
              },
              {
                "$ref": "#/components/schemas/DataDeletePileGeofence"
              }
            ],
            "title": "Data",
            "description": "Job result data"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User ID"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "System ID"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "error_code": {
            "type": "integer",
            "title": "Error Code",
            "description": "Error code if the job failed",
            "default": 0
          },
          "sdxengine_port": {
            "type": "integer",
            "title": "Sdxengine Port",
            "description": "Port of the sdxengine instance to send the job to",
            "default": 443
          },
          "webhook_url": {
            "type": "string",
            "title": "Webhook Url",
            "description": "URL to send the webhook response to"
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessingJobError"
              }
            ],
            "title": "Error",
            "description": "Error if the job failed"
          }
        },
        "type": "object",
        "required": ["id", "job_type"],
        "title": "ProcessingJob"
      },
      "ProcessingJobError": {
        "properties": {
          "error_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ErrorTypes"
              },
              {
                "type": "string"
              }
            ],
            "title": "Error Type",
            "description": "error type if job failed",
            "default": "UNDEFINED"
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message if the job failed"
          },
          "error_description": {
            "type": "string",
            "title": "Error Description",
            "description": "Error description if the job failed"
          },
          "error_traceback": {
            "type": "string",
            "title": "Error Traceback",
            "description": "Error traceback if the job failed"
          }
        },
        "type": "object",
        "required": ["error_message", "error_description"],
        "title": "ProcessingJobError"
      },
      "ProcessingJobStatus": {
        "type": "string",
        "enum": [
          "created",
          "committed",
          "queued",
          "processing",
          "worker_processing_finished",
          "past_processing",
          "finished",
          "failed",
          "expired"
        ],
        "title": "ProcessingJobStatus",
        "description": "An enumeration."
      },
      "ProcessingOutputVidocImage": {
        "properties": {
          "file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "File Id",
            "description": "File id of the vidoc image"
          }
        },
        "type": "object",
        "required": ["file_id"],
        "title": "ProcessingOutputVidocImage"
      },
      "Product": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CloudLicenseName"
              },
              {
                "$ref": "#/components/schemas/DataVolumeName"
              },
              {
                "$ref": "#/components/schemas/RunningMeterName"
              },
              {
                "$ref": "#/components/schemas/SdxCloudPackageName"
              },
              {
                "$ref": "#/components/schemas/GigaPixelName"
              },
              {
                "$ref": "#/components/schemas/PhotogrammetryCreditName"
              },
              {
                "type": "string"
              }
            ],
            "title": "Name",
            "description": "Type of the product"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the product"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductType"
              }
            ],
            "description": "Type of the product"
          },
          "purchase_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductPurchaseType"
              }
            ],
            "description": "Purchase type of the product"
          },
          "product_value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "title": "Product Value",
            "description": "Value of the product"
          },
          "article_number": {
            "type": "string",
            "title": "Article Number",
            "description": "Article number"
          },
          "prices": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Prices"
              }
            ],
            "title": "Prices",
            "description": "Prices of the product"
          },
          "archived": {
            "type": "boolean",
            "title": "Archived",
            "description": "Whether the product is archived",
            "default": false
          },
          "stripe_id": {
            "type": "string",
            "title": "Stripe Id",
            "description": "Stripe ID of the product"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "purchase_type",
          "product_value",
          "article_number",
          "prices"
        ],
        "title": "Product"
      },
      "ProductModel": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CloudLicenseName"
              },
              {
                "$ref": "#/components/schemas/DataVolumeName"
              },
              {
                "$ref": "#/components/schemas/RunningMeterName"
              },
              {
                "$ref": "#/components/schemas/SdxCloudPackageName"
              },
              {
                "$ref": "#/components/schemas/GigaPixelName"
              },
              {
                "$ref": "#/components/schemas/PhotogrammetryCreditName"
              },
              {
                "type": "string"
              }
            ],
            "title": "Name",
            "description": "The Product name"
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductUnit"
              }
            ],
            "description": "The unit of the Product"
          },
          "unit_quantity": {
            "type": "number",
            "title": "Unit Quantity",
            "description": "The quantity of the unit"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "The quantity of the Product",
            "default": 1
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency"
          },
          "currency_amount": {
            "type": "integer",
            "title": "Currency Amount",
            "description": "The currency amount"
          }
        },
        "type": "object",
        "required": ["name", "currency", "currency_amount"],
        "title": "ProductModel"
      },
      "ProductPurchaseType": {
        "type": "string",
        "enum": ["Subscription-Multiproduct", "Subscription-Single", "OneTime"],
        "title": "ProductPurchaseType",
        "description": "An enumeration."
      },
      "ProductType": {
        "type": "string",
        "enum": [
          "CloudLicense",
          "DataVolume",
          "Pix4DPackage",
          "RunningMeter",
          "SDXCloudPackage",
          "GigaPixel",
          "PhotogrammetryCredit"
        ],
        "title": "ProductType",
        "description": "An enumeration."
      },
      "ProductUnit": {
        "type": "string",
        "enum": ["gb", "pixels"],
        "title": "ProductUnit",
        "description": "An enumeration."
      },
      "ProjectNotificationType": {
        "type": "string",
        "enum": ["dataSnapshotFinished", "dataSnapshotFailed"],
        "title": "ProjectNotificationType",
        "description": "An enumeration."
      },
      "ProjectUserNotificationTypeSetting": {
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectNotificationType"
              }
            ],
            "description": "Notification type"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether the notification type is enabled",
            "default": false
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "ProjectUserNotificationTypeSetting"
      },
      "Projection": {
        "type": "string",
        "enum": ["transverse_mercator", "oblique_stereographic_mercator"],
        "title": "Projection",
        "description": "An enumeration."
      },
      "ProjectionConfig": {
        "properties": {
          "original_resolution": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Original Resolution",
            "description": "original resolution of the image",
            "default": [1920, 1080]
          },
          "runtime_resolution": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Runtime Resolution",
            "description": "runtime resolution of the image",
            "default": [1280, 720]
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "whether the low res image should be used",
            "default": false
          },
          "z_near": {
            "type": "number",
            "title": "Z Near",
            "description": "z near value for the low res image",
            "default": 50
          },
          "z_far": {
            "type": "number",
            "title": "Z Far",
            "description": "z far value for the low res image",
            "default": 1000
          },
          "x_min": {
            "type": "number",
            "title": "X Min",
            "description": "x min value for the low res image",
            "default": 0
          },
          "x_max": {
            "type": "number",
            "title": "X Max",
            "description": "x max value for the low res image",
            "default": 1
          },
          "y_min": {
            "type": "number",
            "title": "Y Min",
            "description": "y min value for the low res image",
            "default": 0
          },
          "y_max": {
            "type": "number",
            "title": "Y Max",
            "description": "y max value for the low res image",
            "default": 1
          }
        },
        "type": "object",
        "title": "ProjectionConfig"
      },
      "ReferenceEllipsoiods": {
        "type": "string",
        "enum": ["grs80", "bessel_ch", "bessel_at_mgi"],
        "title": "ReferenceEllipsoiods",
        "description": "An enumeration."
      },
      "ReferenceMode": {
        "type": "string",
        "enum": [
          "origin",
          "tobe",
          "height",
          "min",
          "max",
          "average",
          "default",
          "file"
        ],
        "title": "ReferenceMode",
        "description": "An enumeration."
      },
      "ReferenceTerrainType": {
        "type": "string",
        "enum": ["auto", "manual"],
        "title": "ReferenceTerrainType",
        "description": "An enumeration."
      },
      "ReleaseApp": {
        "type": "string",
        "enum": ["jetson_hub", "manager"],
        "title": "ReleaseApp",
        "description": "An enumeration."
      },
      "ReleaseTypes": {
        "type": "string",
        "enum": ["alpha", "beta", "stable"],
        "title": "ReleaseTypes",
        "description": "An enumeration."
      },
      "Releases": {
        "type": "string",
        "enum": ["alpha", "beta", "stable", "sdx_4dvision"],
        "title": "Releases",
        "description": "An enumeration."
      },
      "ResponseGlobalPoints": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in rad"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in rad"
          },
          "alt": {
            "type": "number",
            "title": "Alt",
            "description": "Altitude in m"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "UTC ISO Datetime when the point was scanned/captured"
          }
        },
        "type": "object",
        "required": ["lat", "lon", "alt"],
        "title": "ResponseGlobalPoints"
      },
      "ResponseGradient": {
        "properties": {
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the gradient"
          },
          "distance": {
            "type": "number",
            "title": "Distance",
            "description": "Distance of the gradient"
          }
        },
        "type": "object",
        "required": ["color", "distance"],
        "title": "ResponseGradient"
      },
      "ResponseLocalPoints": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting in m"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing in m"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height in m"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "UTC ISO Datetime when the point was scanned/captured"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "ResponseLocalPoints"
      },
      "ResponseProcessedInfo": {
        "properties": {
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Snapshot version"
          },
          "z_min_max": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Z Min Max",
            "description": "Minimum and maximum z value of this snapshot"
          },
          "volumes": {
            "type": "object",
            "title": "Volumes",
            "description": "Volumes of the snapshot"
          },
          "preview": {
            "type": "object",
            "title": "Preview",
            "description": "Preview of the snapshot"
          },
          "ref_terrains_volume": {
            "type": "object",
            "title": "Ref Terrains Volume",
            "description": "Reference terrain volumes of the snapshot"
          }
        },
        "type": "object",
        "title": "ResponseProcessedInfo"
      },
      "Rotate": {
        "type": "string",
        "enum": ["0", "90", "180"],
        "title": "Rotate",
        "description": "An enumeration."
      },
      "RunningMeterName": {
        "type": "string",
        "enum": ["Data Processing per Linear Meter | Photogrammetry"],
        "title": "RunningMeterName",
        "description": "An enumeration."
      },
      "ScopeLevel": {
        "type": "string",
        "enum": [
          "cloud_base",
          "guest",
          "distributor",
          "system",
          "sodex",
          "vidoc",
          "inactive"
        ],
        "title": "ScopeLevel",
        "description": "An enumeration."
      },
      "ScopeLevels": {
        "type": "string",
        "enum": [
          "cloud_base",
          "guest",
          "distributor",
          "system",
          "sodex",
          "vidoc",
          "inactive"
        ],
        "title": "ScopeLevels",
        "description": "An enumeration."
      },
      "SdxCloudPackageName": {
        "type": "string",
        "enum": ["SDX-Cloud - Base Package"],
        "title": "SdxCloudPackageName",
        "description": "An enumeration."
      },
      "SensorApi": {
        "type": "string",
        "enum": [
          "sdx-4dvision-leica",
          "sdx-4dvision-topcon",
          "trimble",
          "sdx-compact",
          "mts",
          "sdx-4dvision-volvo",
          "sdx-4dvision-mts",
          "sdx-4dvision-trimble",
          "sdx-linevis"
        ],
        "title": "SensorApi",
        "description": "An enumeration."
      },
      "SharingMetaDashboard": {
        "properties": {
          "dashboard_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dashboard Id",
            "description": "Dashboard ID"
          }
        },
        "type": "object",
        "required": ["dashboard_id"],
        "title": "SharingMetaDashboard"
      },
      "SharingType": {
        "type": "string",
        "enum": ["dashboard"],
        "title": "SharingType",
        "description": "An enumeration."
      },
      "SnapshotComparisonGradientStage": {
        "properties": {
          "min_limit": {
            "type": "number",
            "title": "Min Limit",
            "description": "Minimum value of stage in which the gradient will be applied"
          },
          "max_limit": {
            "type": "number",
            "title": "Max Limit",
            "description": "Maximum value of stage value in which the gradient will be applied"
          },
          "hex_color": {
            "type": "string",
            "title": "Hex Color",
            "description": "Hex color value for the stage"
          }
        },
        "type": "object",
        "required": ["min_limit", "max_limit", "hex_color"],
        "title": "SnapshotComparisonGradientStage"
      },
      "SnapshotDataFileType": {
        "type": "string",
        "enum": [
          "pointcloud_las",
          "orthophoto_tiff",
          "mesh_bundle_zip",
          "report_pdf"
        ],
        "title": "SnapshotDataFileType",
        "description": "An enumeration."
      },
      "SnapshotDateSelection": {
        "type": "string",
        "enum": ["manual", "image-capture-date"],
        "title": "SnapshotDateSelection",
        "description": "An enumeration."
      },
      "SnapshotDetailedStatus": {
        "type": "string",
        "enum": [
          "created",
          "pending",
          "committed",
          "vidoc-file-processing",
          "zip-file-processing",
          "dji-file-processing",
          "sodex-to-viscan-transfer",
          "sodex-to-sdx-photogrammetry-transfer",
          "photogrammetry-processing",
          "viscan-to-sodex-transfer",
          "sdx-photogrammetry-to-sodex-transfer",
          "photogrammetry-past-processing",
          "orthophoto-processing",
          "snapshot-processing",
          "past-processing",
          "telekom-transfer",
          "automatic-measurements",
          "deleting",
          "finished",
          "failed"
        ],
        "title": "SnapshotDetailedStatus",
        "description": "An enumeration."
      },
      "SnapshotError": {
        "properties": {
          "error_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotErrorType"
              }
            ],
            "description": "error type if job failed",
            "default": "contact-support-error"
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message",
            "default": "Snapshot processing failed."
          },
          "error_description": {
            "type": "string",
            "title": "Error Description",
            "description": "Error description",
            "default": "Snapshot processing failed. Please contact support."
          },
          "error_traceback": {
            "type": "string",
            "title": "Error Traceback",
            "description": "Error traceback if the job failed"
          }
        },
        "type": "object",
        "title": "SnapshotError"
      },
      "SnapshotErrorType": {
        "type": "string",
        "enum": [
          "undefined",
          "zip-processing-error",
          "vidoc-image-processing-error",
          "contact-support-error",
          "photogrammetry-error",
          "transfer-error",
          "orthophoto-processing-error",
          "telekom-transfer-error",
          "processing-volume-not-enough"
        ],
        "title": "SnapshotErrorType",
        "description": "An enumeration."
      },
      "SnapshotFileReplacementInfo": {
        "properties": {
          "replaced_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Replaced File Id",
            "description": "Replaced file id"
          },
          "replaced_by_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Replaced By File Id",
            "description": "Replaced by file id"
          }
        },
        "type": "object",
        "required": ["replaced_by_file_id"],
        "title": "SnapshotFileReplacementInfo"
      },
      "SnapshotFileReplacementInfos": {
        "properties": {
          "orthophoto_tiff_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotFileReplacementInfo"
              }
            ],
            "title": "Orthophoto Tiff File",
            "description": "Orthophoto tiff file replacement info"
          },
          "source_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotFileReplacementInfo"
              }
            ],
            "title": "Source File",
            "description": "Source file replacement info"
          },
          "report_pdf_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotFileReplacementInfo"
              }
            ],
            "title": "Report Pdf File",
            "description": "Report pdf file replacement info"
          },
          "mesh_bundle_zip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotFileReplacementInfo"
              }
            ],
            "title": "Mesh Bundle Zip",
            "description": "Mesh bundle zip file replacement info"
          },
          "replaced_at": {
            "type": "string",
            "format": "date-time",
            "title": "Replaced At",
            "description": "Replaced at"
          },
          "replaced_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Replaced By User Id",
            "description": "Replaced by user id"
          }
        },
        "type": "object",
        "required": ["replaced_by_user_id"],
        "title": "SnapshotFileReplacementInfos"
      },
      "SnapshotInfo": {
        "properties": {
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Snapshot version",
            "default": 5
          },
          "s3_changed": {
            "type": "string",
            "title": "S3 Changed",
            "description": "S3 key of the changed elements"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "User id that created the snapshot"
          },
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "Dji dock id the snapshot belongs to"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__SnapshotFileType"
              }
            ],
            "description": "Filetype of the snapshot",
            "default": ".sodex"
          },
          "optimal_zoom_level": {
            "type": "integer",
            "title": "Optimal Zoom Level",
            "description": "Optimal zoom level of the snapshot",
            "default": 18
          }
        },
        "type": "object",
        "title": "SnapshotInfo"
      },
      "SnapshotPendingReason": {
        "type": "string",
        "enum": ["not_enough_credits", "user_setting", "unknown", "automatic"],
        "title": "SnapshotPendingReason",
        "description": "An enumeration."
      },
      "SnapshotSdxProcessingSettings": {
        "properties": {
          "feature_quality": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryTaskFeatureQuality"
              }
            ],
            "description": "Feature quality",
            "default": "medium"
          },
          "pc_quality": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryTaskPcQuality"
              }
            ],
            "description": "PC quality",
            "default": "medium"
          },
          "orthophoto_resolution": {
            "type": "number",
            "minimum": 0.01,
            "title": "Orthophoto Resolution",
            "description": "Orthophoto resolution",
            "default": 1
          }
        },
        "type": "object",
        "title": "SnapshotSdxProcessingSettings"
      },
      "SnapshotStatus": {
        "type": "string",
        "enum": [
          "created",
          "pending",
          "processing",
          "deleting",
          "finished",
          "failed"
        ],
        "title": "SnapshotStatus",
        "description": "An enumeration."
      },
      "SnapshotStatusHistory": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date"
          },
          "detailed_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDetailedStatus"
              }
            ],
            "description": "Detailed status",
            "default": "finished"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotStatus"
              }
            ],
            "description": "Status",
            "default": "finished"
          },
          "processing_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Processing Job Id",
            "description": "Processing job id"
          }
        },
        "type": "object",
        "title": "SnapshotStatusHistory"
      },
      "SnapshotViscanData": {
        "properties": {
          "center_latitude": {
            "type": "number",
            "title": "Center Latitude",
            "description": "Center latitude"
          },
          "center_longitude": {
            "type": "number",
            "title": "Center Longitude",
            "description": "Center longitude"
          },
          "center_altitude": {
            "type": "number",
            "title": "Center Altitude",
            "description": "Center altitude"
          },
          "best_gnss_position": {
            "type": "number",
            "title": "Best Gnss Position",
            "description": "Best GNSS position"
          },
          "routes_captured": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Routes Captured",
            "description": "The list of routes captured"
          }
        },
        "type": "object",
        "title": "SnapshotViscanData"
      },
      "SnapshotWarning": {
        "properties": {
          "warning_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotWarningType"
              }
            ],
            "description": "Warning type",
            "default": "default"
          },
          "warning_message": {
            "type": "string",
            "title": "Warning Message",
            "description": "Warning message",
            "default": "Something went wrong."
          },
          "warning_for_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDetailedStatus"
              }
            ],
            "description": "Detailed status"
          },
          "processing_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Processing Job Id",
            "description": "Processing job id"
          }
        },
        "type": "object",
        "title": "SnapshotWarning"
      },
      "SnapshotWarningType": {
        "type": "string",
        "enum": ["default"],
        "title": "SnapshotWarningType",
        "description": "An enumeration."
      },
      "SodexScinSnapshotProcessingStatus": {
        "type": "string",
        "enum": ["created", "committed", "running", "completed", "failed"],
        "title": "SodexScinSnapshotProcessingStatus",
        "description": "An enumeration."
      },
      "StoredLinesExportFileType": {
        "type": "string",
        "enum": [".csv", ".dxf"],
        "title": "StoredLinesExportFileType",
        "description": "An enumeration."
      },
      "StoredPoint": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredPoints point name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredPoints point description"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "StoredPoints point latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "StoredPoints point longitude"
          },
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "StoredPoints point easting"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "StoredPoints point northing"
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "StoredPoints point altitude"
          },
          "scanned_at": {
            "type": "string",
            "format": "date-time",
            "title": "Scanned At",
            "description": "StoredPoints point scanned timestamp"
          },
          "reference_terrain_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Reference Terrain Id",
            "description": "StoredPoints point tobe diff"
          },
          "reference_terrain_diff": {
            "type": "number",
            "title": "Reference Terrain Diff",
            "description": "StoredPoints point tobe diff"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "StoredPoints point created timestamp"
          }
        },
        "type": "object",
        "required": [
          "name",
          "latitude",
          "longitude",
          "easting",
          "northing",
          "altitude",
          "scanned_at"
        ],
        "title": "StoredPoint"
      },
      "StoredPointsExportFileType": {
        "type": "string",
        "enum": [".csv", ".dxf"],
        "title": "StoredPointsExportFileType",
        "description": "An enumeration."
      },
      "StripeBillingPeriod": {
        "type": "string",
        "enum": ["monthly", "yearly"],
        "title": "StripeBillingPeriod",
        "description": "An enumeration."
      },
      "StripeLanguage": {
        "type": "string",
        "enum": [
          "ar-AR",
          "da-DK",
          "de-DE",
          "en-US",
          "es-ES",
          "es-419",
          "fi-FI",
          "fr-FR",
          "he-IL",
          "it-IT",
          "ja-JP",
          "nl-NL",
          "pt-BR",
          "no-NO",
          "sv-SE"
        ],
        "title": "StripeLanguage",
        "description": "An enumeration."
      },
      "SubscriptionItem": {
        "properties": {
          "stripe_product_id": {
            "type": "string",
            "title": "Stripe Product Id",
            "description": "Stripe Product ID"
          },
          "product_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Product Id",
            "description": "Product ID"
          },
          "product": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Product"
              },
              {
                "type": "object"
              }
            ],
            "title": "Product",
            "description": "Product"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Quantity",
            "default": 1
          },
          "discount": {
            "type": "number",
            "title": "Discount",
            "description": "Discount in percent of the product price",
            "default": 0
          },
          "added_at": {
            "type": "string",
            "format": "date-time",
            "title": "Added At",
            "description": "Added at date when the product was added to the subscription"
          },
          "fulfilled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Fulfilled At",
            "description": "Fulfilled at date. Date when this product was added to the credited organization."
          },
          "added_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Added By User Id",
            "description": "User ID that added the product to the subscription"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount",
            "description": "Total amount of the item with discount but without vat"
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ],
            "title": "Price",
            "description": "Price of the product"
          },
          "order_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Order Id",
            "description": "Order ID of the order that added the product to the subscription"
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "title": "Paid At",
            "description": "Paid at date. Date when the product was paid."
          }
        },
        "type": "object",
        "required": [
          "stripe_product_id",
          "product_id",
          "product",
          "added_at",
          "added_by_user_id",
          "price"
        ],
        "title": "SubscriptionItem"
      },
      "SubscriptionModel": {
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionType"
              }
            ],
            "description": "The subscription type"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period Start",
            "description": "The current period start"
          },
          "current_period_end": {
            "type": "string",
            "format": "date-time",
            "title": "Current Period End",
            "description": "The current period end"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End",
            "description": "Whether the subscription is set to cancel at period end"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionStatus"
              }
            ],
            "description": "The subscription status"
          },
          "collection_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__CollectionMethod"
              }
            ],
            "description": "The collection method"
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "The currency"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/ProductModel"
            },
            "type": "array",
            "title": "Products",
            "description": "The products",
            "default": []
          },
          "latest_invoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceModel"
              }
            ],
            "title": "Latest Invoice",
            "description": "The latest invoice"
          },
          "invoices_amount_due": {
            "type": "number",
            "title": "Invoices Amount Due",
            "description": "The total amount due for all invoices",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "status",
          "collection_method",
          "currency",
          "latest_invoice"
        ],
        "title": "SubscriptionModel"
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "active",
          "canceled",
          "incomplete",
          "incomplete_expired",
          "past_due",
          "trialing",
          "unpaid",
          "pending"
        ],
        "title": "SubscriptionStatus",
        "description": "An enumeration."
      },
      "SubscriptionType": {
        "type": "string",
        "enum": ["cloud_license", "data_volume", "base_package"],
        "title": "SubscriptionType",
        "description": "An enumeration."
      },
      "SwitchUserLicense": {
        "properties": {
          "license_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLicenseTypes"
              }
            ],
            "description": "User license type to switch to",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["license_type"],
        "title": "SwitchUserLicense"
      },
      "SystemComesOnline": {
        "properties": {
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id"
          }
        },
        "type": "object",
        "required": ["organization_id", "system_id"],
        "title": "SystemComesOnline"
      },
      "SystemEventGroupEvent": {
        "properties": {
          "event_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Event Id",
            "description": "Event ID"
          },
          "system_ts": {
            "type": "string",
            "format": "date-time",
            "title": "System Ts",
            "description": "System timestamp"
          }
        },
        "type": "object",
        "required": ["event_id", "system_ts"],
        "title": "SystemEventGroupEvent"
      },
      "SystemEventSeverity": {
        "type": "string",
        "enum": ["a_critical", "b_error", "c_warning", "d_info", "e_debug"],
        "title": "SystemEventSeverity",
        "description": "An enumeration."
      },
      "SystemGoesOffline": {
        "properties": {
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id"
          }
        },
        "type": "object",
        "required": ["organization_id", "system_id"],
        "title": "SystemGoesOffline"
      },
      "SystemStartsScanning": {
        "properties": {
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id"
          }
        },
        "type": "object",
        "required": ["organization_id", "system_id"],
        "title": "SystemStartsScanning"
      },
      "SystemStopsScanning": {
        "properties": {
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id"
          }
        },
        "type": "object",
        "required": ["organization_id", "system_id"],
        "title": "SystemStopsScanning"
      },
      "SystemType": {
        "type": "string",
        "enum": [
          "sdx-compact",
          "sdx-4dvision",
          "sdx-4dvision-ct",
          "kteg-autodocu",
          "sdx-chain",
          "sdx-on-top",
          "sdx-4dvision-trimble"
        ],
        "title": "SystemType",
        "description": "An enumeration."
      },
      "TableFilter": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "icon": {
            "type": "string",
            "title": "Icon"
          },
          "check_by": {
            "type": "string",
            "title": "Check By",
            "description": "How the value should be checked"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "svg_icon": {
            "type": "string",
            "title": "Svg Icon"
          }
        },
        "type": "object",
        "title": "TableFilter"
      },
      "TaxIdType": {
        "type": "string",
        "enum": [
          "ad_nrt",
          "ae_trn",
          "ar_cuit",
          "au_abn",
          "au_arn",
          "bg_uic",
          "bo_tin",
          "br_cnpj",
          "br_cpf",
          "ca_bn",
          "ca_gst_hst",
          "ca_pst_bc",
          "ca_pst_mb",
          "ca_pst_sk",
          "ca_qst",
          "ch_vat",
          "cl_tin",
          "cn_tin",
          "co_nit",
          "cr_tin",
          "do_rcn",
          "ec_ruc",
          "eg_tin",
          "es_cif",
          "eu_oss_vat",
          "eu_vat",
          "gb_vat",
          "ge_vat",
          "hk_br",
          "hu_tin",
          "id_npwp",
          "il_vat",
          "in_gst",
          "is_vat",
          "jp_cn",
          "jp_rn",
          "jp_trn",
          "ke_pin",
          "kr_brn",
          "li_uid",
          "mx_rfc",
          "my_frp",
          "my_itn",
          "my_sst",
          "no_vat",
          "nz_gst",
          "pe_ruc",
          "ph_tin",
          "ro_tin",
          "rs_pib",
          "ru_inn",
          "ru_kpp",
          "sa_vat",
          "sg_gst",
          "sg_uen",
          "si_tin",
          "sv_nit",
          "th_vat",
          "tr_tin",
          "tw_vat",
          "ua_vat",
          "us_ein",
          "uy_ruc",
          "ve_rif",
          "vn_tin",
          "za_vat",
          "bh_vat",
          "ch_uid",
          "de_stn",
          "kz_bin",
          "ng_tin",
          "no_voec",
          "om_vat"
        ],
        "title": "TaxIdType",
        "description": "An enumeration."
      },
      "TelekomData": {
        "properties": {
          "object_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomDataObjectId"
              }
            ],
            "description": "Unique object id"
          },
          "civil_engineering_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomDataCivilEngineeringMethod"
              }
            ],
            "description": "Tiefbaumethoden (string). Nur bei \"Längstrasse\" & \"Hausanschlussleitung\" benötigt!\". Der Wert \"Unbekannt\" darf nur bei Rohdaten (postProcessingPending =true) übermittelt werden. Andernfalls muss immer einer der Werte übermittelt werden."
          },
          "ditch_width": {
            "type": "number",
            "title": "Ditch Width",
            "description": "Breite der Gräben/Grube in Meter (float)"
          },
          "installation_depth": {
            "type": "number",
            "title": "Installation Depth",
            "description": "Tiefe der Gräben/Grube in Meter (float)"
          },
          "length": {
            "type": "number",
            "title": "Length",
            "description": "Länge der Grube in Meter (float)"
          },
          "material": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PointObjectMaterials"
              },
              {
                "$ref": "#/components/schemas/LineObjectMaterials"
              }
            ],
            "title": "Material",
            "description": "Material"
          },
          "materials": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PointObjectMaterials"
                },
                {
                  "$ref": "#/components/schemas/LineObjectMaterials"
                }
              ]
            },
            "type": "array",
            "title": "Materials",
            "description": "Materials"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "UTC ISO Datetime when the point was captured"
          },
          "surface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomSurfaceType"
              }
            ],
            "description": "Oberflächentypen (string). Wird bei Linienobjekten mit constructionType \"Klassischer Tiefbau\", \"Mindertiefe\", \"Pflügen\" & \"Trenching\" sowie bei Punktobjekten mit der objectId \"Grube\" benötigt!\" Das Attribut darf nur bei Rohdaten (postProcessingPending = true) fehlen."
          },
          "comment": {
            "type": "string",
            "title": "Comment",
            "description": "Ergänzender Kommentar zum Objekt mit einer Maximallänge von 255 Zeichen."
          },
          "label": {
            "type": "string",
            "title": "Label",
            "description": "Bezeichnung des Punktobjektes (String) z.B. NVt = Bezeichnung des NVts (51V2041--> ASB V Nummer) oder Muffe = Bezeichnung der Muffe nach Plandaten (z.B. M10 (51R/101))"
          },
          "post_processing_pending": {
            "type": "boolean",
            "title": "Post Processing Pending",
            "description": "Post processing pending",
            "default": false
          },
          "route": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__telekom_data__GlobalPoint"
            },
            "type": "array",
            "title": "Route",
            "description": "Geojson coordinates"
          },
          "geometry_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomDataGeometryType"
              }
            ],
            "description": "Geometry type",
            "default": "LineString"
          }
        },
        "type": "object",
        "required": ["route"],
        "title": "TelekomData"
      },
      "TelekomDataCivilEngineeringMethod": {
        "type": "string",
        "enum": [
          "Minitrenching",
          "Klassischer Tiefbau",
          "Bodenverdrängung",
          "Leerrohr",
          "Mindertiefe",
          "Bestandsrohr",
          "Mikrotrenching",
          "Macrotrenching",
          "Pflügen",
          "Rohr auslegen",
          "Oberirdische Verlegung",
          "Spülbohrung",
          "Trenching",
          "Kabelzug",
          "Oberirdische Bauweise",
          "Bestandsrohr Dritte",
          "Unbekannt"
        ],
        "title": "TelekomDataCivilEngineeringMethod",
        "description": "Telekom data civil engineering method enum."
      },
      "TelekomDataGeometryType": {
        "type": "string",
        "enum": ["Point", "LineString"],
        "title": "TelekomDataGeometryType",
        "description": "An enumeration."
      },
      "TelekomDataObjectId": {
        "type": "string",
        "enum": [
          "Hauseinführung APL",
          "Hauseinführung",
          "Kugelmarker",
          "Muffe",
          "NVt",
          "Rohrunterbrechung",
          "Rohrende",
          "Längstrasse",
          "Hausanschlussleitung",
          "Gebäudekante",
          "Kabelschacht",
          "Grube"
        ],
        "title": "TelekomDataObjectId",
        "description": "Telekom data object id enum."
      },
      "TelekomFileClassification": {
        "type": "string",
        "enum": ["Längenmarke", "Beweissicherung", "Sonderabrechnung"],
        "title": "TelekomFileClassification",
        "description": "An enumeration."
      },
      "TelekomFileMeta": {
        "properties": {
          "classification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomFileClassification"
              }
            ],
            "description": "Classification of the file"
          },
          "media_id": {
            "type": "string",
            "title": "Media Id",
            "description": "Media ID of the file on telekom side"
          }
        },
        "type": "object",
        "title": "TelekomFileMeta"
      },
      "TelekomScanMeta": {
        "properties": {
          "telekom_scan_id": {
            "type": "string",
            "title": "Telekom Scan Id",
            "description": "Telekom scan id"
          },
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Latitude"
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Longitude"
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "Altitude"
          }
        },
        "type": "object",
        "required": ["latitude", "longitude", "altitude"],
        "title": "TelekomScanMeta"
      },
      "TelekomSurfaceType": {
        "type": "string",
        "enum": [
          "Ohne Oberbau",
          "Ungebundener Oberbau",
          "Pflaster / Platten",
          "Asphalt",
          "Großpflaster / Natursteinpl.",
          "Klein- / Mosaikpflaster",
          "Beton",
          "Gussasphalt",
          "Zementmörtelbett inkl. Oberbau"
        ],
        "title": "TelekomSurfaceType",
        "description": "An enumeration."
      },
      "TextDataset": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "dataset_name": {
            "type": "string",
            "title": "Dataset Name",
            "description": "Name of the dataset"
          },
          "user_name": {
            "type": "string",
            "title": "User Name",
            "description": "Name of the user"
          }
        },
        "type": "object",
        "required": ["dataset_name", "user_name"],
        "title": "TextDataset"
      },
      "TextImageLayer": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "layer_type": {
            "type": "string",
            "title": "Layer Type",
            "description": "Type of the layer"
          },
          "layer_name": {
            "type": "string",
            "title": "Layer Name",
            "description": "Name of the layer"
          }
        },
        "type": "object",
        "required": ["layer_type", "layer_name"],
        "title": "TextImageLayer"
      },
      "TextLayerData": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "layer_type": {
            "type": "string",
            "title": "Layer Type",
            "description": "Type of the layer"
          },
          "layer_name": {
            "type": "string",
            "title": "Layer Name",
            "description": "Name of the layer"
          }
        },
        "type": "object",
        "required": ["layer_type", "layer_name"],
        "title": "TextLayerData"
      },
      "TextOrthophoto": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "orthophoto_name": {
            "type": "string",
            "title": "Orthophoto Name",
            "description": "Name of the orthophoto"
          }
        },
        "type": "object",
        "required": ["orthophoto_name"],
        "title": "TextOrthophoto"
      },
      "TextPileGeofence": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "pile_name": {
            "type": "string",
            "title": "Pile Name",
            "description": "Name of the pile"
          },
          "storage_name": {
            "type": "string",
            "title": "Storage Name",
            "description": "Name of the storage"
          }
        },
        "type": "object",
        "required": ["pile_name", "storage_name"],
        "title": "TextPileGeofence"
      },
      "TextPotree": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "potree_name": {
            "type": "string",
            "title": "Potree Name",
            "description": "Name of the potree"
          }
        },
        "type": "object",
        "required": ["potree_name"],
        "title": "TextPotree"
      },
      "TextReferenceTerrain": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "reference_terrain_name": {
            "type": "string",
            "title": "Reference Terrain Name",
            "description": "Name of the reference terrain"
          }
        },
        "type": "object",
        "required": ["reference_terrain_name"],
        "title": "TextReferenceTerrain"
      },
      "TextSnapshotCreated": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "system_name": {
            "type": "string",
            "title": "System Name",
            "description": "Name of the system"
          }
        },
        "type": "object",
        "required": ["system_name"],
        "title": "TextSnapshotCreated"
      },
      "TextSnapshotManipulation": {
        "properties": {
          "project_name": {
            "type": "string",
            "title": "Project Name",
            "description": "Name of the project",
            "default": ""
          },
          "manipulation_type": {
            "type": "string",
            "title": "Manipulation Type",
            "description": "Type of the manipulation"
          },
          "user_name": {
            "type": "string",
            "title": "User Name",
            "description": "Name of the user"
          },
          "manipulation_name": {
            "type": "string",
            "title": "Manipulation Name",
            "description": "Name of the manipulation",
            "default": ""
          }
        },
        "type": "object",
        "required": ["manipulation_type", "user_name"],
        "title": "TextSnapshotManipulation"
      },
      "TextSystemComesOnline": {
        "properties": {
          "system_name": {
            "type": "string",
            "title": "System Name",
            "description": "Name of the system"
          }
        },
        "type": "object",
        "required": ["system_name"],
        "title": "TextSystemComesOnline"
      },
      "TextSystemGoesOffline": {
        "properties": {
          "system_name": {
            "type": "string",
            "title": "System Name",
            "description": "Name of the system"
          }
        },
        "type": "object",
        "required": ["system_name"],
        "title": "TextSystemGoesOffline"
      },
      "TextSystemStartsScanning": {
        "properties": {
          "system_name": {
            "type": "string",
            "title": "System Name",
            "description": "Name of the system"
          }
        },
        "type": "object",
        "required": ["system_name"],
        "title": "TextSystemStartsScanning"
      },
      "TextSystemStopsScanning": {
        "properties": {
          "system_name": {
            "type": "string",
            "title": "System Name",
            "description": "Name of the system"
          }
        },
        "type": "object",
        "required": ["system_name"],
        "title": "TextSystemStopsScanning"
      },
      "TokenInfo": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenTypes"
              }
            ],
            "default": "bearer"
          }
        },
        "type": "object",
        "required": ["access_token"],
        "title": "TokenInfo"
      },
      "TokenTypes": {
        "type": "string",
        "enum": ["bearer"],
        "title": "TokenTypes",
        "description": "An enumeration."
      },
      "Trafo": {
        "properties": {
          "depenbrok": {
            "type": "boolean",
            "title": "Depenbrok",
            "description": "depenbrok machine"
          }
        },
        "type": "object",
        "title": "Trafo"
      },
      "Transfomration2DHelmert": {
        "properties": {
          "offset_x": {
            "type": "number",
            "title": "Offset X"
          },
          "offset_y": {
            "type": "number",
            "title": "Offset Y"
          },
          "rotation": {
            "type": "number",
            "title": "Rotation"
          },
          "scale": {
            "type": "number",
            "title": "Scale"
          },
          "origin_x": {
            "type": "number",
            "title": "Origin X",
            "description": "Origin x"
          },
          "origin_y": {
            "type": "number",
            "title": "Origin Y",
            "description": "Origin y"
          }
        },
        "type": "object",
        "required": ["offset_x", "offset_y", "rotation", "scale"],
        "title": "Transfomration2DHelmert"
      },
      "Transformation7Parameter": {
        "properties": {
          "rotation_x": {
            "type": "number",
            "title": "Rotation X"
          },
          "rotation_y": {
            "type": "number",
            "title": "Rotation Y"
          },
          "rotation_z": {
            "type": "number",
            "title": "Rotation Z"
          },
          "offset_x": {
            "type": "number",
            "title": "Offset X"
          },
          "offset_y": {
            "type": "number",
            "title": "Offset Y"
          },
          "offset_z": {
            "type": "number",
            "title": "Offset Z"
          },
          "scale": {
            "type": "number",
            "title": "Scale"
          }
        },
        "type": "object",
        "required": [
          "rotation_x",
          "rotation_y",
          "rotation_z",
          "offset_x",
          "offset_y",
          "offset_z",
          "scale"
        ],
        "title": "Transformation7Parameter"
      },
      "TransformationAffine": {
        "properties": {
          "offset_x": {
            "type": "number",
            "title": "Offset X"
          },
          "offset_y": {
            "type": "number",
            "title": "Offset Y"
          },
          "rotation": {
            "type": "number",
            "title": "Rotation"
          },
          "scale_x": {
            "type": "number",
            "title": "Scale X"
          },
          "scale_y": {
            "type": "number",
            "title": "Scale Y"
          },
          "origin_x": {
            "type": "number",
            "title": "Origin X",
            "description": "Origin x"
          },
          "origin_y": {
            "type": "number",
            "title": "Origin Y",
            "description": "Origin y"
          }
        },
        "type": "object",
        "required": ["offset_x", "offset_y", "rotation", "scale_x", "scale_y"],
        "title": "TransformationAffine"
      },
      "TransformationMoldensky": {
        "properties": {
          "earth_radius": {
            "type": "number",
            "title": "Earth Radius"
          },
          "flattening": {
            "type": "number",
            "title": "Flattening"
          },
          "rotation_x": {
            "type": "number",
            "title": "Rotation X"
          },
          "rotation_y": {
            "type": "number",
            "title": "Rotation Y"
          },
          "rotation_z": {
            "type": "number",
            "title": "Rotation Z"
          },
          "offset_x": {
            "type": "number",
            "title": "Offset X"
          },
          "offset_y": {
            "type": "number",
            "title": "Offset Y"
          },
          "offset_z": {
            "type": "number",
            "title": "Offset Z"
          },
          "scale": {
            "type": "number",
            "title": "Scale"
          }
        },
        "type": "object",
        "required": [
          "earth_radius",
          "flattening",
          "rotation_x",
          "rotation_y",
          "rotation_z",
          "offset_x",
          "offset_y",
          "offset_z",
          "scale"
        ],
        "title": "TransformationMoldensky"
      },
      "TransformationObliqueStereographicMercator": {
        "properties": {
          "global_origin_latitude": {
            "type": "number",
            "title": "Global Origin Latitude"
          },
          "global_origin_longitude": {
            "type": "number",
            "title": "Global Origin Longitude"
          },
          "local_origin_easting": {
            "type": "number",
            "title": "Local Origin Easting"
          },
          "local_origin_northing": {
            "type": "number",
            "title": "Local Origin Northing"
          },
          "scale": {
            "type": "number",
            "title": "Scale"
          },
          "rotation": {
            "type": "number",
            "title": "Rotation"
          }
        },
        "type": "object",
        "required": [
          "global_origin_latitude",
          "global_origin_longitude",
          "local_origin_easting",
          "local_origin_northing",
          "scale",
          "rotation"
        ],
        "title": "TransformationObliqueStereographicMercator"
      },
      "TransformationOffset": {
        "properties": {
          "offset_x": {
            "type": "number",
            "title": "Offset X"
          },
          "offset_y": {
            "type": "number",
            "title": "Offset Y"
          }
        },
        "type": "object",
        "required": ["offset_x", "offset_y"],
        "title": "TransformationOffset"
      },
      "TransformationTransverseMercator": {
        "properties": {
          "global_origin_latitude": {
            "type": "number",
            "title": "Global Origin Latitude"
          },
          "global_origin_longitude": {
            "type": "number",
            "title": "Global Origin Longitude"
          },
          "local_origin_easting": {
            "type": "number",
            "title": "Local Origin Easting"
          },
          "local_origin_northing": {
            "type": "number",
            "title": "Local Origin Northing"
          },
          "scale": {
            "type": "number",
            "title": "Scale"
          }
        },
        "type": "object",
        "required": [
          "global_origin_latitude",
          "global_origin_longitude",
          "local_origin_easting",
          "local_origin_northing",
          "scale"
        ],
        "title": "TransformationTransverseMercator"
      },
      "Translation": {
        "type": "string",
        "enum": [
          "tag_translations",
          "phase_translations",
          "bucket_translations",
          "system_translations"
        ],
        "title": "Translation",
        "description": "An enumeration."
      },
      "TrialOrganizationSignup": {
        "properties": {
          "industry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Industry"
              }
            ],
            "description": "Industry of the organization",
            "default": "construction"
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Language"
              }
            ],
            "description": "Language of the organization",
            "default": "en-US"
          }
        },
        "type": "object",
        "title": "TrialOrganizationSignup"
      },
      "TrialUserSignup": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email of the user"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password of the user"
          },
          "firstname": {
            "type": "string",
            "title": "Firstname",
            "description": "First name of the user"
          },
          "lastname": {
            "type": "string",
            "title": "Lastname",
            "description": "Last name of the user"
          },
          "phone_number": {
            "type": "string",
            "title": "Phone Number",
            "description": "Phone number of the user"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username of the user",
            "default": ""
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseLanguages"
              }
            ],
            "description": "Language of the user",
            "default": "de"
          }
        },
        "type": "object",
        "required": ["email", "password", "firstname", "lastname"],
        "title": "TrialUserSignup"
      },
      "UhfChannelSpacing": {
        "type": "number",
        "enum": [6.25, 12.5, 20, 25],
        "title": "UhfChannelSpacing",
        "description": "An enumeration."
      },
      "UhfCommunicationProtocol": {
        "type": "integer",
        "enum": [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
          20, 21, 22, 23, 30, 31, 32, 33, 34
        ],
        "title": "UhfCommunicationProtocol",
        "description": "An enumeration."
      },
      "UhfFrequencyBands": {
        "type": "integer",
        "enum": [1, 2, 3],
        "title": "UhfFrequencyBands",
        "description": "An enumeration."
      },
      "Update2DPlan": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name",
            "nullable": true
          }
        },
        "type": "object",
        "title": "Update2DPlan"
      },
      "UpdateAiData": {
        "properties": {},
        "type": "object",
        "title": "UpdateAiData"
      },
      "UpdateApiConfig": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model",
            "nullable": true
          },
          "framework_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Framework Api",
            "description": "Framework api",
            "nullable": true
          },
          "framework_manager_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Framework Manager Api",
            "description": "Framework manager api",
            "nullable": true
          },
          "mm_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Mm Api",
            "description": "MM api",
            "nullable": true
          },
          "is_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Is Api",
            "description": "IS api",
            "nullable": true
          },
          "cam_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Cam Api",
            "description": "CAM api",
            "nullable": true
          },
          "pd_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Pd Api",
            "description": "Pandar api",
            "nullable": true
          },
          "op_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Op Api",
            "description": "OP api",
            "nullable": true
          },
          "db_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Db Api",
            "description": "DB api",
            "nullable": true
          },
          "cs_3d_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAPI"
              }
            ],
            "title": "Cs 3D Api",
            "description": "CS 3D api",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateApiConfig"
      },
      "UpdateApplications": {
        "properties": {
          "down": {
            "type": "boolean",
            "title": "Down",
            "description": "If the service is down",
            "nullable": true
          },
          "maintenance": {
            "type": "boolean",
            "title": "Maintenance",
            "description": "if the service is currently under applications",
            "nullable": true
          },
          "time_up_at": {
            "type": "string",
            "format": "date-time",
            "title": "Time Up At",
            "description": "When the application is back up - either from maintenance or downtime",
            "nullable": true
          },
          "latest_version": {
            "type": "string",
            "title": "Latest Version",
            "description": "Latest version of the application",
            "nullable": true
          },
          "min_version": {
            "type": "string",
            "title": "Min Version",
            "description": "Minimum version of the application required for functional user experience",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateApplications"
      },
      "UpdateAuthClient": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Redirect Uris",
            "description": "Redirect URIs",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["redirect_uris"],
        "title": "UpdateAuthClient"
      },
      "UpdateAutostartGeofence": {
        "properties": {
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Geofence points",
            "nullable": true
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of System IDs",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateAutostartGeofence"
      },
      "UpdateBucket": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Bucket name",
            "nullable": true
          },
          "width": {
            "type": "number",
            "title": "Width",
            "description": "Bucket width",
            "nullable": true
          },
          "length": {
            "type": "number",
            "title": "Length",
            "description": "Bucket length",
            "nullable": true
          },
          "angle_offset": {
            "type": "number",
            "title": "Angle Offset",
            "description": "Angle offset in radians",
            "nullable": true
          },
          "inverted": {
            "type": "boolean",
            "title": "Inverted",
            "description": "Inverted bucket",
            "nullable": true
          },
          "extraction_threshold": {
            "type": "number",
            "title": "Extraction Threshold",
            "description": "Extraction threshold",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateBucket"
      },
      "UpdateCable": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable type",
            "nullable": true
          },
          "cable_type_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Cable Type Id",
            "description": "Cable type ID",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCable"
      },
      "UpdateCableBlockArea": {
        "properties": {
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "List of points that define the area - coordinates in radians",
            "nullable": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable block area",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the cable block area",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "description": "If the cable block area is disabled",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCableBlockArea"
      },
      "UpdateCableLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the layer",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCableLayer"
      },
      "UpdateCablePoint": {
        "properties": {
          "latitude": {
            "type": "number",
            "title": "Latitude",
            "description": "Latitude of the cable point in radians",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "title": "Longitude",
            "description": "Longitude of the cable point in radians",
            "nullable": true
          },
          "altitude": {
            "type": "number",
            "title": "Altitude",
            "description": "Altitude of the cable point in cm",
            "nullable": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable point",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the cable point",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCablePoint"
      },
      "UpdateCableType": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the cable type",
            "nullable": true
          },
          "cores": {
            "type": "integer",
            "title": "Cores",
            "description": "Number of cores of the cable type",
            "nullable": true
          },
          "diameter": {
            "type": "number",
            "title": "Diameter",
            "description": "Diameter of the cable type",
            "nullable": true
          },
          "price_per_meter": {
            "type": "number",
            "title": "Price Per Meter",
            "description": "Price per meter of the cable type",
            "nullable": true
          },
          "weight_per_meter": {
            "type": "number",
            "title": "Weight Per Meter",
            "description": "Weight per meter of the cable type",
            "nullable": true
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the cable type",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "title": "Manufacturer",
            "description": "Manufacturer of the cable type",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCableType"
      },
      "UpdateCalendar": {
        "properties": {},
        "type": "object",
        "title": "UpdateCalendar"
      },
      "UpdateCalendarEvent": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the event",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the event",
            "nullable": true
          },
          "files": {
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "type": "array",
            "title": "Files",
            "description": "List of files associated with the calendar event - only user events can have files",
            "nullable": true
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the event",
            "nullable": true
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the event",
            "nullable": true
          },
          "day_event": {
            "type": "boolean",
            "title": "Day Event",
            "description": "Is it an event that takes the whole day",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCalendarEvent"
      },
      "UpdateCalendarSetting": {
        "properties": {
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ],
            "description": "Color of the calendar",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "title": "Visible",
            "description": "Visibility of the calendar",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCalendarSetting"
      },
      "UpdateCamConfig": {
        "properties": {
          "cam_id_snapshots": {
            "type": "integer",
            "title": "Cam Id Snapshots",
            "description": "camera to be used for snapshot creation"
          },
          "cam_id_ref_imgs": {
            "type": "integer",
            "title": "Cam Id Ref Imgs",
            "description": "camera to be used for reference image creation"
          },
          "cam_id_livestream": {
            "type": "integer",
            "title": "Cam Id Livestream",
            "description": "camera to be used for livestream creation"
          },
          "cam_id_op": {
            "type": "integer",
            "title": "Cam Id Op",
            "description": "camera to be used for orthophoto creation"
          }
        },
        "type": "object",
        "title": "UpdateCamConfig"
      },
      "UpdateCamera": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Camera name",
            "nullable": true
          },
          "cable_tracking": {
            "type": "boolean",
            "title": "Cable Tracking",
            "description": "Camera can be used for cable tracking",
            "nullable": true
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              }
            ],
            "description": "Camera position in the system",
            "nullable": true
          },
          "disabled": {
            "type": "boolean",
            "title": "Disabled",
            "description": "Camera is disabled",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCamera"
      },
      "UpdateCameraConfig": {
        "properties": {
          "component_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Component Id",
            "description": "Id of the component the parameters belong to",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "description of the camera config so it can be more easily found",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CamType"
              }
            ],
            "description": "type of the camera config",
            "nullable": true
          },
          "ts_offset": {
            "type": "number",
            "title": "Ts Offset",
            "description": "timestamp offset of the camera",
            "nullable": true
          },
          "rotate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rotate"
              }
            ],
            "description": "rotation of the camera which should be applied",
            "nullable": true
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "source of the camera stream (only ark)",
            "nullable": true
          },
          "intrinsic": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Intrinsic",
            "description": "intrinsic matrix of the camera",
            "nullable": true
          },
          "distortion": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Distortion",
            "description": "distortion coefficients of the camera",
            "nullable": true
          },
          "s3_calibration_imgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "S3 Calibration Imgs",
            "description": "list of calibration images in s3 bucket",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCameraConfig"
      },
      "UpdateCheckpoint": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Checkpoint Points name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Checkpoint Points description",
            "nullable": true
          },
          "target_height": {
            "type": "number",
            "title": "Target Height",
            "description": "Checkpoint Point target height",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCheckpoint"
      },
      "UpdateComponent": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the component",
            "nullable": true
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Serial number of the component",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ComponentTypes"
              }
            ],
            "description": "Type of the component",
            "nullable": true
          },
          "position": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CamPosition"
              },
              {
                "$ref": "#/components/schemas/LidarPosition"
              },
              {
                "$ref": "#/components/schemas/GNSSPosition"
              }
            ],
            "title": "Position",
            "description": "position of the camera on the excavator",
            "nullable": true
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "ID of the system the component belongs to",
            "nullable": true
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "position of the component on the system. Only used for cameras, lidars and GNSS",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateComponent"
      },
      "UpdateConfig": {
        "properties": {
          "arm_rot": {
            "type": "boolean",
            "title": "Arm Rot",
            "description": "specifies if the arm can roatate left and right"
          },
          "arm_2": {
            "type": "boolean",
            "title": "Arm 2",
            "description": "specifies if the excavator has a 2nd arm"
          }
        },
        "type": "object",
        "title": "UpdateConfig"
      },
      "UpdateCoordinateSystem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of coordinate system",
            "nullable": true
          },
          "configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CoordinateSystemCustom"
              },
              {
                "$ref": "#/components/schemas/CoordinateSystemCalibrationFile"
              },
              {
                "$ref": "#/components/schemas/CoordinateSystemControlPoints"
              }
            ],
            "title": "Configuration",
            "description": "Configuration of coordinate system",
            "nullable": true
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project id",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCoordinateSystem"
      },
      "UpdateCorrectionservice": {
        "properties": {
          "ntrip_server": {
            "type": "string",
            "title": "Ntrip Server",
            "description": "NTRIP server address",
            "nullable": true
          },
          "ntrip_port": {
            "type": "integer",
            "title": "Ntrip Port",
            "description": "NTRIP server port",
            "nullable": true
          },
          "ntrip_mountpoint": {
            "type": "string",
            "title": "Ntrip Mountpoint",
            "description": "NTRIP mountpoint",
            "nullable": true
          },
          "ntrip_username": {
            "type": "string",
            "title": "Ntrip Username",
            "description": "NTRIP username",
            "nullable": true
          },
          "ntrip_password": {
            "type": "string",
            "title": "Ntrip Password",
            "description": "NTRIP password",
            "nullable": true
          },
          "correction_datum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalDatum"
              }
            ],
            "description": "Datum of the data to be corrected",
            "nullable": true
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID the correction service belongs to",
            "nullable": true
          },
          "validated": {
            "type": "boolean",
            "title": "Validated",
            "description": "Whether the correctionservice has been validated",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCorrectionservice"
      },
      "UpdateCrossSectionProject": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "nullable": true
          },
          "point_1": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 1",
            "nullable": true
          },
          "point_2": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 2",
            "nullable": true
          },
          "cross_sections": {
            "items": {
              "$ref": "#/components/schemas/BaseCrossSection"
            },
            "type": "array",
            "title": "Cross Sections",
            "nullable": true
          },
          "color": {
            "type": "string",
            "title": "Color",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCrossSectionProject"
      },
      "UpdateCsMeta": {
        "properties": {
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Version of the csmeta",
            "nullable": true
          },
          "coord_sys": {
            "type": "string",
            "title": "Coord Sys",
            "description": "Coordinate system type of the cs meta",
            "nullable": true
          },
          "global_origin_set": {
            "type": "boolean",
            "title": "Global Origin Set",
            "description": "Whether the global origin is set",
            "nullable": true
          },
          "ref_origin_set": {
            "type": "boolean",
            "title": "Ref Origin Set",
            "description": "Whether the reference origin is set",
            "nullable": true
          },
          "global_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Global Origin",
            "description": "Global origin location in radians and cm for altitude",
            "nullable": true
          },
          "ref_origin": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Ref Origin",
            "description": "Reference origin location in radians and cm for altitude",
            "nullable": true
          },
          "chunk_voxel_size": {
            "type": "number",
            "title": "Chunk Voxel Size",
            "description": "Chunk voxel size in cm",
            "nullable": true
          },
          "n_params_float32": {
            "type": "integer",
            "title": "N Params Float32",
            "description": "Number of float32 parameters",
            "nullable": true
          },
          "n_params_uint16": {
            "type": "integer",
            "title": "N Params Uint16",
            "description": "Number of uint16 parameters",
            "nullable": true
          },
          "n_params_uint8": {
            "type": "integer",
            "title": "N Params Uint8",
            "description": "Number of uint8 parameters",
            "nullable": true
          },
          "created_ts": {
            "type": "number",
            "title": "Created Ts",
            "description": "Timestamp of creation",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCsMeta"
      },
      "UpdateCsParam": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "description of the machine",
            "nullable": true
          },
          "synced_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateSyncedData"
              }
            ],
            "title": "Synced Data",
            "description": "synced data parameters of the machine",
            "nullable": true
          },
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__csparams__schemas__UpdateGeneral"
              }
            ],
            "title": "General",
            "description": "general parameters of the machine",
            "nullable": true
          },
          "cam_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateCamConfig"
              }
            ],
            "title": "Cam Config",
            "description": "camera configuration of the machine",
            "nullable": true
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateFilter"
              }
            ],
            "title": "Filter",
            "description": "filter parameters of the machine",
            "nullable": true
          },
          "orthophoto": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__csparams__schemas__UpdateOrthophoto"
              }
            ],
            "title": "Orthophoto",
            "description": "orthophoto parameters of the machine",
            "nullable": true
          },
          "img_capturing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateImgCapturing"
              }
            ],
            "title": "Img Capturing",
            "description": "image capturing parameters of the machine",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateCsParam"
      },
      "UpdateDashboard": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Dashboard name",
            "nullable": true
          },
          "grid_data": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Grid Data",
            "description": "Updated Grid data",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateDashboard"
      },
      "UpdateDataCapturing": {
        "properties": {
          "tag": {
            "type": "string",
            "title": "Tag",
            "description": "Tag of the datacapturing",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateDataCapturing"
      },
      "UpdateDataProjectSnapshot": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created",
            "nullable": true
          },
          "grid_size": {
            "type": "number",
            "maximum": 100,
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the snapshot in cm",
            "nullable": true
          },
          "tag_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Tag Ids",
            "description": "Tag IDs of the snapshot",
            "nullable": true
          },
          "pg_viscan_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotViscanData"
              }
            ],
            "title": "Pg Viscan Data",
            "description": "Viscan data",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateDataProjectSnapshot"
      },
      "UpdateDataset": {
        "properties": {},
        "type": "object",
        "title": "UpdateDataset"
      },
      "UpdateDjiDock": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description",
            "nullable": true
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Serial Number",
            "nullable": true
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID",
            "nullable": true
          },
          "create_snapshots": {
            "type": "boolean",
            "title": "Create Snapshots",
            "description": "If snapshots should be created automatically with images from this dock",
            "nullable": true
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "If pins should be created automatically with images from this dock",
            "nullable": true
          },
          "grid_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid Size in cm of snapshots created by this dock",
            "nullable": true
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point Insertion Option for snapshots created by this dock",
            "nullable": true
          },
          "drone_sn": {
            "type": "string",
            "title": "Drone Sn",
            "description": "Drone Serial Number",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateDjiDock"
      },
      "UpdateExportSettings": {
        "properties": {
          "filetype": {
            "type": "string",
            "title": "Filetype",
            "description": "Filetype of the export"
          },
          "meshed": {
            "type": "boolean",
            "title": "Meshed",
            "description": "Meshed export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export"
          }
        },
        "type": "object",
        "title": "UpdateExportSettings"
      },
      "UpdateExtensionPack": {
        "properties": {
          "capacity": {
            "type": "number",
            "title": "Capacity",
            "description": "Capacity of the extension pack e.g. 1000 (MB)",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateExtensionPack"
      },
      "UpdateExtraction": {
        "properties": {
          "disable_extraction": {
            "type": "boolean",
            "title": "Disable Extraction",
            "description": "disables the extraction of the machine"
          },
          "disable_extraction_cuboids": {
            "type": "boolean",
            "title": "Disable Extraction Cuboids",
            "description": "disables the extraction of the machine cuboids"
          },
          "point_4": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 4",
            "description": "point 4 of the extraction of the machine itself in cm"
          },
          "point_5": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 5",
            "description": "point 5 of the extraction of the machine itself in cm"
          },
          "point_6": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 6",
            "description": "point 6 of the extraction of the machine itself in cm"
          },
          "point_7": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 7",
            "description": "point 7 of the extraction of the machine itself in cm"
          },
          "point_8": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Point 8",
            "description": "point 8 of the extraction of the machine itself in cm"
          }
        },
        "type": "object",
        "title": "UpdateExtraction"
      },
      "UpdateFeature": {
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Feature"
              }
            ],
            "description": "Feature name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Feature description",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Feature enabled",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateFeature"
      },
      "UpdateFile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Is the file active",
            "nullable": true
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Move file into another project",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the file",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateFile"
      },
      "UpdateFiles": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update time of the file"
          },
          "blurhash": {
            "type": "string",
            "title": "Blurhash",
            "description": "Blurhash of the file"
          }
        },
        "type": "object",
        "title": "UpdateFiles"
      },
      "UpdateFiletype": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the filetype",
            "nullable": true
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the filetype",
            "nullable": true
          },
          "snapshot_download": {
            "type": "boolean",
            "title": "Snapshot Download",
            "description": "Does the filetype have snapshot download",
            "nullable": true
          },
          "mesh": {
            "type": "boolean",
            "title": "Mesh",
            "description": "Does the filetype have mesh",
            "nullable": true
          },
          "resolution": {
            "type": "boolean",
            "title": "Resolution",
            "description": "Does the filetype have resolution",
            "nullable": true
          },
          "points": {
            "type": "boolean",
            "title": "Points",
            "description": "Does the filetype have points",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateFiletype"
      },
      "UpdateFilter": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the filter is active"
          }
        },
        "type": "object",
        "title": "UpdateFilter"
      },
      "UpdateFolder": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the folder",
            "nullable": true
          },
          "parent_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Id",
            "description": "ID of the parent folder -> is none for root folders",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateFolder"
      },
      "UpdateGcpSet": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the gcp_set",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the gcp_set",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateGcpSet"
      },
      "UpdateGeofence": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Geofence name",
            "nullable": true
          },
          "coords": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Coords",
            "description": "Geofence coordinates",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateGeofence"
      },
      "UpdateImgCapturing": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the image capturing is active"
          },
          "frequency": {
            "type": "number",
            "title": "Frequency",
            "description": "frequency of the image capturing in seconds"
          }
        },
        "type": "object",
        "title": "UpdateImgCapturing"
      },
      "UpdateInfomapfilter": {
        "properties": {
          "time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateTimeConfig"
              }
            ],
            "title": "Time",
            "description": "Time config of the filter",
            "nullable": true
          },
          "time_filter": {
            "type": "boolean",
            "title": "Time Filter",
            "description": "If time filter is activated or not",
            "nullable": true
          },
          "geofence_filter": {
            "type": "boolean",
            "title": "Geofence Filter",
            "description": "If geofence filter is activated or not",
            "nullable": true
          },
          "geofence_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Geofence Ids",
            "description": "List of geofence IDs of the filter",
            "nullable": true
          },
          "system_filter": {
            "type": "boolean",
            "title": "System Filter",
            "description": "If system filter is activated or not",
            "nullable": true
          },
          "system_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "System Ids",
            "description": "List of system IDs of the filter",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateInfomapfilter"
      },
      "UpdateInfomapfilterGeofence": {
        "properties": {
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id",
            "description": "Geofence ID to add to the filter"
          }
        },
        "type": "object",
        "required": ["geofence_id"],
        "title": "UpdateInfomapfilterGeofence"
      },
      "UpdateIsParam": {
        "properties": {
          "general": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__isparams__schemas__UpdateGeneral"
              }
            ],
            "title": "General",
            "description": "General parameters",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the parameters",
            "nullable": true
          },
          "leica": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateLeica"
              }
            ],
            "title": "Leica",
            "description": "Leica parameters",
            "nullable": true
          },
          "mts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateMts"
              }
            ],
            "title": "Mts",
            "description": "MTS parameters",
            "nullable": true
          },
          "topcon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateTopcon"
              }
            ],
            "title": "Topcon",
            "description": "Topcon parameters",
            "nullable": true
          },
          "volvo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateVolvo"
              }
            ],
            "title": "Volvo",
            "description": "Volvo parameters",
            "nullable": true
          },
          "sp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateSeptentrio"
              }
            ],
            "title": "Sp",
            "description": "Septentrio parameters",
            "nullable": true
          },
          "trafo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Trafo"
              }
            ],
            "title": "Trafo",
            "description": "Trafo parameters",
            "nullable": true
          },
          "ai_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtificialintelligenceData"
              }
            ],
            "title": "Ai Data",
            "description": "AI data parameters",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateIsParam"
      },
      "UpdateLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the layer",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateLayer"
      },
      "UpdateLayerData": {
        "properties": {
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Layer data processed",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateLayerData"
      },
      "UpdateLeica": {
        "properties": {
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the udp-stream"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the udp-stream"
          },
          "udp_broke": {
            "type": "boolean",
            "title": "Udp Broke",
            "description": "if the udp-stream is broken or not"
          },
          "eth_interface": {
            "type": "string",
            "title": "Eth Interface",
            "description": "ethernet interface if raw socket is used"
          }
        },
        "type": "object",
        "title": "UpdateLeica"
      },
      "UpdateLicense": {
        "properties": {},
        "type": "object",
        "title": "UpdateLicense"
      },
      "UpdateLicenseConfigs": {
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Features"
              }
            ],
            "description": "Feature key",
            "nullable": true
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureCategory"
              }
            ],
            "description": "Feature category",
            "nullable": true
          },
          "disabled_for": {
            "items": {
              "$ref": "#/components/schemas/LicenseTypes"
            },
            "type": "array",
            "description": "For which license types it is disabled",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateLicenseConfigs"
      },
      "UpdateLidarConfig": {
        "properties": {
          "modelname": {
            "type": "string",
            "title": "Modelname",
            "description": "Name of the model",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "IP address of the lidar",
            "nullable": true
          },
          "dest_ip_address": {
            "type": "string",
            "title": "Dest Ip Address",
            "description": "Destination ip of the udp stream",
            "nullable": true
          },
          "control_port": {
            "type": "integer",
            "title": "Control Port",
            "description": "port for the TCP socket of the lidar",
            "nullable": true
          },
          "stream_port": {
            "type": "integer",
            "title": "Stream Port",
            "description": "port for the UDP stream of the lidar",
            "nullable": true
          },
          "spin_rate": {
            "type": "integer",
            "title": "Spin Rate",
            "description": "spin rate of the lidar",
            "nullable": true
          },
          "return_mode": {
            "type": "integer",
            "title": "Return Mode",
            "description": "return mode of the lidar",
            "nullable": true
          },
          "start_angle": {
            "type": "integer",
            "title": "Start Angle",
            "description": "start angle of the lidar",
            "nullable": true
          },
          "end_angle": {
            "type": "integer",
            "title": "End Angle",
            "description": "end angle of the lidar",
            "nullable": true
          },
          "ptp": {
            "type": "boolean",
            "title": "Ptp",
            "description": "\tspecifies if ptp is used or not (ntp)",
            "nullable": true
          },
          "s3_lidar2imu": {
            "type": "string",
            "title": "S3 Lidar2Imu",
            "description": "S3 path to the lidar2imu calibration file",
            "nullable": true
          },
          "s3_lidar2cam": {
            "type": "string",
            "title": "S3 Lidar2Cam",
            "description": "S3 path to the lidar2cam calibration file",
            "nullable": true
          },
          "component_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Component Id",
            "description": "MongoDB unique ID of the component this lidar belongs to",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateLidarConfig"
      },
      "UpdateLine": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the line",
            "nullable": true
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the line",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "UpdateLine"
      },
      "UpdateMachineConfig": {
        "properties": {
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateConfig"
              }
            ],
            "title": "Config",
            "description": "Config of the machine",
            "nullable": true
          },
          "measurements": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__systemconfiguration__machineconfigs__schemas__UpdateMeasurements"
              }
            ],
            "title": "Measurements",
            "description": "Measurements of the machine",
            "nullable": true
          },
          "extraction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateExtraction"
              }
            ],
            "title": "Extraction",
            "description": "Extraction of the machine",
            "nullable": true
          },
          "sensors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateSensors"
              }
            ],
            "title": "Sensors",
            "description": "Sensors of the machine",
            "nullable": true
          },
          "offsets": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateOffsets"
              }
            ],
            "title": "Offsets",
            "description": "Offsets of the machine",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the machine",
            "nullable": true
          },
          "modelname": {
            "type": "string",
            "title": "Modelname",
            "description": "BaseModel name of the machine",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateMachineConfig"
      },
      "UpdateManagerConfig": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model",
            "nullable": true
          },
          "ka_max": {
            "type": "integer",
            "title": "Ka Max",
            "description": "max time without a keep alive signal to be alive in seconds",
            "nullable": true
          },
          "ka_check_interval": {
            "type": "integer",
            "title": "Ka Check Interval",
            "description": "interval to check for keep alive signals in seconds",
            "nullable": true
          },
          "pwr_interface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PowerInterface"
              }
            ],
            "description": "can or gpio for switching sensor power on/off",
            "nullable": true
          },
          "can_baudrate": {
            "type": "integer",
            "title": "Can Baudrate",
            "description": "baudrate of the can interface",
            "nullable": true
          },
          "can_module_fan": {
            "type": "integer",
            "title": "Can Module Fan",
            "description": "can module fan",
            "nullable": true
          },
          "can_module_sensor": {
            "type": "integer",
            "title": "Can Module Sensor",
            "description": "can module sensor",
            "nullable": true
          },
          "can_module_tablet": {
            "type": "integer",
            "title": "Can Module Tablet",
            "description": "can module tablet",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateManagerConfig"
      },
      "UpdateManipulation": {
        "properties": {
          "fitting_point": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FittingPoint"
              }
            ],
            "title": "Fitting Point",
            "description": "Fitting point of the manipulation"
          }
        },
        "type": "object",
        "title": "UpdateManipulation"
      },
      "UpdateMeOrganization": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the organization",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "title": "Phone",
            "description": "Phone number of the organization",
            "nullable": true
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "title": "Invoice Email",
            "description": "Email address for invoices",
            "nullable": true
          },
          "logo_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Logo Id",
            "description": "ID of the file that contains the logo of the organization",
            "nullable": true
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Language of the organization",
            "nullable": true
          },
          "telekom_api_key": {
            "type": "string",
            "title": "Telekom Api Key",
            "description": "API key for the telekom API",
            "nullable": true
          },
          "reseller_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateResellerInfo"
              }
            ],
            "title": "Reseller Info",
            "description": "Reseller information of the organization",
            "nullable": true
          },
          "reseller_service_emails": {
            "items": {
              "type": "string",
              "format": "email"
            },
            "type": "array",
            "title": "Reseller Service Emails",
            "description": "Reseller service emails of the organization. Get notified if processing fails.",
            "nullable": true
          },
          "stripe_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateStripeInfo"
              }
            ],
            "title": "Stripe Info",
            "description": "Stripe information of the organization",
            "nullable": true
          },
          "default_photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Default photogrammetry provider for the organization",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateMeOrganization"
      },
      "UpdateMeasurement": {
        "properties": {
          "points": {
            "items": {
              "$ref": "#/components/schemas/MeasurementPoint"
            },
            "type": "array",
            "minItems": 1,
            "title": "Points",
            "description": "List of measurement points",
            "nullable": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name",
            "nullable": true
          },
          "telekom_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementTelekomData"
              }
            ],
            "title": "Telekom Data",
            "description": "Telekom Data",
            "nullable": true
          },
          "area_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementAreaData"
              }
            ],
            "title": "Area Data",
            "description": "Area Data. Only set if measurement type is AREA",
            "nullable": true
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color",
            "nullable": true
          },
          "deprecated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deprecated At",
            "description": "Deprecated at",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateMeasurement"
      },
      "UpdateMeasurementLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name",
            "nullable": true
          },
          "parent_layer_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Layer Id",
            "description": "Parent Layer ID",
            "nullable": true
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID",
            "nullable": true
          },
          "telekom_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementTelekomData"
              }
            ],
            "title": "Telekom Data",
            "description": "Telekom Data",
            "nullable": true
          },
          "default_color": {
            "type": "string",
            "title": "Default Color",
            "description": "Default color",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateMeasurementLayer"
      },
      "UpdateMergedLayer": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the merged_layer",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateMergedLayer"
      },
      "UpdateMts": {
        "properties": {
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the MTS-System"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the MTS-System"
          }
        },
        "type": "object",
        "title": "UpdateMts"
      },
      "UpdateNotification": {
        "properties": {
          "cleared": {
            "type": "boolean",
            "title": "Cleared",
            "description": "Whether the notification has been cleared by the user",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateNotification"
      },
      "UpdateNotificationSettings": {
        "properties": {
          "cloud_notificiations_enabled": {
            "type": "boolean",
            "title": "Cloud Notificiations Enabled",
            "description": "Are cloud notifications enabled",
            "default": true,
            "nullable": true
          },
          "email_notifications_enabled": {
            "type": "boolean",
            "title": "Email Notifications Enabled",
            "description": "Are email notifications enabled",
            "default": false,
            "nullable": true
          },
          "enabled_cloud_notifications": {
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "array",
            "description": "List of enabled notifications",
            "nullable": true
          },
          "enabled_email_notifications": {
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "type": "array",
            "description": "List of enabled notifications for email",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateNotificationSettings"
      },
      "UpdateOffsets": {
        "properties": {
          "boom_offset": {
            "type": "number",
            "title": "Boom Offset",
            "description": "boom offset of the machine"
          },
          "boom2_offset": {
            "type": "number",
            "title": "Boom2 Offset",
            "description": "boom 2 offset of the machine"
          },
          "stick_offset": {
            "type": "number",
            "title": "Stick Offset",
            "description": "stick offset of the machine"
          },
          "psi": {
            "type": "number",
            "title": "Psi",
            "description": "beate"
          },
          "beta": {
            "type": "number",
            "title": "Beta",
            "description": "beate"
          },
          "epsilon": {
            "type": "number",
            "title": "Epsilon",
            "description": "beate"
          },
          "zeta": {
            "type": "number",
            "title": "Zeta",
            "description": "beate"
          },
          "chi": {
            "type": "number",
            "title": "Chi",
            "description": "beate"
          },
          "omega": {
            "type": "number",
            "title": "Omega",
            "description": "beate"
          }
        },
        "type": "object",
        "title": "UpdateOffsets"
      },
      "UpdateOrganization": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the organization",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "title": "Phone",
            "description": "Phone number of the organization",
            "nullable": true
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "title": "Invoice Email",
            "description": "Email address for invoices",
            "nullable": true
          },
          "logo_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Logo Id",
            "description": "ID of the file that contains the logo of the organization",
            "nullable": true
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Language of the organization",
            "nullable": true
          },
          "telekom_api_key": {
            "type": "string",
            "title": "Telekom Api Key",
            "description": "API key for the telekom API",
            "nullable": true
          },
          "reseller_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateResellerInfo"
              }
            ],
            "title": "Reseller Info",
            "description": "Reseller information of the organization",
            "nullable": true
          },
          "reseller_service_emails": {
            "items": {
              "type": "string",
              "format": "email"
            },
            "type": "array",
            "title": "Reseller Service Emails",
            "description": "Reseller service emails of the organization. Get notified if processing fails.",
            "nullable": true
          },
          "stripe_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateStripeInfo"
              }
            ],
            "title": "Stripe Info",
            "description": "Stripe information of the organization",
            "nullable": true
          },
          "default_photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Default photogrammetry provider for the organization",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "title": "Customer Id",
            "description": "Internal Customer ID of the organization",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateOrganization"
      },
      "UpdateOrganizationStripeSettings": {
        "properties": {
          "default_collection_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__CollectionMethod"
              }
            ],
            "description": "Default collection method of the organization"
          }
        },
        "type": "object",
        "title": "UpdateOrganizationStripeSettings"
      },
      "UpdatePendingJob": {
        "properties": {
          "cleared": {
            "type": "boolean",
            "title": "Cleared",
            "description": "Whether the job has been cleared",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdatePendingJob"
      },
      "UpdatePhase": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the phase",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the phase",
            "nullable": true
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the phase",
            "nullable": true
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Due date of the phase",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdatePhase"
      },
      "UpdatePhaseOrder": {
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "New index of the phase in the state - important for order",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["index"],
        "title": "UpdatePhaseOrder"
      },
      "UpdatePhaseState": {
        "properties": {
          "state_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "State Id",
            "description": "ID of the state the phase belongs to",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["state_id"],
        "title": "UpdatePhaseState"
      },
      "UpdatePile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the pile",
            "nullable": true
          },
          "tag_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tag Id",
            "description": "ID of the soil (deprecated name tag) associated to the pile",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdatePile"
      },
      "UpdatePileGeofence": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the geofence",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdatePileGeofence"
      },
      "UpdatePin": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the pin",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the pin",
            "nullable": true
          },
          "tag_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tag Id",
            "description": "Tag id linked to the pin",
            "nullable": true
          },
          "telekom_classification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomFileClassification"
              }
            ],
            "description": "Telekom classification of the pin",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdatePin"
      },
      "UpdatePointCloud": {
        "properties": {
          "object_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Object Id",
            "description": "MongoDB unique ID of this snapshot or file"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__potrees__constants__PotreePointCloudType"
              }
            ],
            "description": "Type of the point cloud"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the point cloud"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatePointCloudConfig"
              }
            ],
            "title": "Config",
            "description": "Config of the point cloud"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "Pointcloud object id - only given if existing is updated"
          },
          "urls": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateURLS"
              }
            ],
            "title": "Urls",
            "description": "URLs of the point cloud files"
          }
        },
        "type": "object",
        "required": ["object_id", "type", "name", "config"],
        "title": "UpdatePointCloud"
      },
      "UpdatePointCloudConfig": {
        "properties": {
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "MongoDB unique ID of the soild"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "MongoDB unique ID of the phase"
          },
          "geofence_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Geofence Id",
            "description": "MongoDB unique ID of the geofence"
          },
          "resolution": {
            "type": "number",
            "maximum": 50,
            "minimum": 1,
            "title": "Resolution",
            "description": "Resolution of the point cloud in cm"
          },
          "min_points": {
            "type": "boolean",
            "title": "Min Points",
            "description": "Min point of the point cloud",
            "default": false
          },
          "max_points": {
            "type": "boolean",
            "title": "Max Points",
            "description": "Max point of the point cloud",
            "default": false
          },
          "colorized_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColorizedOption"
              }
            ],
            "description": "Colorized option of the point cloud"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the point cloud"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the point cloud"
          },
          "manipulated": {
            "type": "boolean",
            "title": "Manipulated",
            "description": "Manipulated of the point cloud",
            "default": false
          },
          "export_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighResLayerExportOptions"
              }
            ],
            "description": "Export option of the point cloud"
          }
        },
        "type": "object",
        "title": "UpdatePointCloudConfig"
      },
      "UpdatePointLink": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the point link",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdatePointLink"
      },
      "UpdatePotree": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the potree",
            "nullable": true
          },
          "point_clouds": {
            "items": {
              "$ref": "#/components/schemas/UpdatePointCloud"
            },
            "type": "array",
            "title": "Point Clouds",
            "description": "Point clouds of the potree",
            "nullable": true
          },
          "measurements": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__potree__schemas__UpdateMeasurements"
            },
            "type": "array",
            "title": "Measurements",
            "description": "Measurements of the potree",
            "nullable": true
          },
          "manipulations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateManipulation"
              }
            ],
            "title": "Manipulations",
            "description": "Manipulations of the potree",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdatePotree"
      },
      "UpdateProcessingFiles": {
        "properties": {
          "orthophoto_tiff_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Orthophoto Tiff File Id",
            "description": "New orthophoto tiff file id",
            "nullable": true
          },
          "source_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Source File Id",
            "description": "New s3 key of source file",
            "nullable": true
          },
          "report_pdf_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Report Pdf File Id",
            "description": "New report pdf file id",
            "nullable": true
          },
          "mesh_bundle_zip_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Mesh Bundle Zip Id",
            "description": "New mesh bundle zip file id",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateProcessingFiles"
      },
      "UpdateProfile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Profile name",
            "nullable": true
          },
          "machine_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineType"
              }
            ],
            "description": "Machine type",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Profile description",
            "nullable": true
          },
          "bearing_offset": {
            "type": "number",
            "title": "Bearing Offset",
            "description": "Bearing offset",
            "nullable": true
          },
          "min_y": {
            "type": "number",
            "title": "Min Y",
            "description": "Minimum y coordinate of the extraction",
            "nullable": true
          },
          "max_y": {
            "type": "number",
            "title": "Max Y",
            "description": "Maximum y coordinate of the extraction",
            "nullable": true
          },
          "min_x": {
            "type": "number",
            "title": "Min X",
            "description": "Minimum x coordinate of the extraction",
            "nullable": true
          },
          "max_x": {
            "type": "number",
            "title": "Max X",
            "description": "Maximum x coordinate of the extraction",
            "nullable": true
          },
          "cameras": {
            "items": {
              "$ref": "#/components/schemas/UpdateCamera"
            },
            "type": "array",
            "title": "Cameras",
            "description": "List of cameras",
            "nullable": true
          },
          "machine_color": {
            "type": "string",
            "title": "Machine Color",
            "description": "Machine color",
            "nullable": true
          },
          "inner_extraction_area": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtractionArea"
              }
            ],
            "title": "Inner Extraction Area",
            "description": "Inner extraction area",
            "nullable": true
          },
          "limit_thresholds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitThresholds"
              }
            ],
            "title": "Limit Thresholds",
            "description": "Limit thresholds",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateProfile"
      },
      "UpdateProject": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project",
            "nullable": true
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the project",
            "nullable": true
          },
          "location_name": {
            "type": "string",
            "title": "Location Name",
            "description": "Name of the location of the project",
            "nullable": true
          },
          "snapshot_imgs": {
            "type": "integer",
            "title": "Snapshot Imgs",
            "description": "Number of images per snapshot",
            "nullable": true
          },
          "snapshot_period": {
            "type": "integer",
            "exclusiveMinimum":  true,
            "title": "Snapshot Period",
            "description": "Period of the snapshots in seconds",
            "nullable": true
          },
          "ref_img_frequency": {
            "type": "integer",
            "title": "Ref Img Frequency",
            "description": "Frequency of the reference images in seconds",
            "nullable": true
          },
          "ref_img_distance": {
            "type": "number",
            "title": "Ref Img Distance",
            "description": "Distance of the systems reference images in between them",
            "nullable": true
          },
          "export_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateExportSettings"
              }
            ],
            "title": "Export Settings",
            "description": "Export settings of the project",
            "nullable": true
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the project",
            "nullable": true
          },
          "deadline_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deadline At",
            "description": "Deadline date of the project",
            "nullable": true
          },
          "group": {
            "type": "string",
            "title": "Group",
            "description": "Group of the project",
            "nullable": true
          },
          "project_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Folder Id",
            "description": "ID of the project folder",
            "nullable": true
          },
          "grid_size": {
            "type": "number",
            "minimum": 1,
            "title": "Grid Size",
            "description": "Grid size of the project in cm. Only for cloud only projects updateable",
            "nullable": true
          },
          "project_currency": {
            "type": "string",
            "title": "Project Currency",
            "description": "Currency of the project",
            "nullable": true
          },
          "snapshots_processing_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ViscanProcessingModeType"
              }
            ],
            "description": "Processing type of the snapshots. Required for sdx-cloud projects.",
            "nullable": true
          },
          "telekom_sma": {
            "type": "string",
            "title": "Telekom Sma",
            "description": "Telekom SMA of the project. To use this the telekom_api_key must be set in the organization and telekom_transfer enabled.",
            "nullable": true
          },
          "telekom_transfer": {
            "type": "boolean",
            "title": "Telekom Transfer",
            "description": "Wether the project is automatic telekom transfer enabled or not",
            "nullable": true
          },
          "telekom_project": {
            "type": "boolean",
            "title": "Telekom Project",
            "description": "Wether the project is a telekom project or not. If yes, telekom layers can be created and automatic measurements are created in the telekom layer.",
            "nullable": true
          },
          "create_scin_snapshots": {
            "type": "boolean",
            "title": "Create Scin Snapshots",
            "description": "Wether the project creates scin snapshots automatically or not. If disabled a pending job will be created instead.",
            "nullable": true
          },
          "automatic_telekom_pin_transfer": {
            "type": "boolean",
            "title": "Automatic Telekom Pin Transfer",
            "description": "Wether to automatically transfers the telekom pins to the telekom portal",
            "nullable": true
          },
          "photogrammetry_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry provider for the project",
            "nullable": true
          },
          "default_snapshot_sdx_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultSnapshotSdxProcessingSettings"
              }
            ],
            "title": "Default Snapshot Sdx Processing Settings",
            "description": "Default processing settings for the project",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateProject"
      },
      "UpdateProjectFolder": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Folder name",
            "nullable": true
          },
          "parent_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Id",
            "description": "Parent folder ID - if root is true, this field is ignored",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateProjectFolder"
      },
      "UpdateProjectTag": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the project_tag",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the project_tag",
            "nullable": true
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "Color",
            "description": "Color of the project_tag",
            "nullable": true
          },
          "user_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "User Ids",
            "description": "List of user IDs that have access to the project_tag",
            "nullable": true
          },
          "snapshot_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Snapshot Ids",
            "description": "List of snapshot IDs that have access to the project_tag",
            "nullable": true
          },
          "orthophoto_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Orthophoto Ids",
            "description": "List of orthophoto IDs that have access to the project_tag",
            "nullable": true
          },
          "snapshot_comparison_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Snapshot Comparison Ids",
            "description": "List of snapshot_comparison IDs that have access to the project_tag",
            "nullable": true
          },
          "dji_dock_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Dji Dock Ids",
            "description": "List of DJI dock IDs that have access to the project_tag",
            "nullable": true
          },
          "measurement_layer_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Measurement Layer Ids",
            "description": "List of measurement layer IDs that have access to the project_tag",
            "nullable": true
          },
          "plan2d_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Plan2D Ids",
            "description": "List of Plan2D IDs that have access to the project_tag",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateProjectTag"
      },
      "UpdateProjectUserNotificationTypeSetting": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether the notification type is enabled",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectNotificationType"
              }
            ],
            "description": "The type of notification to update",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["enabled", "type"],
        "title": "UpdateProjectUserNotificationTypeSetting"
      },
      "UpdateQuicktask": {
        "properties": {
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__core__constants__State"
              }
            ],
            "description": "State of the quicktask",
            "nullable": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the quicktask",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the quicktask",
            "nullable": true
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Due date of the quicktask",
            "nullable": true
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Note of the quicktask",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateQuicktask"
      },
      "UpdateRelease": {
        "properties": {
          "app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReleaseApp"
              }
            ],
            "description": "Release app",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReleaseTypes"
              }
            ],
            "description": "Release type",
            "nullable": true
          },
          "build_date": {
            "type": "string",
            "format": "date-time",
            "title": "Build Date",
            "description": "Build date of the release",
            "nullable": true
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the release",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateRelease"
      },
      "UpdateReleaseConfig": {
        "properties": {
          "hmi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "HMI release"
          },
          "manager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "Manager release"
          },
          "framework": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "Framework release"
          },
          "jetson_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "SDX Jetson API release"
          },
          "framework_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Releases"
              }
            ],
            "description": "SDX Framework API release"
          }
        },
        "type": "object",
        "title": "UpdateReleaseConfig"
      },
      "UpdateResellerInfo": {
        "properties": {
          "support_email": {
            "type": "string",
            "title": "Support Email",
            "description": "Support email of the reseller",
            "default": "support@sodex-innovations.com"
          },
          "support_phone": {
            "type": "string",
            "title": "Support Phone",
            "description": "Support phone of the reseller"
          },
          "support_infotext": {
            "type": "string",
            "title": "Support Infotext",
            "description": "Support infotext of the reseller"
          }
        },
        "type": "object",
        "title": "UpdateResellerInfo"
      },
      "UpdateScanBlockArea": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Scan block area name",
            "nullable": true
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Scan block area geofence",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Scan block area activated (not the same as deleted in other models)",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateScanBlockArea"
      },
      "UpdateScanTask": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Scan task name",
            "nullable": true
          },
          "note": {
            "type": "string",
            "title": "Note",
            "description": "Scan task note",
            "nullable": true
          },
          "force_finish": {
            "type": "boolean",
            "title": "Force Finish",
            "description": "Force finish scan task",
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__scantasks__constants__State"
              }
            ],
            "description": "Scan task state",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Scan task description",
            "nullable": true
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Due At",
            "description": "Scan task due date",
            "nullable": true
          },
          "geofence": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Geofence",
            "description": "Scan task geofence",
            "nullable": true
          },
          "assigned_to_system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Assigned To System Id",
            "description": "System id of the system that the scan task is assigned to",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateScanTask"
      },
      "UpdateScopePermissions": {
        "properties": {
          "reseller_access": {
            "type": "boolean",
            "title": "Reseller Access",
            "description": "If the user has reseller access",
            "default": false
          }
        },
        "type": "object",
        "title": "UpdateScopePermissions"
      },
      "UpdateSdxCloudSnapshotCreated": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Date the snapshot was created"
          },
          "grid_size": {
            "type": "number",
            "title": "Grid Size",
            "description": "Grid size of the project in cm"
          }
        },
        "type": "object",
        "title": "UpdateSdxCloudSnapshotCreated"
      },
      "UpdateSegment": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the segment",
            "nullable": true
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the segment",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSegment"
      },
      "UpdateSensors": {
        "properties": {
          "mount_config": {
            "type": "string",
            "title": "Mount Config",
            "description": "mount configuration of the lidar"
          },
          "lidar1_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lidar1 Loc",
            "description": "location of the lidar 1 in cm"
          },
          "cam1_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam1 Loc",
            "description": "location of the camera 1 in cm"
          },
          "cam2_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam2 Loc",
            "description": "location of the camera 2 in cm"
          },
          "gps_loc": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Gps Loc",
            "description": "location of the gps in cm"
          },
          "lidar1_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lidar1 Orient",
            "description": "orientation of the lidar 1 in cm"
          },
          "cam1_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam1 Orient",
            "description": "orientation of the camera 1 in cm"
          },
          "cam2_orient": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Cam2 Orient",
            "description": "orientation of the camera 2 in cm"
          }
        },
        "type": "object",
        "title": "UpdateSensors"
      },
      "UpdateSeptentrio": {
        "properties": {
          "lever_arm": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Lever Arm",
            "description": "lever arm of the septentrio"
          },
          "heading_offset": {
            "type": "number",
            "title": "Heading Offset",
            "description": "heading offset of the septentrio"
          },
          "pitch_offset": {
            "type": "number",
            "title": "Pitch Offset",
            "description": "pitch offset of the septentrio"
          },
          "s3_log": {
            "type": "string",
            "title": "S3 Log",
            "description": "s3 key of the septentrio log"
          },
          "imu_orientation": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Imu Orientation",
            "description": "orientation of the imu"
          },
          "ip_address": {
            "type": "string",
            "title": "Ip Address",
            "description": "ip address of the septentrio"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "description": "port of the septentrio"
          }
        },
        "type": "object",
        "title": "UpdateSeptentrio"
      },
      "UpdateSharing": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the shared resource",
            "nullable": true
          },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "URL which is shared",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "Expiration date",
            "nullable": true
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Plain text password for the shared resource",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSharing"
      },
      "UpdateSnapshotComparison": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the snapshot_comparison",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the snapshot_comparison",
            "nullable": true
          },
          "gradient": {
            "items": {
              "$ref": "#/components/schemas/SnapshotComparisonGradientStage"
            },
            "type": "array",
            "title": "Gradient",
            "description": "List of gradient parts to apply to the comparison",
            "nullable": true
          },
          "ref_snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Ref Snapshot Id",
            "description": "Reference snapshot ID",
            "nullable": true
          },
          "compare_snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Compare Snapshot Id",
            "description": "Compare snapshot ID",
            "nullable": true
          },
          "include_geofences": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Include Geofences",
            "description": "List of geofences to include in the comparison",
            "nullable": true
          },
          "exclude_geofences": {
            "items": {
              "items": {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Exclude Geofences",
            "description": "List of geofences to exclude in the comparison",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSnapshotComparison"
      },
      "UpdateSnapshotManipulation": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Manipulation name",
            "nullable": true
          },
          "disabled_snapshot_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Disabled Snapshot Ids",
            "description": "List of snapshot IDs that are disabled for this manipulation",
            "nullable": true
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the manipulation only if continuous. If continuous is true and end_at is None,             the manipulation will be continuous until the end of the project",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Manipulation description",
            "nullable": true
          },
          "polylines": {
            "items": {
              "$ref": "#/components/schemas/Polyline"
            },
            "type": "array",
            "title": "Polylines",
            "description": "List of polylines that define the area to delete. Order, points and radius must be the same. Can only update name and description.",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSnapshotManipulation"
      },
      "UpdateSnapshotNote": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the note",
            "nullable": true
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Content of the note",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSnapshotNote"
      },
      "UpdateSnapshotV2": {
        "properties": {},
        "type": "object",
        "title": "UpdateSnapshotV2"
      },
      "UpdateSoil": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the soil",
            "example": "Soil 1",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "title": "Cost",
            "description": "Cost of the soil",
            "example": 100,
            "nullable": true
          },
          "remove": {
            "type": "boolean",
            "title": "Remove",
            "description": "Soil is being removed",
            "example": true,
            "nullable": true
          },
          "loosening_factor": {
            "type": "number",
            "title": "Loosening Factor",
            "description": "Loosening factor",
            "example": 0.5,
            "nullable": true
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density",
            "example": 1.5,
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSoil"
      },
      "UpdateState": {
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__states__constants__State"
              }
            ],
            "description": "Name of the state",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "title": "Default",
            "description": "Default state of the project",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateState"
      },
      "UpdateStorage": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the storage",
            "nullable": true
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the storage in degree",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateStorage"
      },
      "UpdateStoredLine": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredLine name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredLine description",
            "nullable": true
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/Point"
            },
            "type": "array",
            "title": "Points",
            "description": "StoredLine points",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateStoredLine"
      },
      "UpdateStoredPoints": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "StoredPoints name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "StoredPoints description",
            "nullable": true
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/StoredPoint"
            },
            "type": "array",
            "title": "Points",
            "description": "StoredPoints points",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateStoredPoints"
      },
      "UpdateStripeInfo": {
        "properties": {
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__SupportedCurrency"
              }
            ],
            "description": "Currency of the organization it pays its bills in"
          }
        },
        "type": "object",
        "title": "UpdateStripeInfo"
      },
      "UpdateSubscription": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the subscription",
            "nullable": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the subscription",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSubscription"
      },
      "UpdateSyncedData": {
        "properties": {
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "length of a synced data pkg in ms"
          },
          "points_per_lidar_data": {
            "type": "integer",
            "title": "Points Per Lidar Data",
            "description": "number of points per lidar data pkg"
          }
        },
        "type": "object",
        "title": "UpdateSyncedData"
      },
      "UpdateSystem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the system"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the system"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID  of the customer the system belongs to"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Sodex Serial number of the system"
          },
          "sensor_api": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SensorApi"
              }
            ],
            "description": "Assistance system of the system"
          },
          "invoice_date": {
            "type": "string",
            "format": "date-time",
            "title": "Invoice Date",
            "description": "Invoice date of the system"
          },
          "invoice_number": {
            "type": "string",
            "title": "Invoice Number",
            "description": "Invoice number of the system"
          },
          "release_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateReleaseConfig"
              }
            ],
            "title": "Release Config",
            "description": "Release configuration of the system"
          },
          "retrofit_at": {
            "type": "string",
            "format": "date-time",
            "title": "Retrofit At",
            "description": "Retrofit date of the system"
          },
          "quiky_id": {
            "type": "string",
            "title": "Quiky Id",
            "description": "Quiky ID of the system"
          },
          "mounted": {
            "type": "boolean",
            "title": "Mounted",
            "description": "If the system is mounted or not"
          },
          "sodex_name": {
            "type": "string",
            "title": "Sodex Name",
            "description": "Sodex name of the system"
          },
          "correction_service_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Correction Service Id",
            "description": "Correction service ID of the system"
          },
          "uhf_configuration_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Uhf Configuration Id",
            "description": "Default UHF configuration ID of the system"
          },
          "assembled_at": {
            "type": "string",
            "format": "date-time",
            "title": "Assembled At",
            "description": "Production date of the system - when it got assembled"
          },
          "license_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "License Id",
            "description": "License IDs of the system"
          },
          "allow_internet_overconsumption": {
            "type": "boolean",
            "title": "Allow Internet Overconsumption",
            "description": "If the system is allowed to consume more internet than the license allows. Allowed consumption defined in extension packs."
          }
        },
        "type": "object",
        "title": "UpdateSystem"
      },
      "UpdateSystemMeta": {
        "properties": {
          "escpp_config": {
            "type": "object",
            "title": "Escpp Config",
            "description": "configuration of es cpp",
            "nullable": true
          },
          "hdcpp_config": {
            "type": "object",
            "title": "Hdcpp Config",
            "description": "configuration of hd cpp",
            "nullable": true
          },
          "iscpp_config": {
            "type": "object",
            "title": "Iscpp Config",
            "description": "configuration of is cpp",
            "nullable": true
          },
          "sdx_chain_config": {
            "type": "object",
            "title": "Sdx Chain Config",
            "description": "SDX Chain configuration",
            "nullable": true
          },
          "camcpp_config": {
            "type": "object",
            "title": "Camcpp Config",
            "description": "configuration of cam cpp",
            "nullable": true
          },
          "campy_config": {
            "type": "object",
            "title": "Campy Config",
            "description": "configuration of cam py",
            "nullable": true
          },
          "transformer_config": {
            "type": "object",
            "title": "Transformer Config",
            "description": "configuration of transformer",
            "nullable": true
          },
          "api_config": {
            "type": "object",
            "title": "Api Config",
            "description": "configuration of api",
            "nullable": true
          },
          "hub_config": {
            "type": "object",
            "title": "Hub Config",
            "description": "configuration of hub",
            "nullable": true
          },
          "ispy_config": {
            "type": "object",
            "title": "Ispy Config",
            "description": "configuration of is py",
            "nullable": true
          },
          "framework_config": {
            "type": "object",
            "title": "Framework Config",
            "description": "configuration of framework",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSystemMeta"
      },
      "UpdateSystemStatus": {
        "properties": {
          "active_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Active Project Id",
            "description": "MongoDB unique ID of the active project",
            "nullable": true
          },
          "is_online": {
            "type": "boolean",
            "title": "Is Online",
            "description": "Is the system online",
            "default": false,
            "nullable": true
          },
          "cam_online": {
            "type": "boolean",
            "title": "Cam Online",
            "description": "Is the camera online",
            "default": false,
            "nullable": true
          },
          "pandar_online": {
            "type": "boolean",
            "title": "Pandar Online",
            "description": "Is the pandar online",
            "default": false,
            "nullable": true
          },
          "scanning": {
            "type": "boolean",
            "title": "Scanning",
            "description": "Is the system scanning",
            "default": false,
            "nullable": true
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the system",
            "nullable": true
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the system",
            "nullable": true
          },
          "bearing_info": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Bearing Info",
            "description": "Bearing info of the system. Current x and y position of the excavator as well as the current bearing offset.",
            "nullable": true
          },
          "profile_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Profile Id",
            "description": "MongoDB unique ID of the profile this system is using",
            "nullable": true
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "MongoDB unique ID of the soil this system is using",
            "nullable": true
          },
          "bucket_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Bucket Id",
            "description": "MongoDB unique ID of the bucket this system is using",
            "nullable": true
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "MongoDB unique ID of the phase this system is using",
            "nullable": true
          },
          "scan_task_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Scan Task Id",
            "description": "MongoDB unique ID of the scan task this system is using",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSystemStatus"
      },
      "UpdateSystemSubscription": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Amount",
            "description": "Amount of the subscription",
            "nullable": true
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the subscription",
            "nullable": true
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the subscription",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateSystemSubscription"
      },
      "UpdateTable": {
        "properties": {
          "headers": {
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "type": "array",
            "title": "Headers",
            "description": "Headers of the table",
            "nullable": true
          },
          "extra_headers": {
            "items": {
              "$ref": "#/components/schemas/Header"
            },
            "type": "array",
            "title": "Extra Headers",
            "description": "Extra headers of the table",
            "nullable": true
          },
          "table_filters": {
            "items": {
              "$ref": "#/components/schemas/TableFilter"
            },
            "type": "array",
            "title": "Table Filters",
            "description": "Filters of the table",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateTable"
      },
      "UpdateTimeConfig": {
        "properties": {
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start time of the filter"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End time of the filter"
          }
        },
        "type": "object",
        "title": "UpdateTimeConfig"
      },
      "UpdateTobeTerrain": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the terrain",
            "nullable": true
          },
          "gradient": {
            "items": {
              "$ref": "#/components/schemas/src__v2__sodexcloud__projects__referenceterrains__schemas__UpdateGradient"
            },
            "type": "array",
            "title": "Gradient",
            "description": "Gradient of the terrain",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateTobeTerrain"
      },
      "UpdateTopcon": {
        "properties": {
          "portname": {
            "type": "string",
            "title": "Portname",
            "description": "name of the serial port the topcon data is received"
          },
          "baudrate": {
            "type": "integer",
            "title": "Baudrate",
            "description": "baudrate of the serial interface"
          }
        },
        "type": "object",
        "title": "UpdateTopcon"
      },
      "UpdateTranslation": {
        "properties": {},
        "type": "object",
        "title": "UpdateTranslation"
      },
      "UpdateURLS": {
        "properties": {
          "octree": {
            "type": "string",
            "title": "Octree",
            "description": "URL of the bin file"
          },
          "metadata": {
            "type": "string",
            "title": "Metadata",
            "description": "URL of the metadata file"
          },
          "hierarchy": {
            "type": "string",
            "title": "Hierarchy",
            "description": "URL of the hierarchy file"
          }
        },
        "type": "object",
        "required": ["octree", "metadata", "hierarchy"],
        "title": "UpdateURLS"
      },
      "UpdateUhfConfiguration": {
        "properties": {
          "frequency_band": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfFrequencyBands"
              }
            ],
            "description": "Frequency band",
            "nullable": true
          },
          "frequency": {
            "type": "number",
            "maximum": 928,
            "minimum": 403,
            "title": "Frequency",
            "description": "Frequency in MHz",
            "nullable": true
          },
          "channel_spacing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfChannelSpacing"
              }
            ],
            "description": "Channel spacing in kHz",
            "nullable": true
          },
          "communication_protocol": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UhfCommunicationProtocol"
              }
            ],
            "description": "Communication protocol",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateUhfConfiguration"
      },
      "UpdateUser": {
        "properties": {
          "credentials": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateUserCredentials"
              }
            ],
            "title": "Credentials",
            "description": "Credentials of the user",
            "nullable": true
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username of the user",
            "nullable": true
          },
          "image_txt": {
            "type": "boolean",
            "title": "Image Txt",
            "description": "If the user has image description in the snapshot download enabled",
            "nullable": true
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseLanguages"
              }
            ],
            "description": "Language of the user",
            "nullable": true
          },
          "timezone_offset": {
            "type": "number",
            "title": "Timezone Offset",
            "description": "Timezone offset of the user to utc in hours (e.g. 1.5)",
            "nullable": true
          },
          "disable_project_map": {
            "type": "boolean",
            "title": "Disable Project Map",
            "description": "If the user has the project map disabled",
            "nullable": true
          },
          "organization_admin": {
            "type": "boolean",
            "title": "Organization Admin",
            "description": "If the user is an organization admin",
            "nullable": true
          },
          "system_admin": {
            "type": "boolean",
            "title": "System Admin",
            "description": "If the user is a system admin",
            "nullable": true
          },
          "processing_admin": {
            "type": "boolean",
            "title": "Processing Admin",
            "description": "If the user is a processing admin and can purchase processing packages.",
            "nullable": true
          },
          "license_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "License Id",
            "description": "License ID of the user",
            "nullable": true
          },
          "can_use_scin_app": {
            "type": "boolean",
            "title": "Can Use Scin App",
            "description": "Whether the user can use the SCIN app",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateUser"
      },
      "UpdateUserCredentials": {
        "properties": {
          "firstname": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Firstname",
            "description": "Legal first name of the user"
          },
          "lastname": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Lastname",
            "description": "Legal last name of the user"
          },
          "phone_number": {
            "type": "string",
            "maxLength": 50,
            "title": "Phone Number",
            "description": "Phone number of the user"
          }
        },
        "type": "object",
        "title": "UpdateUserCredentials"
      },
      "UpdateUserPassword": {
        "properties": {
          "new_password": {
            "type": "string",
            "maxLength": 225,
            "minLength": 4,
            "title": "New Password",
            "description": "Plain password of the user"
          }
        },
        "type": "object",
        "required": ["new_password"],
        "title": "UpdateUserPassword"
      },
      "UpdateUserSetting": {
        "properties": {
          "snapshot_selection_tooltip_disabled": {
            "type": "boolean",
            "title": "Snapshot Selection Tooltip Disabled",
            "description": "Never show snapshot selection tooltip",
            "nullable": true
          },
          "information_disabled": {
            "type": "boolean",
            "title": "Information Disabled",
            "description": "Never show information",
            "nullable": true
          },
          "tooltips_disabled": {
            "type": "boolean",
            "title": "Tooltips Disabled",
            "description": "Never show tooltips",
            "nullable": true
          },
          "convertion_system": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConvertionSystem"
              }
            ],
            "description": "Convertion system of the user",
            "nullable": true
          },
          "imperial_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImperialSettings"
              }
            ],
            "description": "Imperial settings of the user. Not relevant if convertion_system is metric",
            "nullable": true
          },
          "date_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateFormat"
              }
            ],
            "description": "Date format of the user",
            "nullable": true
          },
          "number_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumberFormat"
              }
            ],
            "description": "Number format of the user",
            "nullable": true
          },
          "time_zone": {
            "type": "string",
            "title": "Time Zone",
            "description": "Time zone of the user",
            "nullable": true
          },
          "show_manipulated_snapshot_by_default": {
            "type": "boolean",
            "title": "Show Manipulated Snapshot By Default",
            "description": "Show manipulated snapshot by default",
            "nullable": true
          },
          "potree_camera_control": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PotreeCameraControl"
              }
            ],
            "description": "Camera control of the user",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateUserSetting"
      },
      "UpdateVisConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the visualization",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "title": "Visible",
            "description": "Is this visualization visible",
            "nullable": true
          },
          "meshed": {
            "type": "boolean",
            "title": "Meshed",
            "description": "Is this visualization meshed",
            "nullable": true
          },
          "gradient": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Gradient",
            "description": "Gradient of the visualization",
            "nullable": true
          },
          "offset": {
            "type": "number",
            "title": "Offset",
            "description": "Offset of the visualization",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateVisConfig"
      },
      "UpdateVolvo": {
        "properties": {
          "can_interface": {
            "type": "string",
            "title": "Can Interface",
            "description": "can interface"
          },
          "baudrate": {
            "type": "integer",
            "title": "Baudrate",
            "description": "baudrate of the can interface"
          }
        },
        "type": "object",
        "title": "UpdateVolvo"
      },
      "UploadSource": {
        "type": "string",
        "enum": [
          "explorer",
          "pins",
          "cable_points",
          "stored_points",
          "stored_lines",
          "checkpoints",
          "drone_harmony",
          "dji_flighthub",
          "viscan",
          "system",
          "timelapse",
          "scin"
        ],
        "title": "UploadSource",
        "description": "An enumeration."
      },
      "UserBaseLanguages": {
        "type": "string",
        "enum": ["de", "en", "fr", "nl"],
        "title": "UserBaseLanguages",
        "description": "An enumeration."
      },
      "UserCredentials": {
        "properties": {
          "firstname": {
            "type": "string",
            "title": "Firstname",
            "description": "Legal first name of the user"
          },
          "lastname": {
            "type": "string",
            "title": "Lastname",
            "description": "Legal last name of the user"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "Email address of the user"
          },
          "phone_number": {
            "type": "string",
            "maxLength": 50,
            "title": "Phone Number",
            "description": "Phone number of the user",
            "default": ""
          }
        },
        "type": "object",
        "required": ["firstname", "lastname", "email"],
        "title": "UserCredentials"
      },
      "UserLicenseTypes": {
        "type": "string",
        "enum": ["guest", "cloud_base", "vidoc", "inactive"],
        "title": "UserLicenseTypes",
        "description": "An enumeration."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VisOrigin": {
        "type": "string",
        "enum": ["snapshot", "file"],
        "title": "VisOrigin",
        "description": "An enumeration."
      },
      "ViscanCoordinateSystem": {
        "properties": {
          "ident": {
            "type": "string",
            "title": "Ident",
            "description": "Identifier of horizontal/stand-alone coordinate system."
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Short human readable title. (To be used in UI.)"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Human readable description. (To be used in UI.)"
          },
          "coordinateType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoordinateSystemType"
              }
            ],
            "description": "Type of coordinate system."
          },
          "epsgCode": {
            "type": "integer",
            "title": "Epsgcode",
            "description": "EPSG code of horizontal/stand-alone system, if available."
          },
          "grid": {
            "type": "string",
            "title": "Grid",
            "description": "Name of horizontal grid coordinate system is based on, if applicable."
          },
          "areaOfValidity": {
            "type": "string",
            "title": "Areaofvalidity",
            "description": "WKT description of area of validity of the horizontal/stand-alone coordinate system. (Allowed types are 'FULLGLOBE', 'POLYGON', 'MULTIPOLYGON'.)"
          },
          "verticalCSs": {
            "items": {
              "$ref": "#/components/schemas/ViscanVerticalCoordinateSystem"
            },
            "type": "array",
            "title": "Verticalcss",
            "description": "Available vertical systems/height systems available for horizontal coordinate system."
          }
        },
        "type": "object",
        "required": [
          "ident",
          "title",
          "description",
          "coordinateType",
          "areaOfValidity"
        ],
        "title": "ViscanCoordinateSystem"
      },
      "ViscanProcessingModeType": {
        "type": "string",
        "enum": [
          "default",
          "autoSelect",
          "droneFlight",
          "handheldCapturing",
          "handheldCapturingSmallOrthoPhoto"
        ],
        "title": "ViscanProcessingModeType",
        "description": "An enumeration."
      },
      "ViscanProcessingStatus": {
        "type": "string",
        "enum": [
          "created",
          "committed",
          "preprocessing",
          "preprocessed",
          "queued",
          "running",
          "finished",
          "crashed",
          "cancelled",
          "cancellationPending",
          "finishing",
          "outdated",
          "deleting"
        ],
        "title": "ViscanProcessingStatus",
        "description": "An enumeration."
      },
      "ViscanVerticalCoordinateSystem": {
        "properties": {
          "ident": {
            "type": "string",
            "title": "Ident",
            "description": "Identifier of vertical coordinate system."
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Short human readable title. (To be used in UI.)"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Human readable description. (To be used in UI.)"
          },
          "epsgCode": {
            "type": "integer",
            "title": "Epsgcode",
            "description": "EPSG code of vertical coordinate system, if available."
          },
          "grid": {
            "type": "string",
            "title": "Grid",
            "description": "Name of vertical grid coordinate system is based on, if applicable."
          },
          "areaOfValidity": {
            "type": "string",
            "title": "Areaofvalidity",
            "description": "WKT description of area of validity of the vertical coordinate system. (Allowed types are 'FULLGLOBE', 'POLYGON', 'MULTIPOLYGON'.)"
          }
        },
        "type": "object",
        "required": ["ident", "title", "description", "areaOfValidity"],
        "title": "ViscanVerticalCoordinateSystem"
      },
      "VolumeCalculationOption": {
        "type": "string",
        "enum": ["default", "min", "max", "avg", "height"],
        "title": "VolumeCalculationOption",
        "description": "An enumeration."
      },
      "VolumeDisplay": {
        "type": "string",
        "enum": ["negative", "positive", "both"],
        "title": "VolumeDisplay",
        "description": "An enumeration."
      },
      "ZipFile": {
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Buckets"
              }
            ],
            "description": "bucket name",
            "default": "ASSETS"
          },
          "path_zip": {
            "type": "string",
            "title": "Path Zip",
            "description": "path in zip file. e.g. 'folder/file.txt' - 'file.txt"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "s3 key to download the file on the bucket"
          }
        },
        "type": "object",
        "required": ["path_zip", "s3_key"],
        "title": "ZipFile"
      },
      "cloudtools__mongodb__collections__management__license__constants__SystemLicenseTypes": {
        "type": "string",
        "enum": [
          "machine_license_base",
          "machine_license_plus",
          "machine_license_ultimate",
          "machine_kteg_base",
          "demo",
          "linevis"
        ],
        "title": "SystemLicenseTypes",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__management__systems__model__OutSystemV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the system"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "license_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "License Id",
            "description": "License ID"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "Serial number"
          },
          "sensor_api": {
            "type": "string",
            "title": "Sensor Api",
            "description": "Sensor API"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["name", "organization_id", "license_id", "id"],
        "title": "OutSystemV2"
      },
      "cloudtools__mongodb__collections__organizations__constants__CollectionMethod": {
        "type": "string",
        "enum": ["charge_automatically", "send_invoice"],
        "title": "CollectionMethod",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__organizations__constants__SupportedCurrency": {
        "type": "string",
        "enum": ["eur", "usd", "gbp", "chf"],
        "title": "SupportedCurrency",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__organizations__model__OrganizationMetaSettings": {
        "properties": {
          "project_creation_disabled": {
            "type": "boolean",
            "title": "Project Creation Disabled",
            "description": "If true, the organization can not create projects",
            "default": false
          },
          "lockdown_after_trial": {
            "type": "boolean",
            "title": "Lockdown After Trial",
            "description": "Lockdown date of the organization",
            "default": false
          },
          "trial_banner_link": {
            "type": "string",
            "title": "Trial Banner Link",
            "description": "Trial banner link to e.g. schedule a call."
          },
          "in_lockdown": {
            "type": "boolean",
            "title": "In Lockdown",
            "description": "If true, the organization is in lockdown",
            "default": false
          }
        },
        "type": "object",
        "title": "OrganizationMetaSettings"
      },
      "cloudtools__mongodb__collections__organizations__model__ResellerInfo": {
        "properties": {
          "support_email": {
            "type": "string",
            "title": "Support Email",
            "description": "Support email of the reseller",
            "default": "support@sodex-innovations.com"
          },
          "support_phone": {
            "type": "string",
            "title": "Support Phone",
            "description": "Support phone of the reseller"
          },
          "support_infotext": {
            "type": "string",
            "title": "Support Infotext",
            "description": "Support infotext of the reseller"
          },
          "trial_days": {
            "type": "integer",
            "title": "Trial Days",
            "description": "Trial days of the reseller"
          },
          "trial_datavolume": {
            "type": "integer",
            "title": "Trial Datavolume",
            "description": "Trial datavolume of the reseller"
          },
          "trial_pix4d_pixels": {
            "type": "integer",
            "title": "Trial Pix4D Pixels",
            "description": "Trial pix4d pixels of the reseller"
          },
          "trial_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Trial Sdx Photogrammetry Credits",
            "description": "Trial sdx photogrammetry pixels of the reseller"
          },
          "trial_base_licenses": {
            "type": "integer",
            "title": "Trial Base Licenses",
            "description": "Trial base licenses of the reseller"
          },
          "trial_guest_licenses": {
            "type": "integer",
            "title": "Trial Guest Licenses",
            "description": "Trial guest licenses of the reseller"
          },
          "trial_stripe_disabled": {
            "type": "boolean",
            "title": "Trial Stripe Disabled",
            "description": "If true, the reseller's stripe customer is disabled",
            "default": false
          },
          "viscan_functionality_enabled": {
            "type": "boolean",
            "title": "Viscan Functionality Enabled",
            "description": "If true, the reseller can use viscan product specific functionality",
            "default": false
          },
          "project_creation_disabled": {
            "type": "boolean",
            "title": "Project Creation Disabled",
            "description": "If true, the reseller can not create projects",
            "default": false
          },
          "lockdown_after_days": {
            "type": "integer",
            "title": "Lockdown After Days",
            "description": "Lockdown after days of the reseller"
          },
          "trial_banner_link": {
            "type": "string",
            "title": "Trial Banner Link",
            "description": "Trial banner link to e.g. schedule a call."
          },
          "demo_project_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Demo Project Ids",
            "description": "Demo project IDs which will be copied into the organization for the trial."
          }
        },
        "type": "object",
        "title": "ResellerInfo"
      },
      "cloudtools__mongodb__collections__organizations__model__StripeInfo": {
        "properties": {
          "stripe_disabled": {
            "type": "boolean",
            "title": "Stripe Disabled",
            "description": "If true, the organization is disabled in stripe",
            "default": false
          },
          "stripe_customer_id": {
            "type": "string",
            "title": "Stripe Customer Id",
            "description": "Stripe Customer ID of the organization"
          },
          "stripe_tax_id": {
            "type": "string",
            "title": "Stripe Tax Id",
            "description": "Stripe Tax ID of the organization"
          },
          "next_cycle_data_volume": {
            "type": "string",
            "title": "Next Cycle Data Volume",
            "description": "Next cycle data volume of the organization. If None it is cancelled or no subscription is set"
          },
          "free_base_licenses": {
            "type": "integer",
            "title": "Free Base Licenses",
            "description": "Free base user limit of the organization",
            "default": 1
          },
          "paid_base_licenses": {
            "type": "integer",
            "title": "Paid Base Licenses",
            "description": "Paid base user limit of the organization",
            "default": 0
          },
          "free_guest_licenses": {
            "type": "integer",
            "title": "Free Guest Licenses",
            "description": "Free guest user limit of the organization",
            "default": 0
          },
          "paid_guest_licenses": {
            "type": "integer",
            "title": "Paid Guest Licenses",
            "description": "Paid guest user limit of the organization",
            "default": 0
          },
          "free_data_volume": {
            "type": "integer",
            "title": "Free Data Volume",
            "description": "Free storage volume of the organization",
            "default": 0
          },
          "paid_data_volume": {
            "type": "integer",
            "title": "Paid Data Volume",
            "description": "Paid storage volume of the organization",
            "default": 0
          },
          "free_pix4d_pixels": {
            "type": "integer",
            "title": "Free Pix4D Pixels",
            "description": "Free pix4d pixels of the organization",
            "default": 0
          },
          "paid_pix4d_pixels": {
            "type": "integer",
            "title": "Paid Pix4D Pixels",
            "description": "Paid pix4d pixels of the organization",
            "default": 0
          },
          "used_pix4d_pixels": {
            "type": "integer",
            "title": "Used Pix4D Pixels",
            "description": "Used pix4d pixels of the organization",
            "default": 0
          },
          "free_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Free Sdx Photogrammetry Credits",
            "description": "Free sdx photogrammetry credits of the organization",
            "default": 0
          },
          "paid_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Paid Sdx Photogrammetry Credits",
            "description": "Paid sdx photogrammetry credits of the organization",
            "default": 0
          },
          "used_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Used Sdx Photogrammetry Credits",
            "description": "Used sdx photogrammetry credits of the organization",
            "default": 0
          },
          "default_collection_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__constants__CollectionMethod"
              }
            ],
            "description": "Default collection method for the organization",
            "default": "send_invoice"
          },
          "default_payment_method_set": {
            "type": "boolean",
            "title": "Default Payment Method Set",
            "description": "If true, a default payment method is set",
            "default": false
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__organizations__constants__SupportedCurrency"
              }
            ],
            "description": "Currency of the organization it pays its bills in"
          },
          "days_invoice_due": {
            "type": "integer",
            "title": "Days Invoice Due",
            "description": "Default days until invoice is due for the organization",
            "default": 14
          }
        },
        "type": "object",
        "title": "StripeInfo"
      },
      "cloudtools__mongodb__collections__orthophotos__model__OrthophotoTif": {
        "properties": {
          "tif_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tif File Id",
            "description": "Tif file id"
          }
        },
        "type": "object",
        "required": ["tif_file_id"],
        "title": "OrthophotoTif"
      },
      "cloudtools__mongodb__collections__pins__constants__FileSource": {
        "type": "string",
        "enum": [
          "excavator",
          "tablet",
          "cloud",
          "mobile",
          "dji",
          "vidoc",
          "other"
        ],
        "title": "FileSource",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__pins__constants__PinType": {
        "type": "string",
        "enum": [
          "ref_img",
          "cloud",
          "mate",
          "not_available",
          "line_vis",
          "capture_img",
          "capture_vid",
          "dji_perspective",
          "dji_areal",
          "vidoc",
          "vidoc_telekom"
        ],
        "title": "PinType",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__potrees__constants__PotreePointCloudType": {
        "type": "string",
        "enum": ["snapshot", "file", "high_res", "3d_mode", "high_res_v2"],
        "title": "PotreePointCloudType",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__potrees__constants__VolumeMeasurementOption": {
        "type": "string",
        "enum": ["avg", "min", "max", "default"],
        "title": "VolumeMeasurementOption",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__processingjobs__constants__CrossSectionType": {
        "type": "string",
        "enum": ["snapshot", "tobe_terrain", "latest_snapshot"],
        "title": "CrossSectionType",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__processingjobs__constants__PotreePointCloudType": {
        "type": "string",
        "enum": ["snapshot", "file", "high_res", "3d_mode", "high_res_v2"],
        "title": "PotreePointCloudType",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__processingjobs__other_schemas__Gcp": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting in m"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing in m"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height m"
          },
          "horizontal_accuracy": {
            "type": "number",
            "title": "Horizontal Accuracy",
            "description": "Horizontal accuracy in m"
          },
          "vertical_accuracy": {
            "type": "number",
            "title": "Vertical Accuracy",
            "description": "Vertical accuracy in m"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "Gcp"
      },
      "cloudtools__mongodb__collections__processingjobs__other_schemas__GlobalPoint": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in rad"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in rad"
          },
          "alt": {
            "type": "number",
            "title": "Alt",
            "description": "Altitude in m"
          }
        },
        "type": "object",
        "required": ["lat", "lon", "alt"],
        "title": "GlobalPoint"
      },
      "cloudtools__mongodb__collections__projects__model__ExportSettings": {
        "properties": {
          "filetype": {
            "type": "string",
            "title": "Filetype",
            "description": "Filetype of the export"
          },
          "meshed": {
            "type": "boolean",
            "title": "Meshed",
            "description": "Meshed export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export"
          }
        },
        "type": "object",
        "required": ["filetype", "meshed", "resolution"],
        "title": "ExportSettings"
      },
      "cloudtools__mongodb__collections__snapshots__constants__AutomaticSnapshotSource": {
        "type": "string",
        "enum": ["dji-dock", "snapshot-transfer", "sodex", "viscan-scin"],
        "title": "AutomaticSnapshotSource",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__snapshots__constants__ImportSnapshotSource": {
        "type": "string",
        "enum": ["las", "dxf", "xml", "laz", "photogrammetry-manual"],
        "title": "ImportSnapshotSource",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__snapshots__constants__SnapshotFileType": {
        "type": "string",
        "enum": [".sodex", ".las", ".dxf", ".xml", ".laz"],
        "title": "SnapshotFileType",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__snapshots__model__Gcp": {
        "properties": {
          "easting": {
            "type": "number",
            "title": "Easting",
            "description": "Easting in m"
          },
          "northing": {
            "type": "number",
            "title": "Northing",
            "description": "Northing in m"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "Height m"
          },
          "horizontal_accuracy": {
            "type": "number",
            "title": "Horizontal Accuracy",
            "description": "Horizontal accuracy in m"
          },
          "vertical_accuracy": {
            "type": "number",
            "title": "Vertical Accuracy",
            "description": "Vertical accuracy in m"
          }
        },
        "type": "object",
        "required": ["easting", "northing", "height"],
        "title": "Gcp"
      },
      "cloudtools__mongodb__collections__snapshots__model__OutSnapshotV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "snapshot_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot File Id",
            "description": "Snapshot file ID"
          },
          "pg_img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Pg Img File Ids",
            "description": "Photogrammetry image file IDs",
            "default": []
          },
          "detailed_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDetailedStatus"
              }
            ],
            "description": "Detailed status",
            "default": "finished"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotStatus"
              }
            ],
            "description": "Status",
            "default": "finished"
          },
          "status_history": {
            "items": {
              "$ref": "#/components/schemas/SnapshotStatusHistory"
            },
            "type": "array",
            "title": "Status History",
            "description": "Status history",
            "default": []
          },
          "snapshot_source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__ImportSnapshotSource"
              },
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__AutomaticSnapshotSource"
              }
            ],
            "title": "Snapshot Source",
            "description": "Type of the snapshot.",
            "default": "las"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__SnapshotFileType"
              }
            ],
            "description": "Filetype of the snapshot",
            "default": ".las"
          },
          "point_insertion_option": {
            "type": "string",
            "title": "Point Insertion Option",
            "description": "Point insertion option",
            "default": "lowest_point"
          },
          "measurement_unit": {
            "type": "string",
            "title": "Measurement Unit",
            "description": "Measurement unit the file is in. Only for imported snapshots.",
            "default": "m"
          },
          "snapshot_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotInfo"
              }
            ],
            "title": "Snapshot Info",
            "description": "Snapshot info"
          },
          "grid_size": {
            "type": "number",
            "title": "Grid Size",
            "description": "Grid size of the snapshot",
            "default": 0
          },
          "pg_processing_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry processing provider"
          },
          "pg_processing_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ViscanProcessingModeType"
              }
            ],
            "description": "Photogrammetry processing type"
          },
          "gcps": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__Gcp"
            },
            "type": "array",
            "title": "Gcps",
            "description": "GCPs"
          },
          "gcps_diag_size": {
            "type": "number",
            "title": "Gcps Diag Size",
            "description": "GCPs diagonal size"
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "Whether to create pins for the snapshot",
            "default": true
          },
          "pg_processed_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Processed Folder Id",
            "description": "Folder id of the photogrammetry processed data. Only set if snapshot is photogrammtry snapshot"
          },
          "pg_imgs_zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Imgs Zip File Id",
            "description": "File id of the photogrammetry images zip. Only set if snapshot is photogrammtry snapshot"
          },
          "pg_used_pixels": {
            "type": "integer",
            "title": "Pg Used Pixels",
            "description": "Number of used pixels for photogrammetry processing. Only set if snapshot is photogrammtry snapshot"
          },
          "pg_used_credits": {
            "type": "number",
            "title": "Pg Used Credits",
            "description": "Number of used credits for photogrammetry processing. Only set if snapshot is photogrammtry snapshot"
          },
          "pending_reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotPendingReason"
              }
            ],
            "description": "Reason for pending state"
          },
          "processing_data_volume": {
            "type": "number",
            "title": "Processing Data Volume",
            "description": "Processing data volume in mb. Combination of if exists, datavolume_3d, las file mb, photogrammetry files and images/pins."
          },
          "pg_viscan_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotViscanData"
              }
            ],
            "title": "Pg Viscan Data",
            "description": "Viscan data"
          },
          "pg_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotSdxProcessingSettings"
              }
            ],
            "title": "Pg Processing Settings",
            "description": "Processing settings"
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes"
          },
          "creation_date_selection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDateSelection"
              }
            ],
            "description": "Date selection",
            "default": "image-capture-date"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "User"
          },
          "dji_dock": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutDjiDock"
              }
            ],
            "title": "Dji Dock"
          },
          "telekom_scan_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomScanMeta"
              }
            ],
            "title": "Telekom Scan Meta",
            "description": "Telekom Scan Meta"
          },
          "telekom_data": {
            "items": {
              "$ref": "#/components/schemas/TelekomData"
            },
            "type": "array",
            "title": "Telekom Data",
            "description": "Telekom Data"
          },
          "length_capturing_path": {
            "type": "number",
            "title": "Length Capturing Path",
            "description": "The length of the capturing path in meters"
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotError"
              }
            ],
            "title": "Error",
            "description": "Error"
          },
          "viscan_job_uuid": {
            "type": "string",
            "title": "Viscan Job Uuid",
            "description": "Viscan job uuid"
          },
          "photogrammetry_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Photogrammetry Job Id",
            "description": "Photogrammetry job id"
          },
          "data_volume_3d": {
            "type": "number",
            "title": "Data Volume 3D",
            "description": "Data volume 3D in mb"
          },
          "potree_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Project Id",
            "description": "Potree project id"
          },
          "potree_project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutPotreeV2"
              }
            ],
            "title": "Potree Project",
            "description": "Potree project"
          },
          "processed_info_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Processed Info Id",
            "description": "Processed info id"
          },
          "processing_file_replacement_infos": {
            "items": {
              "$ref": "#/components/schemas/SnapshotFileReplacementInfos"
            },
            "type": "array",
            "title": "Processing File Replacement Infos",
            "description": "File replacement infos"
          },
          "snapshot_potree": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__SnapshotPotree"
              }
            ],
            "title": "Snapshot Potree",
            "description": "Snapshot potree"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/SnapshotWarning"
            },
            "type": "array",
            "title": "Warnings",
            "description": "Warnings",
            "default": []
          }
        },
        "type": "object",
        "required": ["project_id", "id"],
        "title": "OutSnapshotV2"
      },
      "cloudtools__mongodb__collections__snapshots__model__SnapshotPotree": {
        "properties": {
          "s3_metadata": {
            "type": "string",
            "title": "S3 Metadata",
            "description": "S3 metadata"
          },
          "s3_hierarchy": {
            "type": "string",
            "title": "S3 Hierarchy",
            "description": "S3 hierarchy"
          },
          "s3_octree": {
            "type": "string",
            "title": "S3 Octree",
            "description": "S3 octree"
          }
        },
        "type": "object",
        "title": "SnapshotPotree"
      },
      "cloudtools__mongodb__collections__snapshots__telekom_data__GlobalPoint": {
        "properties": {
          "lat": {
            "type": "number",
            "title": "Lat",
            "description": "Latitude in rad"
          },
          "lon": {
            "type": "number",
            "title": "Lon",
            "description": "Longitude in rad"
          },
          "alt": {
            "type": "number",
            "title": "Alt",
            "description": "Altitude in m"
          }
        },
        "type": "object",
        "required": ["lat", "lon", "alt"],
        "title": "GlobalPoint"
      },
      "cloudtools__mongodb__collections__sodexcloud__projects__files__constants__FileType": {
        "type": "string",
        "enum": [
          "base",
          "tobe",
          "cable",
          "origin",
          "snapshot",
          "layer",
          "merged_layer"
        ],
        "title": "FileType",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__sodexcloud__projects__files__constants__ImageSource": {
        "type": "string",
        "enum": ["dji", "vidoc", "other"],
        "title": "ImageSource",
        "description": "An enumeration."
      },
      "cloudtools__mongodb__collections__sodexcloud__projects__files__model__ImageInfo": {
        "properties": {
          "pixel_count": {
            "type": "integer",
            "title": "Pixel Count",
            "description": "Number of pixels in the image"
          },
          "width": {
            "type": "integer",
            "title": "Width",
            "description": "Width of the image in pixels"
          },
          "height": {
            "type": "integer",
            "title": "Height",
            "description": "Height of the image in pixels"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__constants__ImageSource"
              }
            ],
            "description": "Source of the image",
            "default": "other"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the image in radians"
          },
          "capture_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageCaptureType"
              }
            ],
            "description": "Capture type of the image"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the image in radians and height in m"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "Date and time the image was captured in utc"
          },
          "blurhash": {
            "type": "string",
            "title": "Blurhash",
            "description": "Blurhash of the image"
          },
          "capture_device_sn": {
            "type": "string",
            "title": "Capture Device Sn",
            "description": "Serial number of the capture device"
          },
          "low_res_webp_s3_key": {
            "type": "string",
            "title": "Low Res Webp S3 Key",
            "description": "S3 key of the low resolution webp image"
          },
          "mid_res_webp_s3_key": {
            "type": "string",
            "title": "Mid Res Webp S3 Key",
            "description": "S3 key of the mid resolution webp image"
          },
          "high_res_webp_s3_key": {
            "type": "string",
            "title": "High Res Webp S3 Key",
            "description": "S3 key of the high resolution webp image"
          }
        },
        "type": "object",
        "required": ["pixel_count", "width", "height"],
        "title": "ImageInfo"
      },
      "cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the file"
          },
          "parent_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Parent Id",
            "description": "ID of the parent folder"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__constants__FileType"
              }
            ],
            "description": "Type of the file",
            "default": "base"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Is the file active",
            "default": true
          },
          "data_3d": {
            "type": "boolean",
            "title": "Data 3D",
            "description": "Is the file 3D data",
            "default": false
          },
          "data_trafo": {
            "type": "boolean",
            "title": "Data Trafo",
            "description": "Is the file a transformation file",
            "default": false
          },
          "upload_source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UploadSource"
              }
            ],
            "description": "Source of the file upload",
            "default": "explorer"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Has the file been processed",
            "default": false
          },
          "mb_size": {
            "type": "number",
            "title": "Mb Size",
            "description": "Size of the file in MB"
          },
          "image_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__ImageInfo"
              }
            ],
            "title": "Image Info",
            "description": "Information about the image"
          },
          "user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "User Id",
            "description": "ID of the user that created the file"
          },
          "system_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "System Id",
            "description": "ID of the system that created the file"
          },
          "dji_dock_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Dock Id",
            "description": "ID of the DJI Dock associated to the file"
          },
          "dji_flight_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Dji Flight Id",
            "description": "ID of the DJI Flight associated to the file"
          },
          "filetype_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Filetype Id",
            "description": "ID of the filetype associated to the file"
          },
          "include_in_datavolume_3d": {
            "type": "boolean",
            "title": "Include In Datavolume 3D",
            "description": "Should the file be included in the datavolume 3d volume",
            "default": false
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "ID of the snapshot associated to the file"
          },
          "snapshot_orthophoto_tiff_file": {
            "type": "boolean",
            "title": "Snapshot Orthophoto Tiff File",
            "description": "Is the file the orthophoto file of the snapshot. Used for orthophoto processing",
            "default": false
          },
          "snapshot_las_file": {
            "type": "boolean",
            "title": "Snapshot Las File",
            "description": "Is the file the las file of the snapshot. Used for snapshot processing",
            "default": false
          },
          "snapshot_data_file_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDataFileType"
              }
            ],
            "description": "Type of the snapshot file"
          },
          "telekom_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomFileMeta"
              }
            ],
            "title": "Telekom Meta",
            "description": "Information about the telekom file"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          }
        },
        "type": "object",
        "required": ["name", "s3_key", "id"],
        "title": "OutFile"
      },
      "cloudtools__mongodb__collections__systems__model__OutSystemV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "System name"
          },
          "serial_number": {
            "type": "string",
            "title": "Serial Number",
            "description": "System serial number"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "is_frozen": {
            "type": "boolean",
            "title": "Is Frozen",
            "description": "Whether the system is frozen",
            "default": false
          },
          "is_copied": {
            "type": "boolean",
            "title": "Is Copied",
            "description": "Whether the system is copied",
            "default": false
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutOrganizationV2"
              }
            ],
            "title": "Organization"
          },
          "license": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutLicenseV2"
              }
            ],
            "title": "License"
          }
        },
        "type": "object",
        "required": ["name", "organization_id", "id"],
        "title": "OutSystemV2"
      },
      "src__core__constants__State": {
        "type": "string",
        "enum": ["open", "in_progress", "closed"],
        "title": "State",
        "description": "State of a scan task"
      },
      "src__sdxstripe__constants__CollectionMethod": {
        "type": "string",
        "enum": ["charge_automatically", "send_invoice"],
        "title": "CollectionMethod",
        "description": "An enumeration."
      },
      "src__sdxstripe__constants__SupportedCurrency": {
        "type": "string",
        "enum": ["eur", "usd", "gbp", "chf"],
        "title": "SupportedCurrency",
        "description": "An enumeration."
      },
      "src__v2__admin__translations__schemas__InputTranslation": {
        "properties": {
          "en": {
            "type": "object",
            "title": "En",
            "description": "English translation"
          },
          "fr": {
            "type": "object",
            "title": "Fr",
            "description": "French translation"
          },
          "de": {
            "type": "object",
            "title": "De",
            "description": "German translation"
          },
          "nl": {
            "type": "object",
            "title": "Nl",
            "description": "Dutch translation"
          },
          "es": {
            "type": "object",
            "title": "Es",
            "description": "Spanish translation"
          },
          "it": {
            "type": "object",
            "title": "It",
            "description": "Italian translation"
          },
          "pt": {
            "type": "object",
            "title": "Pt",
            "description": "Portuguese translation"
          },
          "ru": {
            "type": "object",
            "title": "Ru",
            "description": "Russian translation"
          },
          "tr": {
            "type": "object",
            "title": "Tr",
            "description": "Turkish translation"
          },
          "zh": {
            "type": "object",
            "title": "Zh",
            "description": "Chinese translation"
          },
          "ja": {
            "type": "object",
            "title": "Ja",
            "description": "Japanese translation"
          },
          "ko": {
            "type": "object",
            "title": "Ko",
            "description": "Korean translation"
          },
          "ar": {
            "type": "object",
            "title": "Ar",
            "description": "Arabic translation"
          },
          "hi": {
            "type": "object",
            "title": "Hi",
            "description": "Hindi translation"
          },
          "bn": {
            "type": "object",
            "title": "Bn",
            "description": "Bengali translation"
          },
          "pa": {
            "type": "object",
            "title": "Pa",
            "description": "Punjabi translation"
          }
        },
        "type": "object",
        "title": "InputTranslation"
      },
      "src__v2__management__extensionpacks__schemas__OutExtensionPack": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the cable type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Update date of the cable type"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionPackName"
              }
            ],
            "description": "Type of the extension pack"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionType"
              }
            ],
            "description": "Type of the extension pack (e.g. system)"
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionUnit"
              }
            ],
            "description": "Unit of the extension pack"
          },
          "capacity": {
            "type": "number",
            "title": "Capacity",
            "description": "Capacity of the extension pack e.g. 1000 (MB)"
          },
          "default_licenses": {
            "items": {
              "$ref": "#/components/schemas/LicenseTypes"
            },
            "type": "array",
            "description": "Default licenses for the extension pack"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "type", "unit", "capacity"],
        "title": "OutExtensionPack"
      },
      "src__v2__management__licenses__constants__SystemLicenseTypes": {
        "type": "string",
        "enum": [
          "machine_license_base",
          "machine_license_plus",
          "machine_license_ultimate",
          "machine_kteg_base",
          "demo",
          "linevis"
        ],
        "title": "SystemLicenseTypes",
        "description": "An enumeration."
      },
      "src__v2__management__organizations__schemas__OrganizationMetaSettings": {
        "properties": {
          "project_creation_disabled": {
            "type": "boolean",
            "title": "Project Creation Disabled",
            "description": "If true, the organization can not create projects",
            "default": false
          },
          "lockdown_after_trial": {
            "type": "boolean",
            "title": "Lockdown After Trial",
            "description": "Lockdown date of the organization",
            "default": false
          },
          "trial_banner_link": {
            "type": "string",
            "title": "Trial Banner Link",
            "description": "Trial banner link to e.g. schedule a call."
          },
          "in_lockdown": {
            "type": "boolean",
            "title": "In Lockdown",
            "description": "If true, the organization is in lockdown",
            "default": false
          }
        },
        "type": "object",
        "title": "OrganizationMetaSettings"
      },
      "src__v2__management__organizations__schemas__ResellerInfo": {
        "properties": {
          "support_email": {
            "type": "string",
            "title": "Support Email",
            "description": "Support email of the reseller",
            "default": "support@sodex-innovations.com"
          },
          "support_phone": {
            "type": "string",
            "title": "Support Phone",
            "description": "Support phone of the reseller"
          },
          "support_infotext": {
            "type": "string",
            "title": "Support Infotext",
            "description": "Support infotext of the reseller"
          },
          "trial_days": {
            "type": "integer",
            "title": "Trial Days",
            "description": "Trial days of the reseller",
            "default": 14
          },
          "trial_datavolume": {
            "type": "integer",
            "title": "Trial Datavolume",
            "description": "Trial datavolume of the reseller",
            "default": 25
          },
          "trial_pix4d_pixels": {
            "type": "integer",
            "title": "Trial Pix4D Pixels",
            "description": "Trial pix4d pixels of the reseller",
            "default": 0
          },
          "trial_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Trial Sdx Photogrammetry Credits",
            "description": "Trial sdx photogrammetry pixels of the reseller",
            "default": 0
          },
          "trial_base_licenses": {
            "type": "integer",
            "title": "Trial Base Licenses",
            "description": "Trial base licenses of the reseller",
            "default": 1
          },
          "trial_guest_licenses": {
            "type": "integer",
            "title": "Trial Guest Licenses",
            "description": "Trial guest licenses of the reseller",
            "default": 0
          },
          "lockdown_after_days": {
            "type": "integer",
            "title": "Lockdown After Days",
            "description": "Lockdown after days of the reseller"
          }
        },
        "type": "object",
        "title": "ResellerInfo"
      },
      "src__v2__management__organizations__schemas__StripeInfo": {
        "properties": {
          "stripe_disabled": {
            "type": "boolean",
            "title": "Stripe Disabled",
            "description": "If true, the organization is disabled in stripe",
            "default": false
          },
          "stripe_customer_id": {
            "type": "string",
            "title": "Stripe Customer Id",
            "description": "Stripe Customer ID of the organization"
          },
          "stripe_tax_id": {
            "type": "string",
            "title": "Stripe Tax Id",
            "description": "Stripe Tax ID of the organization"
          },
          "free_base_licenses": {
            "type": "integer",
            "title": "Free Base Licenses",
            "description": "Free base user limit of the organization",
            "default": 1
          },
          "paid_base_licenses": {
            "type": "integer",
            "title": "Paid Base Licenses",
            "description": "Paid base user limit of the organization",
            "default": 0
          },
          "free_guest_licenses": {
            "type": "integer",
            "title": "Free Guest Licenses",
            "description": "Free guest user limit of the organization",
            "default": 0
          },
          "paid_guest_licenses": {
            "type": "integer",
            "title": "Paid Guest Licenses",
            "description": "Paid guest user limit of the organization",
            "default": 0
          },
          "free_data_volume": {
            "type": "integer",
            "title": "Free Data Volume",
            "description": "Free storage volume of the organization in GB",
            "default": 0
          },
          "paid_data_volume": {
            "type": "integer",
            "title": "Paid Data Volume",
            "description": "Paid storage volume of the organization in GB",
            "default": 0
          },
          "free_pix4d_pixels": {
            "type": "integer",
            "title": "Free Pix4D Pixels",
            "description": "Free pix4d pixels of the organization",
            "default": 0
          },
          "paid_pix4d_pixels": {
            "type": "integer",
            "title": "Paid Pix4D Pixels",
            "description": "Paid pix4d pixels of the organization",
            "default": 0
          },
          "used_pix4d_pixels": {
            "type": "integer",
            "title": "Used Pix4D Pixels",
            "description": "Used pix4d pixels of the organization",
            "default": 0
          },
          "free_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Free Sdx Photogrammetry Credits",
            "description": "Free sdx photogrammetry credits of the organization",
            "default": 0
          },
          "paid_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Paid Sdx Photogrammetry Credits",
            "description": "Paid sdx photogrammetry credits of the organization",
            "default": 0
          },
          "used_sdx_photogrammetry_credits": {
            "type": "number",
            "title": "Used Sdx Photogrammetry Credits",
            "description": "Used sdx photogrammetry credits of the organization",
            "default": 0
          },
          "default_collection_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__CollectionMethod"
              }
            ],
            "description": "Default collection method of the organization",
            "default": "send_invoice"
          },
          "default_payment_method_set": {
            "type": "boolean",
            "title": "Default Payment Method Set",
            "description": "If true, a default payment method is set",
            "default": false
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__sdxstripe__constants__SupportedCurrency"
              }
            ],
            "description": "Currency of the organization it pays its bills in"
          },
          "days_invoice_due": {
            "type": "integer",
            "title": "Days Invoice Due",
            "description": "Default days until invoice is due for the organization",
            "default": 14
          }
        },
        "type": "object",
        "title": "StripeInfo"
      },
      "src__v2__management__systems__schemas__OutExtensionPack": {
        "properties": {
          "extension_pack_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Extension Pack Id",
            "description": "Extension pack ID of the system"
          },
          "additional_capacity": {
            "type": "number",
            "title": "Additional Capacity",
            "description": "Additional capacity of the extension pack",
            "default": 0
          },
          "available_capacity": {
            "type": "number",
            "title": "Available Capacity",
            "description": "How much capacity is available for the extension pack for this month",
            "default": 0
          },
          "total_capacity": {
            "type": "number",
            "title": "Total Capacity",
            "description": "Total capacity of the extension pack (additional purchased + default license)",
            "default": 0
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtensionPackName"
              }
            ],
            "description": "Name of the extension pack"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "title": "Start At",
            "description": "Start date of the extension pack period."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "title": "End At",
            "description": "End date of the extension pack period."
          },
          "almost_exhausted_email_sent": {
            "type": "boolean",
            "title": "Almost Exhausted Email Sent",
            "description": "If the almost exhausted email was sent",
            "default": false
          },
          "exhausted_email_sent": {
            "type": "boolean",
            "title": "Exhausted Email Sent",
            "description": "If the exhausted email was sent",
            "default": false
          }
        },
        "type": "object",
        "required": ["extension_pack_id", "name"],
        "title": "OutExtensionPack"
      },
      "src__v2__processdata__pins__constants__FileSource": {
        "type": "string",
        "enum": [
          "excavator",
          "tablet",
          "cloud",
          "mobile",
          "dji",
          "vidoc",
          "other"
        ],
        "title": "FileSource",
        "description": "An enumeration."
      },
      "src__v2__processdata__pins__constants__PinType": {
        "type": "string",
        "enum": [
          "ref_img",
          "cloud",
          "mate",
          "not_available",
          "line_vis",
          "capture_img",
          "capture_vid",
          "dji_perspective",
          "dji_areal",
          "vidoc",
          "vidoc_telekom"
        ],
        "title": "PinType",
        "description": "An enumeration."
      },
      "src__v2__processdata__snapshots__constants__AutomaticSnapshotSource": {
        "type": "string",
        "enum": ["dji-dock", "snapshot-transfer", "sodex", "viscan-scin"],
        "title": "AutomaticSnapshotSource",
        "description": "An enumeration."
      },
      "src__v2__processdata__snapshots__constants__ImportSnapshotSource": {
        "type": "string",
        "enum": ["las", "dxf", "xml", "laz", "photogrammetry-manual"],
        "title": "ImportSnapshotSource",
        "description": "An enumeration."
      },
      "src__v2__processdata__snapshots__constants__SnapshotFileType": {
        "type": "string",
        "enum": [".sodex", ".las", ".dxf", ".xml", ".laz"],
        "title": "SnapshotFileType",
        "description": "An enumeration."
      },
      "src__v2__processdata__snapshots__schemas__OutVolume": {
        "properties": {
          "time": {
            "type": "string",
            "format": "date-time",
            "title": "Time",
            "description": "Time of the volume captured in UTC"
          },
          "rel_vol_pos": {
            "type": "number",
            "title": "Rel Vol Pos",
            "description": "Relative positive volume in m3 to the previous snapshot (always positive float)"
          },
          "rel_vol_neg": {
            "type": "number",
            "title": "Rel Vol Neg",
            "description": "Relative negative volume in m3 to the previous snapshot (always positive float)"
          },
          "rel_vol_pos_manipulated": {
            "type": "number",
            "title": "Rel Vol Pos Manipulated",
            "description": "Relative positive volume in m3 to the previous snapshot (always positive float)"
          },
          "rel_vol_neg_manipulated": {
            "type": "number",
            "title": "Rel Vol Neg Manipulated",
            "description": "Relative negative volume in m3 to the previous snapshot (always positive float)"
          },
          "soil_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Soil Id",
            "description": "ID of the tag"
          },
          "soil_name": {
            "type": "string",
            "title": "Soil Name",
            "description": "Name of the soil tag"
          },
          "phase_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Phase Id",
            "description": "ID of the phase"
          },
          "phase_name": {
            "type": "string",
            "title": "Phase Name",
            "description": "Name of the phase"
          }
        },
        "type": "object",
        "required": [
          "time",
          "rel_vol_pos",
          "rel_vol_neg",
          "rel_vol_pos_manipulated",
          "rel_vol_neg_manipulated"
        ],
        "title": "OutVolume"
      },
      "src__v2__processdata__snapshots__schemas__S3UploadPart": {
        "properties": {
          "ETag": {
            "type": "string",
            "title": "Etag",
            "description": "ETag of the uploaded part"
          },
          "PartNumber": {
            "type": "integer",
            "title": "Partnumber",
            "description": "Number of the part"
          }
        },
        "type": "object",
        "required": ["ETag", "PartNumber"],
        "title": "S3UploadPart"
      },
      "src__v2__processdata__snapshots__schemas__SnapshotPotree": {
        "properties": {
          "s3_metadata": {
            "type": "string",
            "title": "S3 Metadata",
            "description": "S3 key of the potree metadata json file"
          },
          "s3_hierarchy": {
            "type": "string",
            "title": "S3 Hierarchy",
            "description": "S3 key of the potree hierarchy bin file"
          },
          "s3_octree": {
            "type": "string",
            "title": "S3 Octree",
            "description": "S3 key of the potree octree bin file"
          }
        },
        "type": "object",
        "title": "SnapshotPotree"
      },
      "src__v2__processdata__snapshotsv2__schemas__OutSnapshotV2": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "snapshot_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot File Id",
            "description": "Snapshot file ID"
          },
          "pg_img_file_ids": {
            "items": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "type": "array",
            "title": "Pg Img File Ids",
            "description": "Photogrammetry image file IDs",
            "default": []
          },
          "detailed_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDetailedStatus"
              }
            ],
            "description": "Detailed status",
            "default": "finished"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotStatus"
              }
            ],
            "description": "Status",
            "default": "finished"
          },
          "status_history": {
            "items": {
              "$ref": "#/components/schemas/SnapshotStatusHistory"
            },
            "type": "array",
            "title": "Status History",
            "description": "Status history",
            "default": []
          },
          "snapshot_source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__ImportSnapshotSource"
              },
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__AutomaticSnapshotSource"
              }
            ],
            "title": "Snapshot Source",
            "description": "Type of the snapshot.",
            "default": "las"
          },
          "filetype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__constants__SnapshotFileType"
              }
            ],
            "description": "Filetype of the snapshot",
            "default": ".las"
          },
          "point_insertion_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointInsertionOption"
              }
            ],
            "description": "Point insertion option",
            "default": "lowest_point"
          },
          "measurement_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MeasurementUnit"
              }
            ],
            "description": "Measurement unit",
            "default": "m"
          },
          "snapshot_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotInfo"
              }
            ],
            "title": "Snapshot Info",
            "description": "Snapshot info"
          },
          "grid_size": {
            "type": "number",
            "title": "Grid Size",
            "description": "Grid size of the snapshot",
            "default": 0
          },
          "pg_processing_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhotogrammetryProcessingProvider"
              }
            ],
            "description": "Photogrammetry processing provider"
          },
          "pg_processing_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ViscanProcessingModeType"
              }
            ],
            "description": "Photogrammetry processing type"
          },
          "gcps": {
            "items": {
              "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__Gcp"
            },
            "type": "array",
            "title": "Gcps",
            "description": "GCPs"
          },
          "gcps_diag_size": {
            "type": "number",
            "title": "Gcps Diag Size",
            "description": "GCPs diagonal size"
          },
          "create_pins": {
            "type": "boolean",
            "title": "Create Pins",
            "description": "Whether to create pins for the snapshot",
            "default": true
          },
          "pg_processed_folder_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Processed Folder Id",
            "description": "Folder id of the photogrammetry processed data. Only set if snapshot is photogrammtry snapshot"
          },
          "pg_imgs_zip_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Pg Imgs Zip File Id",
            "description": "File id of the photogrammetry images zip. Only set if snapshot is photogrammtry snapshot"
          },
          "pg_used_pixels": {
            "type": "integer",
            "title": "Pg Used Pixels",
            "description": "Number of used pixels for photogrammetry processing. Only set if snapshot is photogrammtry snapshot"
          },
          "pg_used_credits": {
            "type": "number",
            "title": "Pg Used Credits",
            "description": "Number of used credits for photogrammetry processing. Only set if snapshot is photogrammtry snapshot"
          },
          "pending_reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotPendingReason"
              }
            ],
            "description": "Reason for pending state"
          },
          "processing_data_volume": {
            "type": "number",
            "title": "Processing Data Volume",
            "description": "Processing data volume in mb. Combination of if exists, datavolume_3d, las file mb, photogrammetry files and images/pins."
          },
          "pg_viscan_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotViscanData"
              }
            ],
            "title": "Pg Viscan Data",
            "description": "Viscan data"
          },
          "pg_processing_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotSdxProcessingSettings"
              }
            ],
            "title": "Pg Processing Settings",
            "description": "Processing settings"
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes"
          },
          "creation_date_selection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDateSelection"
              }
            ],
            "description": "Date selection",
            "default": "image-capture-date"
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutUserV2"
              }
            ],
            "title": "User"
          },
          "dji_dock": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutDjiDock"
              }
            ],
            "title": "Dji Dock"
          },
          "telekom_scan_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TelekomScanMeta"
              }
            ],
            "title": "Telekom Scan Meta",
            "description": "Telekom Scan Meta"
          },
          "telekom_data": {
            "items": {
              "$ref": "#/components/schemas/TelekomData"
            },
            "type": "array",
            "title": "Telekom Data",
            "description": "Telekom Data"
          },
          "length_capturing_path": {
            "type": "number",
            "title": "Length Capturing Path",
            "description": "The length of the capturing path in meters"
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotError"
              }
            ],
            "title": "Error",
            "description": "Error"
          },
          "viscan_job_uuid": {
            "type": "string",
            "title": "Viscan Job Uuid",
            "description": "Viscan job uuid"
          },
          "photogrammetry_job_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Photogrammetry Job Id",
            "description": "Photogrammetry job id"
          },
          "data_volume_3d": {
            "type": "number",
            "title": "Data Volume 3D",
            "description": "Data volume 3D in mb"
          },
          "potree_project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Potree Project Id",
            "description": "Potree project id"
          },
          "potree_project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutPotreeV2"
              }
            ],
            "title": "Potree Project",
            "description": "Potree project"
          },
          "processed_info_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Processed Info Id",
            "description": "Processed info id"
          },
          "processing_file_replacement_infos": {
            "items": {
              "$ref": "#/components/schemas/SnapshotFileReplacementInfos"
            },
            "type": "array",
            "title": "Processing File Replacement Infos",
            "description": "File replacement infos"
          },
          "snapshot_potree": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__snapshots__model__SnapshotPotree"
              }
            ],
            "title": "Snapshot Potree",
            "description": "Snapshot potree"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/SnapshotWarning"
            },
            "type": "array",
            "title": "Warnings",
            "description": "Warnings",
            "default": []
          }
        },
        "type": "object",
        "required": ["project_id", "id"],
        "title": "OutSnapshotV2"
      },
      "src__v2__processdata__translations__schemas__InputTranslation": {
        "properties": {
          "tag_translations": {
            "type": "object",
            "title": "Tag Translations",
            "description": "tag translations",
            "default": {}
          },
          "phase_translations": {
            "type": "object",
            "title": "Phase Translations",
            "description": "phase translations",
            "default": {}
          },
          "bucket_translations": {
            "type": "object",
            "title": "Bucket Translations",
            "description": "bucket translations",
            "default": {}
          },
          "system_translations": {
            "type": "object",
            "title": "System Translations",
            "description": "system translations",
            "default": {}
          },
          "dest_translations": {
            "type": "object",
            "title": "Dest Translations",
            "description": "destination translations",
            "default": {}
          }
        },
        "type": "object",
        "title": "InputTranslation"
      },
      "src__v2__sodexcloud__cables__cablesegments__constants__DataSource": {
        "type": "string",
        "enum": [
          "csv_file",
          "high_res",
          "system",
          "dxf_file",
          "snapshot",
          "unidentified_file"
        ],
        "title": "DataSource",
        "description": "An enumeration."
      },
      "src__v2__sodexcloud__gradients__schemas__InputGradient": {
        "properties": {
          "colors": {
            "items": {
              "type": "string",
              "maxLength": 7,
              "minLength": 7,
              "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
            },
            "type": "array",
            "maxLength": 7,
            "minLength": 7,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "Colors",
            "description": "List of colors in hex format"
          }
        },
        "type": "object",
        "required": ["colors"],
        "title": "InputGradient"
      },
      "src__v2__sodexcloud__gradients__schemas__UpdateGradient": {
        "properties": {
          "colors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Colors",
            "description": "List of colors in hex format",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateGradient"
      },
      "src__v2__sodexcloud__potree__schemas__InputMeasurements": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the measurement"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the measurement"
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Volume of the measurement in m3"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "Points of the measurement"
          },
          "volume_measurement_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__potree__schemas__VolumeMeasurementOption"
              }
            ],
            "title": "Volume Measurement Options",
            "description": "Volume measurement options of the measurement"
          }
        },
        "type": "object",
        "required": ["name", "type", "points"],
        "title": "InputMeasurements"
      },
      "src__v2__sodexcloud__potree__schemas__OutMeasurements": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the measurement"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the measurement"
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Volume of the measurement in m3"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "Points of the measurement"
          },
          "volume_measurement_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__potree__schemas__VolumeMeasurementOption"
              }
            ],
            "title": "Volume Measurement Options",
            "description": "Volume measurement options of the measurement"
          }
        },
        "type": "object",
        "required": ["name", "type", "points"],
        "title": "OutMeasurements"
      },
      "src__v2__sodexcloud__potree__schemas__UpdateMeasurements": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the measurement"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the measurement"
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Volume of the measurement in m3"
          },
          "points": {
            "items": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "array",
            "title": "Points",
            "description": "Points of the measurement"
          },
          "volume_measurement_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__potree__schemas__VolumeMeasurementOption"
              }
            ],
            "title": "Volume Measurement Options",
            "description": "Volume measurement options of the measurement"
          }
        },
        "type": "object",
        "required": ["name", "type", "points"],
        "title": "UpdateMeasurements"
      },
      "src__v2__sodexcloud__potree__schemas__VolumeMeasurementOption": {
        "properties": {
          "positive": {
            "type": "boolean",
            "title": "Positive",
            "description": "Positive of the volume measurement option"
          },
          "calc_option": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__potrees__constants__VolumeMeasurementOption"
              }
            ],
            "description": "Calc option of the volume measurement option"
          }
        },
        "type": "object",
        "required": ["positive", "calc_option"],
        "title": "VolumeMeasurementOption"
      },
      "src__v2__sodexcloud__projects__crosssections__constants__CrossSectionType": {
        "type": "string",
        "enum": ["snapshot", "tobe_terrain", "latest_snapshot"],
        "title": "CrossSectionType",
        "description": "An enumeration."
      },
      "src__v2__sodexcloud__projects__datasets__constants__DataSource": {
        "type": "string",
        "enum": ["auto", "reference_terrain"],
        "title": "DataSource",
        "description": "An enumeration."
      },
      "src__v2__sodexcloud__projects__files__constants__FileType": {
        "type": "string",
        "enum": [
          "base",
          "tobe",
          "cable",
          "origin",
          "snapshot",
          "layer",
          "merged_layer"
        ],
        "title": "FileType",
        "description": "An enumeration."
      },
      "src__v2__sodexcloud__projects__files__constants__ImageSource": {
        "type": "string",
        "enum": ["dji", "vidoc", "other"],
        "title": "ImageSource",
        "description": "An enumeration."
      },
      "src__v2__sodexcloud__projects__files__schemas__ImageInfo": {
        "properties": {
          "pixel_count": {
            "type": "integer",
            "title": "Pixel Count",
            "description": "Number of pixels in the image"
          },
          "width": {
            "type": "integer",
            "title": "Width",
            "description": "Width of the image in pixels"
          },
          "height": {
            "type": "integer",
            "title": "Height",
            "description": "Height of the image in pixels"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__constants__ImageSource"
              }
            ],
            "description": "Source of the image",
            "default": "other"
          },
          "bearing": {
            "type": "number",
            "title": "Bearing",
            "description": "Bearing of the image in radians"
          },
          "capture_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageCaptureType"
              }
            ],
            "description": "Capture type of the image"
          },
          "location": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Location",
            "description": "Location of the image in radians and height in m"
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "title": "Captured At",
            "description": "Date and time the image was captured in utc"
          },
          "blurhash": {
            "type": "string",
            "title": "Blurhash",
            "description": "Blurhash of the image"
          },
          "capture_device_sn": {
            "type": "string",
            "title": "Capture Device Sn",
            "description": "Serial number of the capture device"
          }
        },
        "type": "object",
        "required": ["pixel_count", "width", "height"],
        "title": "ImageInfo"
      },
      "src__v2__sodexcloud__projects__files__schemas__OutFile": {
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Id",
            "description": "MongoDB unique ID of this file"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation date of the license"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update date of the license"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the file"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the file"
          },
          "parent_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Parent Id",
            "description": "ID of the parent file"
          },
          "project_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Project Id",
            "description": "ID of the project the file belongs to"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__constants__FileType"
              }
            ],
            "description": "Type of the file"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "ID of the organization the file belongs to"
          },
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Has the file been processed",
            "default": false
          },
          "data_3d": {
            "type": "boolean",
            "title": "Data 3D",
            "description": "Is the file 3D data",
            "default": false
          },
          "data_trafo": {
            "type": "boolean",
            "title": "Data Trafo",
            "description": "Is the file a transformation file",
            "default": false
          },
          "user_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "User Id",
            "description": "ID of the user that created the file"
          },
          "system_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "System Id",
            "description": "ID of the system that created the file"
          },
          "filetype_id": {
            "type": "string",
            "maxLength": 24,
            "minLength": 24,
            "title": "Filetype Id",
            "description": "ID of the filetype associated to the file"
          },
          "tag_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tag Id",
            "description": "Tag id linked to the file"
          },
          "mb_size": {
            "type": "number",
            "title": "Mb Size",
            "description": "Size of the file in MB"
          },
          "image_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__files__schemas__ImageInfo"
              }
            ],
            "title": "Image Info",
            "description": "Information about the image"
          },
          "snapshot_data_file_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotDataFileType"
              }
            ],
            "description": "Type of the snapshot file"
          }
        },
        "type": "object",
        "required": ["id", "name", "type", "s3_key"],
        "title": "OutFile"
      },
      "src__v2__sodexcloud__projects__files__schemas__S3UploadPart": {
        "properties": {
          "ETag": {
            "type": "string",
            "title": "Etag",
            "description": "ETag of the uploaded part"
          },
          "PartNumber": {
            "type": "integer",
            "title": "Partnumber",
            "description": "Number of the part"
          }
        },
        "type": "object",
        "required": ["ETag", "PartNumber"],
        "title": "S3UploadPart"
      },
      "src__v2__sodexcloud__projects__orthophotos__schemas__InputOrthophoto": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Orthophotos name"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrthophotoType"
              }
            ],
            "description": "Orthophotos type",
            "default": "tif"
          },
          "tif": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__v2__sodexcloud__projects__orthophotos__schemas__OrthophotoTif"
              }
            ],
            "title": "Tif",
            "description": "Tif file"
          }
        },
        "type": "object",
        "required": ["name", "tif"],
        "title": "InputOrthophoto"
      },
      "src__v2__sodexcloud__projects__orthophotos__schemas__OrthophotoTif": {
        "properties": {
          "tif_file_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Tif File Id",
            "description": "Tif file id"
          }
        },
        "type": "object",
        "required": ["tif_file_id"],
        "title": "OrthophotoTif"
      },
      "src__v2__sodexcloud__projects__orthophotos__schemas__OutOrthophoto": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "project_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Project Id",
            "description": "Project ID"
          },
          "organization_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Organization Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Orthophoto name"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrthophotoType"
              }
            ],
            "description": "Orthophotos type",
            "default": "tif"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Orthophoto processed",
            "default": false
          },
          "tif": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__orthophotos__model__OrthophotoTif"
              }
            ],
            "title": "Tif",
            "description": "Orthophoto tif file"
          },
          "created_by_user_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Created By User Id",
            "description": "User ID"
          },
          "snapshot_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Snapshot Id",
            "description": "Snapshot ID"
          },
          "processing_data_volume": {
            "type": "number",
            "title": "Processing Data Volume",
            "description": "Processing data volume in mb"
          },
          "s3_co_tif": {
            "type": "string",
            "title": "S3 Co Tif",
            "description": "S3 cloud optimized TIF file"
          },
          "use_tile_api": {
            "type": "boolean",
            "title": "Use Tile Api",
            "description": "Use tile API",
            "default": false
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrthophotoStatus"
              }
            ],
            "description": "Orthophoto status",
            "default": "finished"
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrthophotoError"
              }
            ],
            "title": "Error",
            "description": "Orthophoto error"
          },
          "status_history": {
            "items": {
              "$ref": "#/components/schemas/OrthophotoStatusHistory"
            },
            "type": "array",
            "title": "Status History",
            "description": "Orthophoto status history",
            "default": []
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes",
            "description": "Bytes used for processing and storage. Reducted from available datavolume in organization."
          },
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Id",
            "description": "MongoDB Object ID"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutProjectV2"
              }
            ],
            "title": "Project"
          },
          "tif_file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/cloudtools__mongodb__collections__sodexcloud__projects__files__model__OutFile"
              }
            ],
            "title": "Tif File"
          },
          "min_zoom": {
            "type": "integer",
            "title": "Min Zoom",
            "description": "Min zoom in infomap",
            "default": 10
          },
          "max_zoom": {
            "type": "integer",
            "title": "Max Zoom",
            "description": "Max zoom in infomap",
            "default": 24
          }
        },
        "type": "object",
        "required": ["project_id", "name", "tif", "id"],
        "title": "OutOrthophoto"
      },
      "src__v2__sodexcloud__projects__orthophotos__schemas__UpdateOrthophoto": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Orthophotos name",
            "nullable": true
          }
        },
        "type": "object",
        "title": "UpdateOrthophoto"
      },
      "src__v2__sodexcloud__projects__pilegeofences__schemas__ResponseVolume": {
        "properties": {
          "vol_pos": {
            "type": "number",
            "title": "Vol Pos",
            "description": "Volume positive"
          },
          "vol_neg": {
            "type": "number",
            "title": "Vol Neg",
            "description": "Volume negative"
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Snapshot Created At",
            "description": "Datetime the snapshot was created at"
          }
        },
        "type": "object",
        "required": ["vol_pos", "vol_neg", "snapshot_created_at"],
        "title": "ResponseVolume"
      },
      "src__v2__sodexcloud__projects__piles__schemas__OutVolume": {
        "properties": {
          "vol_pos": {
            "type": "number",
            "title": "Vol Pos",
            "description": "Positive volume total in cm3"
          },
          "vol_neg": {
            "type": "number",
            "title": "Vol Neg",
            "description": "Negative volume total in cm3"
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Snapshot Created At",
            "description": "Time of the volume calculation"
          }
        },
        "type": "object",
        "required": ["vol_pos", "vol_neg", "snapshot_created_at"],
        "title": "OutVolume"
      },
      "src__v2__sodexcloud__projects__projects__schemas__ExportSettings": {
        "properties": {
          "filetype": {
            "type": "string",
            "title": "Filetype",
            "description": "Filetype of the export"
          },
          "meshed": {
            "type": "boolean",
            "title": "Meshed",
            "description": "Meshed export"
          },
          "resolution": {
            "type": "number",
            "title": "Resolution",
            "description": "Resolution of the export"
          }
        },
        "type": "object",
        "required": ["filetype", "meshed", "resolution"],
        "title": "ExportSettings"
      },
      "src__v2__sodexcloud__projects__referenceterrains__schemas__InputGradient": {
        "properties": {
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the gradient"
          },
          "distance": {
            "type": "number",
            "title": "Distance",
            "description": "Distance of the gradient"
          }
        },
        "type": "object",
        "required": ["color", "distance"],
        "title": "InputGradient"
      },
      "src__v2__sodexcloud__projects__referenceterrains__schemas__ResponseVolume": {
        "properties": {
          "vol_pos": {
            "type": "number",
            "title": "Vol Pos",
            "description": "Volume positive"
          },
          "vol_neg": {
            "type": "number",
            "title": "Vol Neg",
            "description": "Volume negative"
          },
          "snapshot_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Snapshot Created At",
            "description": "Datetime the snapshot was created at"
          }
        },
        "type": "object",
        "required": ["vol_pos", "vol_neg"],
        "title": "ResponseVolume"
      },
      "src__v2__sodexcloud__projects__referenceterrains__schemas__UpdateGradient": {
        "properties": {
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Color of the gradient"
          },
          "distance": {
            "type": "number",
            "title": "Distance",
            "description": "Distance of the gradient"
          }
        },
        "type": "object",
        "required": ["color", "distance"],
        "title": "UpdateGradient"
      },
      "src__v2__sodexcloud__projects__scantasks__constants__State": {
        "type": "string",
        "enum": ["open", "in_progress", "closed"],
        "title": "State",
        "description": "State of a scan task"
      },
      "src__v2__sodexcloud__states__constants__State": {
        "type": "string",
        "enum": ["open", "in progress", "closed"],
        "title": "State",
        "description": "An enumeration."
      },
      "src__v2__sodexcloud__systems__quicktasks__schemas__OutFile": {
        "properties": {
          "s3_key": {
            "type": "string",
            "title": "S3 Key",
            "description": "S3 key of the file"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Signed S3 url of the file"
          }
        },
        "type": "object",
        "required": ["s3_key", "url"],
        "title": "OutFile"
      },
      "src__v2__systemconfiguration__csparams__schemas__InputGeneral": {
        "properties": {
          "coord_sys": {
            "type": "string",
            "title": "Coord Sys",
            "description": "coordinate system of the machine"
          },
          "auto_save_period": {
            "type": "number",
            "title": "Auto Save Period",
            "description": "period of the auto save in seconds"
          },
          "tile_creation_period": {
            "type": "number",
            "title": "Tile Creation Period",
            "description": "period of the tile creation in seconds"
          },
          "cs_length": {
            "type": "number",
            "title": "Cs Length",
            "description": "length of the chunk system in chunks"
          },
          "chunk_length": {
            "type": "number",
            "title": "Chunk Length",
            "description": "length of a chunk in cm"
          },
          "chunk_voxel_size": {
            "type": "number",
            "title": "Chunk Voxel Size",
            "description": "size of a voxel in cm"
          },
          "threads_per_block": {
            "type": "integer",
            "title": "Threads Per Block",
            "description": "threads per block for the cuda kernal"
          },
          "blocks_per_grid": {
            "type": "integer",
            "title": "Blocks Per Grid",
            "description": "blocks per grid for the cuda kernal"
          },
          "chunk_tolerance": {
            "type": "number",
            "title": "Chunk Tolerance",
            "description": "tolerance of a chunk before excavator switches the core chunk in cm"
          },
          "exc_offset": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Exc Offset",
            "description": "offset of the excavator position to the chunk system position"
          }
        },
        "type": "object",
        "title": "InputGeneral"
      },
      "src__v2__systemconfiguration__csparams__schemas__InputOrthophoto": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the orthophoto is active"
          }
        },
        "type": "object",
        "title": "InputOrthophoto"
      },
      "src__v2__systemconfiguration__csparams__schemas__OutGeneral": {
        "properties": {
          "coord_sys": {
            "type": "string",
            "title": "Coord Sys",
            "description": "coordinate system of the machine"
          },
          "auto_save_period": {
            "type": "number",
            "title": "Auto Save Period",
            "description": "period of the auto save in seconds"
          },
          "tile_creation_period": {
            "type": "number",
            "title": "Tile Creation Period",
            "description": "period of the tile creation in seconds"
          },
          "cs_length": {
            "type": "number",
            "title": "Cs Length",
            "description": "length of the chunk system in chunks"
          },
          "chunk_length": {
            "type": "number",
            "title": "Chunk Length",
            "description": "length of a chunk in cm"
          },
          "chunk_voxel_size": {
            "type": "number",
            "title": "Chunk Voxel Size",
            "description": "size of a voxel in cm"
          },
          "threads_per_block": {
            "type": "integer",
            "title": "Threads Per Block",
            "description": "threads per block for the cuda kernal"
          },
          "blocks_per_grid": {
            "type": "integer",
            "title": "Blocks Per Grid",
            "description": "blocks per grid for the cuda kernal"
          },
          "chunk_tolerance": {
            "type": "number",
            "title": "Chunk Tolerance",
            "description": "tolerance of a chunk before excavator switches the core chunk in cm"
          },
          "exc_offset": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Exc Offset",
            "description": "offset of the excavator position to the chunk system position"
          }
        },
        "type": "object",
        "title": "OutGeneral"
      },
      "src__v2__systemconfiguration__csparams__schemas__OutOrthophoto": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the orthophoto is active"
          }
        },
        "type": "object",
        "title": "OutOrthophoto"
      },
      "src__v2__systemconfiguration__csparams__schemas__UpdateGeneral": {
        "properties": {
          "coord_sys": {
            "type": "string",
            "title": "Coord Sys",
            "description": "coordinate system of the machine"
          },
          "auto_save_period": {
            "type": "number",
            "title": "Auto Save Period",
            "description": "period of the auto save in seconds"
          },
          "tile_creation_period": {
            "type": "number",
            "title": "Tile Creation Period",
            "description": "period of the tile creation in seconds"
          },
          "cs_length": {
            "type": "number",
            "title": "Cs Length",
            "description": "length of the chunk system in chunks"
          },
          "chunk_length": {
            "type": "number",
            "title": "Chunk Length",
            "description": "length of a chunk in cm"
          },
          "chunk_voxel_size": {
            "type": "number",
            "title": "Chunk Voxel Size",
            "description": "size of a voxel in cm"
          },
          "threads_per_block": {
            "type": "integer",
            "title": "Threads Per Block",
            "description": "threads per block for the cuda kernal"
          },
          "blocks_per_grid": {
            "type": "integer",
            "title": "Blocks Per Grid",
            "description": "blocks per grid for the cuda kernal"
          },
          "chunk_tolerance": {
            "type": "number",
            "title": "Chunk Tolerance",
            "description": "tolerance of a chunk before excavator switches the core chunk in cm"
          },
          "exc_offset": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Exc Offset",
            "description": "offset of the excavator position to the chunk system position"
          }
        },
        "type": "object",
        "title": "UpdateGeneral"
      },
      "src__v2__systemconfiguration__csparams__schemas__UpdateOrthophoto": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "specifies if the orthophoto is active"
          }
        },
        "type": "object",
        "title": "UpdateOrthophoto"
      },
      "src__v2__systemconfiguration__isparams__schemas__InputGeneral": {
        "properties": {
          "mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParamMode"
              }
            ],
            "description": "Mode of the system. Example: 'leica'"
          },
          "bucket_data_available": {
            "type": "boolean",
            "title": "Bucket Data Available",
            "description": "if the sensor handle provides bucket data or not"
          }
        },
        "type": "object",
        "title": "InputGeneral"
      },
      "src__v2__systemconfiguration__isparams__schemas__OutGeneral": {
        "properties": {
          "mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParamMode"
              }
            ],
            "description": "Mode of the system. Example: 'leica'"
          },
          "bucket_data_available": {
            "type": "boolean",
            "title": "Bucket Data Available",
            "description": "if the sensor handle provides bucket data or not"
          }
        },
        "type": "object",
        "title": "OutGeneral"
      },
      "src__v2__systemconfiguration__isparams__schemas__UpdateGeneral": {
        "properties": {
          "mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParamMode"
              }
            ],
            "description": "Mode of the system. Example: 'leica'"
          },
          "bucket_data_available": {
            "type": "boolean",
            "title": "Bucket Data Available",
            "description": "if the sensor handle provides bucket data or not"
          }
        },
        "type": "object",
        "title": "UpdateGeneral"
      },
      "src__v2__systemconfiguration__machineconfigs__schemas__InputMeasurements": {
        "properties": {
          "length": {
            "type": "number",
            "title": "Length",
            "description": "length of the machine"
          },
          "width": {
            "type": "number",
            "title": "Width",
            "description": "width of the machine"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "height of the machine"
          },
          "weight": {
            "type": "number",
            "title": "Weight",
            "description": "weight of the machine"
          },
          "rotation_boom": {
            "type": "number",
            "title": "Rotation Boom",
            "description": "rotation of the boom"
          },
          "distance_boom": {
            "type": "number",
            "title": "Distance Boom",
            "description": "distance of the boom"
          },
          "boom_length": {
            "type": "number",
            "title": "Boom Length",
            "description": "length of the boom"
          },
          "boom2_length": {
            "type": "number",
            "title": "Boom2 Length",
            "description": "length of the 2nd boom"
          },
          "stick_length": {
            "type": "number",
            "title": "Stick Length",
            "description": "length of the stick"
          },
          "powertilt": {
            "type": "number",
            "title": "Powertilt",
            "description": "length of power tilt of the machine"
          },
          "rotator": {
            "type": "number",
            "title": "Rotator",
            "description": "length of rotator of the machine"
          },
          "rotation_boom_offset": {
            "type": "number",
            "title": "Rotation Boom Offset",
            "description": "rotation of the boom offset"
          }
        },
        "type": "object",
        "title": "InputMeasurements"
      },
      "src__v2__systemconfiguration__machineconfigs__schemas__OutMeasurements": {
        "properties": {
          "length": {
            "type": "number",
            "title": "Length",
            "description": "length of the machine"
          },
          "width": {
            "type": "number",
            "title": "Width",
            "description": "width of the machine"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "height of the machine"
          },
          "weight": {
            "type": "number",
            "title": "Weight",
            "description": "weight of the machine"
          },
          "rotation_boom": {
            "type": "number",
            "title": "Rotation Boom",
            "description": "rotation of the boom"
          },
          "distance_boom": {
            "type": "number",
            "title": "Distance Boom",
            "description": "distance of the boom"
          },
          "boom_length": {
            "type": "number",
            "title": "Boom Length",
            "description": "length of the boom"
          },
          "boom2_length": {
            "type": "number",
            "title": "Boom2 Length",
            "description": "length of the 2nd boom"
          },
          "stick_length": {
            "type": "number",
            "title": "Stick Length",
            "description": "length of the stick"
          },
          "powertilt": {
            "type": "number",
            "title": "Powertilt",
            "description": "length of power tilt of the machine"
          },
          "rotator": {
            "type": "number",
            "title": "Rotator",
            "description": "length of rotator of the machine"
          },
          "rotation_boom_offset": {
            "type": "number",
            "title": "Rotation Boom Offset",
            "description": "rotation of the boom offset"
          }
        },
        "type": "object",
        "title": "OutMeasurements"
      },
      "src__v2__systemconfiguration__machineconfigs__schemas__UpdateMeasurements": {
        "properties": {
          "length": {
            "type": "number",
            "title": "Length",
            "description": "length of the machine"
          },
          "width": {
            "type": "number",
            "title": "Width",
            "description": "width of the machine"
          },
          "height": {
            "type": "number",
            "title": "Height",
            "description": "height of the machine"
          },
          "weight": {
            "type": "number",
            "title": "Weight",
            "description": "weight of the machine"
          },
          "rotation_boom": {
            "type": "number",
            "title": "Rotation Boom",
            "description": "rotation of the boom"
          },
          "distance_boom": {
            "type": "number",
            "title": "Distance Boom",
            "description": "distance of the boom"
          },
          "boom_length": {
            "type": "number",
            "title": "Boom Length",
            "description": "length of the boom"
          },
          "boom2_length": {
            "type": "number",
            "title": "Boom2 Length",
            "description": "length of the 2nd boom"
          },
          "stick_length": {
            "type": "number",
            "title": "Stick Length",
            "description": "length of the stick"
          },
          "powertilt": {
            "type": "number",
            "title": "Powertilt",
            "description": "length of power tilt of the machine"
          },
          "rotator": {
            "type": "number",
            "title": "Rotator",
            "description": "length of rotator of the machine"
          },
          "rotation_boom_offset": {
            "type": "number",
            "title": "Rotation Boom Offset",
            "description": "rotation of the boom offset"
          }
        },
        "type": "object",
        "title": "UpdateMeasurements"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {
              "system": "system",
              "user": "user",
              "mobile": "mobile"
            },
            "tokenUrl": "/auth/token"
          }
        }
      },
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}
